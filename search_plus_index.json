{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Introduction2. 资料3. 开源项目3.1. Desktop4. 博客1. Introduction [danger] 提示 如果需要评论需要梯子！ 2. 资料 谷歌开发者-Flutter 和桌面应用的最新进展 闲鱼团队技术博客 Flutter 专题 知乎 Flutter 精华讨论 思否社区 Flutter 技术问答 掘金社区 Flutter 专栏 FlutterDouBan-Github flutter widget livebook Github-博客集合整理 Flutter 中文网 Flutter开发中的一些Tips 3. 开源项目 推荐7个Flutter重磅开源项目! 3.1. Desktop YouTube-Flutter Web Tutorial (Setup and Make a dashboard project) YouTube-flutter dashboard web Github-flutter_admin 4. 博客 FlutterUnit web版闪亮登场 "},"tutorial/":{"url":"tutorial/","title":"教程","keywords":"","body":""},"tutorial/useage.html":{"url":"tutorial/useage.html","title":"使用","keywords":"","body":"1. 平台支持1.1. macOS1.2. web1. 平台支持 1.1. macOS flutter channel master flutter upgrade flutter config --enable-macos-desktop # --enable-web --enable-linux-desktop --enable-windows-desktop --enable-android-embedding-v2 export ENABLE_FLUTTER_DESKTOP=true flutter doctor flutter devices # run flutter run -d macos # build flutter build macos 1.2. web flutter channel beta flutter upgrade flutter config --enable-web "},"tutorial/module.html":{"url":"tutorial/module.html","title":"组件化","keywords":"","body":" "},"tutorial/adapter.html":{"url":"tutorial/adapter.html","title":"适配","keywords":"","body":" flutter_screenutil,使用平台:ANDROID、IOS、WEB。 "},"tutorial/CommandLine.html":{"url":"tutorial/CommandLine.html","title":"命令行","keywords":"","body":"1. 全局命令2. 可使用的命令3. channel4. create5. pub5.1. cache 打印可用设备 1. 全局命令 -h, --help 帮助文档 -v, --verbose 详细日志 -d, --device-id 可用设备列表、ID --version 版本号 --suppress-analytics 禁止分析日志 --packages 2. 可使用的命令 analyze # Analyze the project's Dart code. assemble # Assemble and build flutter resources. attach # Attach to a running application. bash-completion # Output command line shell completion setup scripts. build # Flutter build commands. channel # List or switch flutter channels. clean # Delete the build/ and .dart_tool/ directories. config # Configure Flutter settings. create # Create a new Flutter project. devices # List all connected devices. doctor # Show information about the installed tooling. downgrade # Downgrade Flutter to the last active version for the current channel. drive # Runs Flutter Driver tests for the current project. emulators # List, launch and create emulators. format # Format one or more dart files. install # Install a Flutter app on an attached device. logs # Show log output for running Flutter apps. precache # Populates the Flutter tool's cache of binary artifacts. pub # Commands for managing Flutter packages. run # Run your Flutter app on an attached device. screenshot # Take a screenshot from a connected device. symbolize # Symbolize a stack trace from an AOT compiled flutter application. test # Run Flutter unit tests for the current project. upgrade # 更新 Flutter version # 查看 Flutter 版本 3. channel # 查看所有channel % flutter channel # Flutter channels: # * master # dev # beta # stable # 切换分支 % flutter stable % git pull % stable upgrade 4. create --platforms # 平台：[ios (default), android (default), windows (default), linux (default), macos (default), web (default)] --[no-]pub # 当项目创建好了以后是否执行 \"flutter pub get\" (defaults to on) --[no-]offline # --[no-]with-driver-test # -t, --template= # type：[app]、[module]、[package]、[plugin] -s, --sample= --list-samples= --[no-]overwrite # 重写已存在的文件 --description # 项目描述，写在 pubspec.yaml 中 `description` 字段。 (defaults to \"A new Flutter project.\") --org # 以反向域名表示法来指定你的组织。该值用于生成的 Android 及 iOS 代码。 This string is used in Java package names and as prefix in the iOS bundle identifier. --project-name # 项目名 -i, --ios-language # 指定 iOS 的语言 [objc, swift (default)] -a, --android-language # 指定 Android 的语言 [java, kotlin (default)] 5. pub cache #Work with the Pub system cache. deps #Print package dependencies. downgrade #Downgrade packages in a Flutter project. get #Get packages in a Flutter project. global #Work with Pub global packages. outdated #Analyze dependencies to find which ones can be upgraded. pub #Pass the remaining arguments to Dart's \"pub\" tool. publish #Publish the current package to pub.dev run #Run an executable from a package. test #Run the \"test\" package. upgrade #Upgrade packages in a Flutter project. uploader #Manage uploaders for a package on pub.dev. version #Print Pub version. 5.1. cache # 对系统缓存中的软件包执行干净的重新安装 % flutter pub cache repare "},"tutorial/data_transform.html":{"url":"tutorial/data_transform.html","title":"数据转换","keywords":"","body":"1. JSON String 互转2. JSON Model 互转2.1. json_annotation2.1.1. @JsonKey1. JSON String 互转 json对象与字符串的转换是使用json.encode和json.decode的，需要导入import 'dart:convert'; 2. JSON Model 互转 dependencies: json_annotation: ^3.0.1 dev_dependencies: build_runner: 1.10.1 json_serializable: 3.3.0 import 'package:json_annotation/json_annotation.dart'; part 'news.g.dart'; @JsonSerializable() class News { final String firstName; final String middleName; final String lastName; News(this.firstName, this.middleName, this.lastName); factory News.fromJson(Map json) => _$NewsFromJson(json); Map toJson() => _$NewsToJson(this); } 在项目的根目录执行:flutter packages pub run build_runner build。 更详细的资料可以参考官方JSON和序列化数据。 代码自动生成网站 2.1. json_annotation 2.1.1. @JsonKey @JsonKey(name: 'registration_date_millis') final int registrationDateMillis; // 就是把字段 registration_date_millis 转成 registrationDateMillis "},"tutorial/messageNotification.html":{"url":"tutorial/messageNotification.html","title":"集成推送功能","keywords":"","body":"1. 添加依赖2. 项目配置2.1. Android配置2.2. iOS配置3. 极光配置3.1. 创建应用3.2. 上传证书4. 集成到代码5. 资料可以在极光文档中找到Flutter插件。或者从pub.dev中找到jpush_flutter插件。 极光推送的架构示意图： 1. 添加依赖 # https://pub.dev/packages/jpush_flutter dependencies: jpush_flutter: 0.5.5 2. 项目配置 2.1. Android配置 在 /android/app/build.gradle 中添加下列代码： defaultConfig { // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html). applicationId \"com.example.proj_shop\" manifestPlaceholders = [ JPUSH_PKGNAME : applicationId, JPUSH_APPKEY : \"appkey\", // NOTE: JPush 上注册的包名对应的 Appkey. JPUSH_CHANNEL : \"developer-default\", //暂时填写默认值即可. ] } 2.2. iOS配置 在XCode8之后需要点开推送选项：TARGETS -> Capabilities -> Push Notification 设为on状态。 注意：要在开发者中把通知相关的证书、配置都配好。 3. 极光配置 3.1. 创建应用 3.2. 上传证书 4. 集成到代码 void main() { runApp(MyApp()); } class MyApp extends StatefulWidget { // This widget is the root of your application. @override _MyAppState createState() => _MyAppState(); } class _MyAppState extends State { String debugLable = 'Unknown'; final JPush jpush = new JPush(); Future initPlatformState() async { String platformVersion; try { jpush.addEventHandler( onReceiveNotification: (Map message) async { print(\"flutter onReceiveNotification: $message\"); setState(() { debugLable = \"flutter onReceiveNotification: $message\"; }); }, onOpenNotification: (Map message) async { print(\"flutter onOpenNotification: $message\"); setState(() { debugLable = \"flutter onOpenNotification: $message\"; }); }, onReceiveMessage: (Map message) async { print(\"flutter onReceiveMessage: $message\"); setState(() { debugLable = \"flutter onReceiveMessage: $message\"; }); }, onReceiveNotificationAuthorization: (Map message) async { print(\"flutter onReceiveNotificationAuthorization: $message\"); setState(() { debugLable = \"flutter onReceiveNotificationAuthorization: $message\"; }); }, ); } on PlatformException { platformVersion = 'Failed to get platform version.'; } catch (e) {} jpush.setup( appKey: '318094958c89512a1169bc13', channel: 'theChannel', production: false, debug: true, ); jpush.applyPushAuthority( NotificationSettingsIOS(sound: true, alert: true, badge: true), ); jpush.getRegistrationID().then((rid) { print(\"flutter get registration id : $rid\"); setState(() { debugLable = \"flutter getRegistrationID: $rid\"; }); }); if (!mounted) { return; } setState(() { debugLable = platformVersion; }); } @override void initState() { initPlatformState(); super.initState(); } @override Widget build(BuildContext context) { return MaterialApp( title: '百姓生活+', debugShowCheckedModeBanner: false, theme: ThemeData(primaryColor: Colors.pink), //home: IndexPage(), home: Scaffold( appBar: AppBar(title: Text('Plugin example app')), body: Center( child: Column( children: [ Container( margin: EdgeInsets.fromLTRB(10, 10, 10, 10), color: Colors.brown, child: Text(debugLable), width: 350, height: 100, ), Row( mainAxisAlignment: MainAxisAlignment.center, children: [ new Text(\" \"), new CustomButton( title: \"发本地推送\", onPressed: () { // 三秒后出发本地推送 var fireDate = DateTime.fromMillisecondsSinceEpoch( DateTime.now().millisecondsSinceEpoch + 3000); var localNotification = LocalNotification( id: 234, title: 'fadsfa', buildId: 1, content: 'fdas', fireTime: fireDate, subtitle: 'fasf', badge: 5, extra: {\"fa\": \"0\"}); jpush .sendLocalNotification(localNotification) .then((res) { setState(() { debugLable = res; }); }); }), new Text(\" \"), new CustomButton( title: \"getLaunchAppNotification\", onPressed: () { jpush.getLaunchAppNotification().then((map) { setState(() { debugLable = \"getLaunchAppNotification success: $map\"; }); }).catchError((error) { setState(() { debugLable = \"getLaunchAppNotification error: $error\"; }); }); }), ]), Row( mainAxisAlignment: MainAxisAlignment.center, children: [ new Text(\" \"), new CustomButton( title: \"setTags\", onPressed: () { jpush.setTags([\"lala\", \"haha\"]).then((map) { var tags = map['tags']; setState(() { debugLable = \"set tags success: $map $tags\"; }); }).catchError((error) { setState(() { debugLable = \"set tags error: $error\"; }); }); }), new Text(\" \"), new CustomButton( title: \"addTags\", onPressed: () { jpush.addTags([\"lala\", \"haha\"]).then((map) { var tags = map['tags']; setState(() { debugLable = \"addTags success: $map $tags\"; }); }).catchError((error) { setState(() { debugLable = \"addTags error: $error\"; }); }); }), new Text(\" \"), new CustomButton( title: \"deleteTags\", onPressed: () { jpush.deleteTags([\"lala\", \"haha\"]).then((map) { var tags = map['tags']; setState(() { debugLable = \"deleteTags success: $map $tags\"; }); }).catchError((error) { setState(() { debugLable = \"deleteTags error: $error\"; }); }); }), ]), Row( mainAxisAlignment: MainAxisAlignment.center, children: [ new Text(\" \"), new CustomButton( title: \"getAllTags\", onPressed: () { jpush.getAllTags().then((map) { setState(() { debugLable = \"getAllTags success: $map\"; }); }).catchError((error) { setState(() { debugLable = \"getAllTags error: $error\"; }); }); }), new Text(\" \"), new CustomButton( title: \"cleanTags\", onPressed: () { jpush.cleanTags().then((map) { var tags = map['tags']; setState(() { debugLable = \"cleanTags success: $map $tags\"; }); }).catchError((error) { setState(() { debugLable = \"cleanTags error: $error\"; }); }); }), ]), Row( mainAxisAlignment: MainAxisAlignment.center, children: [ new Text(\" \"), new CustomButton( title: \"setAlias\", onPressed: () { jpush.setAlias(\"thealias11\").then((map) { setState(() { debugLable = \"setAlias success: $map\"; }); }).catchError((error) { setState(() { debugLable = \"setAlias error: $error\"; }); }); }), new Text(\" \"), new CustomButton( title: \"deleteAlias\", onPressed: () { jpush.deleteAlias().then((map) { setState(() { debugLable = \"deleteAlias success: $map\"; }); }).catchError((error) { setState(() { debugLable = \"deleteAlias error: $error\"; }); }); }), ]), Row( mainAxisAlignment: MainAxisAlignment.center, children: [ new Text(\" \"), new CustomButton( title: \"stopPush\", onPressed: () { jpush.stopPush(); }), new Text(\" \"), new CustomButton( title: \"resumePush\", onPressed: () { jpush.resumePush(); }), ], ), Row( mainAxisAlignment: MainAxisAlignment.center, children: [ new Text(\" \"), new CustomButton( title: \"clearAllNotifications\", onPressed: () { jpush.clearAllNotifications(); }), new Text(\" \"), new CustomButton( title: \"setBadge\", onPressed: () { jpush.setBadge(66).then((map) { setState(() { debugLable = \"setBadge success: $map\"; }); }).catchError((error) { setState(() { debugLable = \"setBadge error: $error\"; }); }); }), ]), Row( mainAxisAlignment: MainAxisAlignment.center, children: [ new Text(\" \"), new CustomButton( title: \"通知授权是否打开\", onPressed: () { jpush.isNotificationEnabled().then((bool value) { setState(() { debugLable = \"通知授权是否打开: $value\"; }); }).catchError((onError) { setState(() { debugLable = \"通知授权是否打开: ${onError.toString()}\"; }); }); }), new Text(\" \"), new CustomButton( title: \"打开系统设置\", onPressed: () { jpush.openSettingsForNotification(); }), ]), ], ), ), ), ); } } /// 封装控件 class CustomButton extends StatelessWidget { final VoidCallback onPressed; final String title; const CustomButton({@required this.onPressed, @required this.title}); @override Widget build(BuildContext context) { return new FlatButton( onPressed: onPressed, child: new Text(\"$title\"), color: Color(0xff585858), highlightColor: Color(0xff888888), splashColor: Color(0xff888888), textColor: Colors.white, //padding: EdgeInsets.fromLTRB(5, 5, 5, 5), ); } } 可以在官方中发推送消息测试推送。 5. 资料 掘金-Flutter应用集成极光推送 Github-极光推送文档 "},"tutorial/upgrade.html":{"url":"tutorial/upgrade.html","title":"升级弹窗","keywords":"","body":"1. 代码实现 用到的依赖: url_launcher： 用于打开AppStore链接。 1. 代码实现 class TutorialApp extends StatefulWidget { @override _TutorialAppState createState() => _TutorialAppState(); } class _TutorialAppState extends State { @override Widget build(BuildContext context) { return MaterialApp( onGenerateRoute: generateRoute, ); } Route generateRoute(RouteSettings routeSettings) { switch (routeSettings.name) { case '/page2': return MaterialPageRoute(builder: (_) => TutorialPage2()); case '/page3': return MaterialPageRoute(builder: (_) => TutorialPage3()); default: return MaterialPageRoute(builder: (_) => TutorialPage1()); } } } 主页面创建弹窗: class TutorialPage1 extends StatefulWidget { @override _TutorialPage1State createState() => _TutorialPage1State(); } class _TutorialPage1State extends State { @override void initState() { updateAlert(context); super.initState(); } @override Widget build(BuildContext context) { return Scaffold(); } } Future updateAlert(BuildContext context) async { Future.delayed(Duration(seconds: 2)).then((value) { // 显示升级弹窗 showDialog( context: context, barrierDismissible: false, // 点击空白区域对话框不消失 builder: (_) { return WillPopScope( child: TutorialUpdateDialog(), onWillPop: () { return; }, ); }, ); }); } 弹窗的Widget： class TutorialUpdateDialog extends StatefulWidget { final bool isForceUpdate; // 是否强制更新 const TutorialUpdateDialog({Key key, this.isForceUpdate = false}) : super(key: key); @override _TutorialUpdateDialogState createState() => _TutorialUpdateDialogState(); } class _TutorialUpdateDialogState extends State { @override Widget build(BuildContext context) { return Center( child: Material( type: MaterialType.transparency, textStyle: TextStyle(color: Color(0xFF212121)), child: Container( width: MediaQuery.of(context).size.width * 0.8, // 宽度是整宽的百分之80 decoration: BoxDecoration( color: Colors.white, // 背景白色 borderRadius: BorderRadius.all(Radius.circular(4.0)), // 圆角 ), child: Wrap( children: [ SizedBox(height: 10, width: 20), // 关闭按钮 Align( alignment: Alignment.topRight, child: widget.isForceUpdate ? Container() : InkWell( onTap: () { Navigator.pop(context); }, child: Padding( padding: const EdgeInsets.only( top: 5.0, right: 15.0, bottom: 5.0, left: 5.0, ), child: Icon(Icons.clear, color: Colors.black), ), ), ), // 模拟升级弹窗logo Center(child: FlutterLogo(size: 121.5)), // 升级到最新版本! Container( height: 30.0, width: double.infinity, alignment: Alignment.center, child: Text( \"升级到最新版本!\", style: TextStyle( color: Color(0xff343243), fontSize: 17.0, fontWeight: FontWeight.bold, ), ), ), // 更新内容 Container( width: double.infinity, alignment: Alignment.center, child: Padding( padding: const EdgeInsets.symmetric( horizontal: 40.0, vertical: 15.0, ), child: Text( \"1. 修复了若干BUG!\\n2. 程序员已经辞职！程序员已经辞职！程序员已经辞职！程序员已经辞职！\", style: TextStyle( color: Color(0xff7A7A7A), ), ), ), ), // 立即升级 Container( height: 80.0, width: double.infinity, padding: EdgeInsets.symmetric(horizontal: 10.0, vertical: 18.0), margin: EdgeInsets.only(bottom: 10.0), decoration: BoxDecoration( borderRadius: BorderRadius.only( bottomLeft: Radius.circular(12.0), bottomRight: Radius.circular(12.0), ), ), child: MaterialButton( onPressed: () { upgradeHandle(); }, child: Text(\"立即升级\"), ), ), ], ), ), ), ); } // 点击立即升级事件 void upgradeHandle() { // 必须保证当前状态安全，才能进行状态刷新 if (mounted) { setState(() {}); } // 平台判断 if (Platform.isAndroid) { _androidUpgrade(); } else if (Platform.isIOS) { _iosUpgrade(); } } // 安卓更新 void _androidUpgrade() {} // iOS更新 void _iosUpgrade() { _launchURL(); } // 直接打开AppStore链接 _launchURL() async { const url = \"https://apps.apple.com/cn/app/%E5%BE%AE%E4%BF%A1/id414478124\"; if (await canLaunch(url)) { await launch(url); } else { throw 'Could not launch $url'; } } } "},"tutorial/persistence.html":{"url":"tutorial/persistence.html","title":"数据持久","keywords":"","body":"1. 参考资料2. 键值对数值存储3. 文件读写4. 用 SQLite 做数据持久化1. 参考资料 存储键值对数据 文件读写 用 SQLite 做数据持久化 2. 键值对数值存储 对于少量数据可以使用shared_preferences进行存储。 3. 文件读写 path_provider 提供一种平台无关的方式以一致的方式访问设备的文件位置系统。这个插件只支持iOS、Android。 临时文件夹： iOS上是NSCachesDirectory，在Android上是getCacheDir()。 Documents文件夹： iOS上是NSDocumentDirectory，在Android上是AppData。 import 'dart:io'; import 'package:path_provider/path_provider.dart'; // 找到正确的本地路径 Future _localPath() async { final dir = await getApplicationDocumentsDirectory(); return dir.path; } // 创建一个指向文件位置的引用 Future _localFile(String file) async { final path = await _localPath(); return File(\"$path/$file\"); } // 将数据写入文件 Future _writeToPath() async { final File file = await _localFile(\"counter.txt\"); file.writeAsString(\"StringData\"); } // 从文件读取数据 Future _readFromPath() async { try { final File file = await _localFile(\"counter.txt\"); String contents = await file.readAsString(); print(contents); return contents; } catch (e) { print(\"error\"); return \"\"; } } 4. 用 SQLite 做数据持久化 如果是需要存储大量的数据就不推荐使用键值对存储，可以使用sqflite插件，来使用SQLite数据库。 需要的依赖插件: sqflite 提供了丰富的类和方法，以便你能便捷实用 SQLite 数据库。 path 提供了大量方法，以便你能正确的定义数据库在磁盘上的存储位置。 import 'package:path/path.dart'; import 'package:sqflite/sqflite.dart'; // 打开数据库 Future _openDataBase() async { String dbPath = await getDatabasesPath(); print(dbPath); // 如果本地没有test.db数据库，则会在本地创建一个空的test.db数据库。 Database database = await openDatabase( join(dbPath, \"test.db\"), onCreate: (Database db, int version) { // 创建数据表 return db.execute( \"CREATE TABLE dogs(id INTEGER PRIMARY KEY, name TEXT, age INTEGER, age1 INTEGER)\"); }, version: 1, ); return database; } // 插入数据 _insertDogField(Dog dog) async { Database db = await _openDataBase(); await db.insert( \"dogs\", dog.toMap(), conflictAlgorithm: ConflictAlgorithm.replace, ); } _insertDemo() async { final fido = Dog( id: 0, name: 'Fido', age: 35, ); await _insertDogField(fido); } // 查询数据 _queryDog() async { final Database db = await _openDataBase(); final List> list = await db.query('dogs'); print(list); } // 更新数据 Future _updateDog(Dog dog) async { final Database db = await _openDataBase(); await db.update( 'dogs', dog.toMap(), where: \"id = ?\", whereArgs: [dog.id], ); } // 删除数据 Future _delDog(int id) async { final Database db = await _openDataBase(); await db.delete(\"dogs\", where: \"id = ?\", whereArgs: [id]); } 表数据模型 class Dog { final int id; final String name; final int age; Dog({this.id, this.name, this.age}); Map toMap() { return { 'id': id, 'name': name, 'age': age, }; } } "},"tutorial/refreshpage.html":{"url":"tutorial/refreshpage.html","title":"刷新数据","keywords":"","body":"数据加载状态 当前什么也没做(网络请求前,网络请求成功) 数据加载中 数据加载失败(业务逻辑错误) 数据加载网络异常 数据状态 没有数据 有数据 这样两种状态组合可以得到页面的八种状态,因此我们的加载更多要在这八种状态中进行切换. "},"Packages/":{"url":"Packages/","title":"Packages","keywords":"","body":" dart.cn-package pub.dev "},"Packages/packages.html":{"url":"Packages/packages.html","title":"Packages 使用","keywords":"","body":"1. 创建Packages1.1. 纯Dart(Dart packages)1.2. 原生插件(Plugin packages)1.2.1. 创建 package1.2.2. 指定插件支持平台1.2.3. package 添加iOS平台代码2. 发布到 pub.dev3. package 依赖3.1. 依赖纯Dart插件3.2. 依赖原生插件3.2.1. iOS4. 依赖源4.1. 路径4.2. Git [danger] 注意 如果使用了 Flutter SDK 就不能直接使用 pub 命令，需要使用 flutter pub。Flutter Packages 1. 创建Packages 1.1. 纯Dart(Dart packages) 使用纯Dart语言写的packages，使用范围仅限于Flutter。 $ flutter create --template=package hello 创建成功后项目的数结构: hello ├── CHANGELOG.md # 用于记录 package 的版本变更。 ├── LICENSE # 空的一个许可证文件 ├── README.md # 用于描述 package。 ├── hello.iml # 由 IntelliJ 生成的配置文件 ├── lib │ └── hello.dart # package 的 Dart 实现代码。 ├── pubspec.lock # ├── pubspec.yaml # pub 工具需要使用的，包含 package 依赖的 yaml 格式的文件 └── test └── hello_test.dart # 单元测试 文件 1.2. 原生插件(Plugin packages) 要开发一个调用特定平台 API 的 package,就需要开发一个原生插件packgae。除了要实现 Dart package 要实现的内容，还需要按需使用 Java 或 Kotlin、ObjC 或 Swift 分别在 Android 和/或 iOS 平台实现，你可以使用 platform channels中的 API 来实现特定平台的调用。 1.2.1. 创建 package $ flutter create --org com.example --template=plugin -a kotlin hello # 或者 $ flutter create --org com.example --template=plugin -a java hello # 或者 $ flutter create --org com.example --template=plugin -i objc hello # 或者 $ flutter create --org com.example --template=plugin -i swift hello Package的树结构： hello ├── CHANGELOG.md ├── LICENSE ├── README.md ├── example # 一个依赖于该插件并说明了如何使用它的 Flutter 应用 ├── hello.iml ├── ios │ ├── Assets │ ├── Classes │ │ ├── HelloPlugin.h # iOS 平台原生插件 API 实现 │ │ └── HelloPlugin.m # iOS 平台原生插件 API 实现 │ └── hello.podspec ├── lib │ └── hello.dart # Dart 插件 API 实现 ├── pubspec.lock ├── pubspec.yaml └── test └── hello_test.dart 1.2.2. 指定插件支持平台 在pubspec.yaml中指定一个插件支持的平台。 flutter: # 指定插件的支持的平台：[ios (default), android (default), windows (default), linux (default), macos (default), web (default)] plugin: platforms: android: package: com.example.hello pluginClass: HelloPlugin ios: pluginClass: HelloPlugin macos: pluginClass: HelloPlugin web: pluginClass: HelloPlugin fileName: hello_web.dart 再次执行: flutter create --org com.example --template=plugin ... 创建插件的命令。可以创建其他平台的插件。 1.2.3. package 添加iOS平台代码 使用 Xcode 编辑 iOS 平台代码之前，首先确保代码至少被构建过一次： $ cd hello/example $ flutter build ios --no-codesign 插件的 iOS 平台代码位于项目导航中的这个位置:Pods/Development Pods/hello/../../example/ios/.symlinks/plugins/hello/ios/Classes 2. 发布到 pub.dev 在发布 package 之前，确保检查了这几个文件：pubspec.yaml、README.md 和 CHANGELOG.md，确保它们完整。 # 检验是否所有内容都通过了分析 $ flutter pub publish --dry-run # 最后一步是发布，请注意：发布是永久性 的 $ flutter pub publish # 或者 $ flutter pub publish --server=https://pub.dartlang.org 3. package 依赖 如果当前正在开发的 hello Package，需要依赖另外一个 url_launcher Package，需要将 url_launcher 添加到文件 pubspec.yaml 的 dependencies 字段中。 3.1. 依赖纯Dart插件 dependencies: url_launcher: ^5.0.0 3.2. 依赖原生插件 3.2.1. iOS 在 hello/ios/hello.podspec 文件中为 url_launcher 插件设定依赖关系。 Pod::Spec.new do |s| s.dependency 'url_launcher' 4. 依赖源 4.1. 路径 项目路径树: . ├── demo # 项目，在 demo 中使用 package_a │ ├── README.md │ ├── android │ ├── ios │ ├── lib │ │ └── main.dart │ ├── macos │ ├── pubspec.lock │ ├── pubspec.yaml │ ├── test │ ├── web │ └── windows └── package_a # package ├── lib │ └── package_a.dart ├── package_a.iml ├── pubspec.lock ├── pubspec.yaml └── test └── package_a_test.dart 配置 demo 中 podspec.yaml 的依赖： dependencies: flutter: sdk: flutter package_a: path: /Users/sam/Documents/Dart/package_dart/package_a demo 中使用 package: import 'package:package_a/package_a.dart'; class _MyHomePageState extends State { void _incrementCounter() { setState(() { Calculator cal = Calculator(); cal.addOne(1); }); } } package_a.dart中的代码： library package_a; class Calculator { int addOne(int value) => value + 1; } 4.2. Git 详细的Git依赖可以参考官方 配置 demo 中 podspec.yaml 的依赖： dependencies: flutter: sdk: flutter package_b: git: https://gitee.com/package_mo/package_b.git # ref: some-branch "},"Packages/PluginsNotes.html":{"url":"Packages/PluginsNotes.html","title":"插件整理","keywords":"","body":"1. 官方维护的插件2. 非官方3. provider4. webview_flutter4.1. 基础4.2. 代码4.3. 完整代码5. flutter_webview_plugin5.1. 配置5.2. 代码解析5.3. 完整代码6. 资料1. 官方维护的插件 插件 功能 平台 android_alarm_manager android_intent battery camera connectivity device_info e2e espresso flutter_plugin_android_lifecycle google_maps_flutter google_sign_in image_picker in_app_purchase ios_platform_images local_auth package_info 获取package的信息 path_provider plugin_platform_interface quick_actions sensors share shared_preferences url_launcher video_player ANDROID、IOS webview_flutter provider 状态管理 ANDROID、IOS、WEB 2. 非官方 插件 功能 平台 SQLite SQLite ANDROID、IOS flutter_datetime_picker 时间选择器 ANDROID、IOS、WEB flutter_webview_plugin 网页组件 ANDROID、IOS flutter_screenutil 屏幕适配 ANDROID、IOS、WEB fluttertoast toast ANDROID、IOS 3. provider YouTube-使用示例 4. webview_flutter 4.1. 基础 在iOS中添加配置: io.flutter.embedded_views_preview YES 4.2. 代码 const WebView({ Key key, WebViewCreatedCallback onWebViewCreated, // WebView创建完成时调用 this.initialUrl, // 需要加载的链接URL this.javascriptMode = JavascriptMode.disabled, // JS执行模式 this.javascriptChannels, // 使用javascriptChannel JS可以调用Flutter NavigationDelegate navigationDelegate, // 拦截请求 this.gestureRecognizers, // 手势 this.onPageStarted, this.onPageFinished, // 页面加载完成 this.onWebResourceError, this.debuggingEnabled = false, this.gestureNavigationEnabled = false, this.userAgent, this.initialMediaPlaybackPolicy = AutoMediaPlaybackPolicy.require_user_action_for_all_media_types, }) navigationDelegate： WebView( navigationDelegate: (NavigationRequest navigation) { return NavigationDecision.navigate; }, ), enum NavigationDecision { prevent, // 需要执行拦截 navigate, // 不需要拦截操作 } 4.3. 完整代码 class _MemberPageState extends State { WebViewController _webViewController; @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text('会员中心')), body: WebView( initialUrl: 'http://192.168.20.40:4011/web.html', javascriptMode: JavascriptMode.unrestricted, onWebViewCreated: (WebViewController webViewController) { _webViewController = webViewController; }, onPageFinished: (String url) { /*String javascriptString = \"window.isLogin=是否登录\"; _webViewController .evaluateJavascript(javascriptString) .then((value) {});*/ }, onPageStarted: (String url) {}, navigationDelegate: (NavigationRequest navigation) { print(navigation.url); // //不需要拦截的操作 return NavigationDecision.navigate; }, gestureNavigationEnabled: true, userAgent: \"uhome\", ), ); } } 5. flutter_webview_plugin 5.1. 配置 iOS： NSAppTransportSecurity NSAllowsArbitraryLoads NSAllowsArbitraryLoadsInWebContent 5.2. 代码解析 const WebviewScaffold({ Key key, PreferredSizeWidget appBar, String url, // 网页链接 Map headers, Set javascriptChannels, bool withJavascript, bool clearCache, bool clearCookies, bool mediaPlaybackRequiresUserGesture = true, bool enableAppScheme, String userAgent, bool primary = true, List persistentFooterButtons, Widget bottomNavigationBar, bool withZoom, bool displayZoomControls, bool withLocalStorage, bool withLocalUrl, String localUrlScope, bool withOverviewMode, bool useWideViewPort, bool scrollBar, bool supportMultipleWindows, Widget appCacheEnabled, bool hidden = false, bool initialChild, String allowFileURLs, bool resizeToAvoidBottomInset = false, bool invalidUrlRegex, bool geolocationEnabled, bool debuggingEnabled = false, bool ignoreSSLErrors = false, }) 5.3. 完整代码 class _MemberPageState extends State { @override Widget build(BuildContext context) { return WebviewScaffold( appBar: AppBar(title: Text(\"会员中心\")), url: 'http://192.168.20.40:4011/web.html', withZoom: true, withLocalStorage: true, hidden: true, initialChild: Container( color: Colors.redAccent, child: const Center( child: Text('Waiting.....'), ), ), ); } } 6. 资料 https://juejin.im/post/5de48586e51d455c0172baac "},"Packages/flutter_screenutil.html":{"url":"Packages/flutter_screenutil.html","title":"插件：flutter_screenutil","keywords":"","body":""},"test/":{"url":"test/","title":"测试与调试","keywords":"","body":""},"test/DevTools.html":{"url":"test/DevTools.html","title":"DevTools","keywords":"","body":"1. 启动 DevTools2. 启动项目的DeBug3. 资料1. 启动 DevTools # 安装/更新 DevTools % flutter pub global activate devtools # 运行 DevTools % flutter pub global run devtools # Serving DevTools at http://127.0.0.1:9100 2. 启动项目的DeBug % cd path/to/flutter/app % flutter run # An Observatory debugger and profiler on iPhone SE (2nd generation) is available at: http://127.0.0.1:56538/Ern0_yCMKoI=/ 把http://127.0.0.1:56538/Ern0_yCMKoI=/ URL 输入到http://127.0.0.1:9100地址的输入框中进行关联，启动DeBug。 3. 资料 我们用 Flutter 写了一套全新的 Flutter 开发者工具 在 VS Code 里安装和使用开发者工具 "},"test/issue.html":{"url":"test/issue.html","title":"问题收集","keywords":"","body":"Command PhaseScriptExecution failed with a nonzero exit code note: Using new build system note: Building targets in parallel note: Planning build note: Constructing build description warning: The iOS deployment target 'IPHONEOS_DEPLOYMENT_TARGET' is set to 4.3, but the range of supported deployment target versions is 8.0 to 13.5.99. (in target 'FMDB' from project 'Pods') 这是因为Xcode版本太高的原因，修改Xcode编译系统：在Xcode菜单栏选择File -> Workspace Setting -> Build System 选择Legacy Build System 重新运行即可。 如果遇到项目运行过程中报错: Undefined symbols for architecture arm64: \"_OBJC_CLASS_$_xxx\", referenced from: ld: symbol(s) not found for architecture arm64 clang: error: linker command failed with exit code 1 (use -v to see invocation) 可以尝试把ios、android 文件夹删除，然后重新创建 flutter create . pub get failed (1; Because server_manager depends on build_runner >=1.10.2 which requires SDK version >=2.10.0-0.0 因为依赖的版本和SDK的版本冲突导致。可以尝试： 把依赖的版本设置为：build_runner: any，执行flutter pub get 在pubspec.lock中找到自动兼容的版本号比如：version: \"1.10.0\"，然后把any替换为1.10.0,再次执行flutter pub get即可。 "},"upgrade/":{"url":"upgrade/","title":"更新版本纪录","keywords":"","body":""},"upgrade/flutter_1_20.html":{"url":"upgrade/flutter_1_20.html","title":"flutter 1.20","keywords":"","body":"1. 移动端文本字段自动填充2. 更新Widget：InteractiveViewer3. 平台互操作的类型安全平台通道4. 资料 发布时间: 2020-8-6 1.20版本更新了很多，其中一些更新为： 1. 移动端文本字段自动填充 2. 更新Widget：InteractiveViewer InteractiveViewer 旨在为您的应用构建常见交互，如平移、缩放和拖放，甚至在可调节大小的窗口中也可实现这些交互。 3. 平台互操作的类型安全平台通道 为了让Flutter与宿主平台之间的通信更安全、更轻松可以使用命令行工具Pigeon， Flutter 插件 将 Flutter 集成到现有应用 Pigeon 4. 资料 谷歌开发者 "},"widget/":{"url":"widget/","title":"widgets","keywords":"","body":" 仓库地址 widgets Library "},"widget/basic/":{"url":"widget/basic/","title":"基础","keywords":"","body":"widgets "},"widget/basic/Material.html":{"url":"widget/basic/Material.html","title":"Material","keywords":"","body":"1. 构造函数Material Class Material组件帮助开发者实现Material Design。 1. 构造函数 const Material({ Key key, MaterialType type: MaterialType.canvas, double elevation: 0.0, Color color, Color shadowColor: const Color(0xFF000000), TextStyle textStyle, BorderRadiusGeometry borderRadius, ShapeBorder shape, bool borderOnForeground: true, Clip clipBehavior: Clip.none, Duration animationDuration: kThemeChangeDuration, Widget child }) enum MaterialType { canvas, card, circle, button, transparency } "},"widget/basic/MaterialApp.html":{"url":"widget/basic/MaterialApp.html","title":"MaterialApp","keywords":"","body":"1. MaterialApp(应用组件)2. 构造函数1. MaterialApp(应用组件) 2. 构造函数 const MaterialApp({ Key key, GlobalKey navigatorKey, Widget home, Map routes: const {}, String initialRoute, RouteFactory onGenerateRoute, InitialRouteListFactory onGenerateInitialRoutes, RouteFactory onUnknownRoute, List navigatorObservers: const [], TransitionBuilder builder, String title: '', GenerateAppTitle onGenerateTitle, Color color, ThemeData theme, ThemeData darkTheme, ThemeMode themeMode: ThemeMode.system, Locale locale, Iterable localizationsDelegates, LocaleListResolutionCallback localeListResolutionCallback, LocaleResolutionCallback localeResolutionCallback, Iterable supportedLocales: const [Locale('en', 'US')], bool debugShowMaterialGrid: false, bool showPerformanceOverlay: false, bool checkerboardRasterCacheImages: false, bool checkerboardOffscreenLayers: false, bool showSemanticsDebugger: false, bool debugShowCheckedModeBanner: true, // 隐藏Debug标签 Map shortcuts, Map> actions }) 属性 类型 说明 title String 应用程序的标题：iOS->程序切换管理器中Android->任务管理器的程序快照上 theme ThemeData 应用使用的主题色，可以全局也可以局部设置 color Color 应用的主题色：primary color home Widget 用来定义当前应用打开时,所显示的界面 routes Map 应用中页面跳转规则 initialRoute String 初始化路由 onGenerateRoute RouteFactory 路由回调函数。当通过Navigator.of(context).pushNamed跳转路由时，在routes查找不到时，会调用该方法 onLocalChanged 当系统修改语言的时候,会触发这个回调 navigatorObservers List 导航观察器 debugShowMaterialGrid bool 是否显示纸墨设计基础布局网格,用来调试UI的工具 showPerformanceOverlay bool 显示性能标签 MaterialApp中Navigator寻找页面的顺序: For the / route, the home property, if non-null, is used. Otherwise, the routes table is used, if it has an entry for the route. Otherwise, onGenerateRoute is called, if provided. It should return a non-null value for any valid route not handled by home and routes. Finally if all else fails onUnknownRoute is called. class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"MaterialApp Demo\", theme: ThemeData(primaryColor: Colors.blue), color: Colors.orange, home: HomePage(), routes: { \"/first\": (_) => FirstPage(), \"/second\": (_) => SecondPage(), \"/thirs\": (_) => ThirdPage(), }, ); } } // 等效于： class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"MaterialApp Demo\", theme: ThemeData(primaryColor: Colors.blue), color: Colors.orange, routes: { \"/\": (_) => HomePage(), \"/first\": (_) => FirstPage(), \"/second\": (_) => SecondPage(), \"/thirs\": (_) => ThirdPage(), }, initialRoute: '/', ); } } 下面是示例，具体效果查看CodePen import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"MaterialApp Demo\", theme: ThemeData(primaryColor: Colors.blue), color: Colors.orange, home: HomePage(), routes: { \"/first\": (_) => FirstPage(), \"/second\": (_) => SecondPage(), \"/thirs\": (_) => ThirdPage(), }, onGenerateRoute: (RouteSettings settings) { // 路由回调函数。当通过`Navigator.of(context).pushNamed`跳转路由时，在`routes`查找不到时，会调用该方法 print(settings.name + settings.arguments); return null; }, ); } } //////////////////////////////////////////////////////////////////////// class HomePage extends StatefulWidget { @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Home Page\"), ), body: Center(child: Text('Home')), floatingActionButton: FloatingActionButton( onPressed: () { Navigator.pushNamed(context, '/first'); }, child: Text('Push'), ), ); } } //////////////////////////////////////////////////////////////////////// class FirstPage extends StatefulWidget { @override _FirstPage createState() => new _FirstPage(); } class _FirstPage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"First Page\"), ), body: Center(child: Text('First')), floatingActionButton: FloatingActionButton( onPressed: () { if (Navigator.canPop(context)) { Navigator.popAndPushNamed(context, '/second'); } }, child: Text('Pop'), ), ); } } //////////////////////////////////////////////////////////////////////// class SecondPage extends StatefulWidget { @override _SecondPage createState() => new _SecondPage(); } class _SecondPage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Second Page\"), ), body: Center(child: Text('Second')), floatingActionButton: FloatingActionButton( onPressed: () { Navigator.push(context, MaterialPageRoute(builder: (_) { return Scaffold( appBar: AppBar( title: Text('MaterialPageRoute Demo'), ), body: Center( child: Text(\"MaterialPageRoute Demo\"), ), ); })); }, child: Text('Push'), ), ); } } //////////////////////////////////////////////////////////////////////// class ThirdPage extends StatefulWidget { @override _ThirdPage createState() => new _ThirdPage(); } class _ThirdPage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Third Page\"), ), body: Center(child: Text('Third')), ); } } "},"widget/basic/ThemeData.html":{"url":"widget/basic/ThemeData.html","title":"ThemeData(主题色)","keywords":"","body":"1. 构造函数ThemeData Class 1. 构造函数 ThemeData({ Color secondaryHeaderColor, 有选定行时PaginatedDataTable标题的颜色。 Color textSelectionColor, 文本字段中选中文本的颜色，例如TextField。 Color cursorColor, 输入框光标颜色。 Color textSelectionHandleColor, 用于调整当前文本的哪个部分的句柄颜色。 Color backgroundColor,// 与primaryColor对比的颜色(例如 用作进度条的剩余部分)。 Color dialogBackgroundColor, Dialog元素的背景色。 Color indicatorColor, TabBar中选项选中的指示器颜色。 Color hintColor, 用于提示文本或占位符文本的颜色，例如在TextField中。 Color errorColor, 用于输入验证错误的颜色，例如在TextField中。 Color toggleableActiveColor, 用于突出显示切换Widget（如Switch，Radio和Checkbox）的活动状态的颜色。 Color primaryColor, App主要部分的背景色（ToolBar,TabBar等）。 Color primaryColorLight, primaryColor的高亮版本。 Color primaryColorDark, primaryColor的较暗版本。 Color accentColor, // 前景色（文本、按钮等） Color canvasColor,// MaterialType.canvas Material的默认颜色。 Color scaffoldBackgroundColor, 作为Scaffold基础的Material默认颜色，典型Material应用或应用内页面的背景颜色。 Color bottomAppBarColor, // BottomAppBar的默认颜色 Color cardColor, Material被用作Card时的颜色。 Color dividerColor, Dividers和PopupMenuDividers的颜色，也用于ListTiles中间，和DataTables的每行中间. Color focusColor, 焦点获取时的颜色，例如，一些按钮焦点、输入框焦点。 Color hoverColor, 点击之后徘徊中的颜色，例如，按钮长按，按住之后的颜色。 Color highlightColor, 用于类似墨水喷溅动画或指示菜单被选中的高亮颜色。 Color splashColor, 墨水喷溅的颜色。 Color selectedRowColor, 选中行时的高亮颜色。 Color unselectedWidgetColor, 用于Widget处于非活动（但已启用）状态的颜色。 例如，未选中的复选框。 通常与accentColor形成对比。 Color disabledColor, 用于Widget无效的颜色，无论任何状态。例如禁用复选框。 Color buttonColor, Material中RaisedButtons使用的默认填充色。 TextTheme textTheme, // 字体主题，包括标题、body等文字样式 TextTheme primaryTextTheme, TextTheme accentTextTheme, InputDecorationTheme inputDecorationTheme, TabBarTheme tabBarTheme, CardTheme cardTheme, PageTransitionsTheme pageTransitionsTheme, AppBarTheme appBarTheme, BottomAppBarTheme bottomAppBarTheme, DialogTheme dialogTheme, ButtonThemeData buttonTheme, //按钮主题 ToggleButtonsThemeData toggleButtonsTheme, IconThemeData iconTheme, // Icon的默认样式 IconThemeData primaryIconTheme, IconThemeData accentIconTheme, SliderThemeData sliderTheme, TooltipThemeData tooltipTheme, ChipThemeData chipTheme, FloatingActionButtonThemeData floatingActionButtonTheme, NavigationRailThemeData navigationRailTheme, CupertinoThemeData cupertinoOverrideTheme, SnackBarThemeData snackBarTheme, BottomSheetThemeData bottomSheetTheme, PopupMenuThemeData popupMenuTheme, MaterialBannerThemeData bannerTheme, DividerThemeData dividerTheme, ButtonBarThemeData buttonBarTheme, BottomNavigationBarThemeData bottomNavigationBarTheme, TimePickerThemeData timePickerTheme, Brightness brightness, Brightness类型，应用程序整体主题的亮度。 由按钮等Widget使用，以确定在不使用主色或强调色时要选择的颜色。 VisualDensity visualDensity, MaterialColor primarySwatch, Brightness primaryColorBrightness,// 主题主色的深浅色 Brightness accentColorBrightness, Brightness类型，accentColor的亮度。 用于确定放置在突出颜色顶部的文本和图标的颜色（例如FloatingButton上的图标）。 InteractiveInkFeatureFactory splashFactory, InteractiveInkFeatureFactory类型，定义InkWall和InkResponse生成的墨水喷溅的外观。 String fontFamily,//文字字体 TargetPlatform platform, //指定平台，应用特定平台控件风格 MaterialTapTargetSize materialTapTargetSize, Chip等组件的尺寸主题设置，如：设置为MaterialTapTargetSize.shrinkWrap时，clip距顶部距离为0；设置为MaterialTapTargetSize.padded时距顶部有一个距离 bool applyElevationOverlayColor, 是否应用elevation覆盖颜色。 ColorScheme colorScheme, scheme组颜色，一组13种颜色，可用于配置大多数组件的颜色属性。 Typography typography, 用于配置TextTheme、primaryTextTheme和accentTextTheme的颜色和几何文本主题值。 bool fixTextFieldOutlineLabel }) Theme( data: ThemeData(primaryColor: Colors.amber), child: Builder( builder: (BuildContext context) { return Container( width: 100, height: 100, color: Theme.of(context).primaryColor, // 获取到上下文中的主题数据 ); }, ), ) MaterialApp( // 这里设置了全局主题数据 theme: ThemeData( primaryColor: Colors.blue, // 全局主题色 accentColor: Colors.green, // 全局强调色 textTheme: TextTheme(bodyText2: TextStyle(color: Colors.purple)), // 全局字体色 ), home: Scaffold( appBar: AppBar( title: const Text('ThemeData Demo'), ), floatingActionButton: FloatingActionButton( child: const Icon(Icons.add), onPressed: () {}, ), body: Center( child: Text( 'Button pressed 0 times', ), ), ), ) "},"widget/basic/MediaQuery.html":{"url":"widget/basic/MediaQuery.html","title":"MediaQuery(屏幕适配)","keywords":"","body":"1. MediaQuery1.1. 构造函数1.2. 静态方法2. MediaQueryData2.1. 构造函数2.2. 属性1. MediaQuery MediaQuery Class 1.1. 构造函数 MediaQuery({ Key key, @required MediaQueryData data, @required Widget child }) MediaQuery.removePadding({ Key key, @required BuildContext context, bool removeLeft: false, bool removeTop: false, bool removeRight: false, bool removeBottom: false, @required Widget child }) MediaQuery.removeViewInsets({ Key key, @required BuildContext context, bool removeLeft: false, bool removeTop: false, bool removeRight: false, bool removeBottom: false, @required Widget child }) MediaQuery.removeViewPadding({ Key key, @required BuildContext context, bool removeLeft: false, bool removeTop: false, bool removeRight: false, bool removeBottom: false, @required Widget child }) [danger] 使用MediaQuery必须要MaterialApp 或者WidgetsApp 去包裹我们的Widget，这样才能够提供正常使用它，否则会出现错误 1.2. 静态方法 bool boldTextOverride(BuildContext context); MediaQueryData of(BuildContext context, {bool nullOk: false}); Brightness platformBrightnessOf(BuildContext context); double textScaleFactorOf(BuildContext context); 2. MediaQueryData 2.1. 构造函数 MediaQueryData({ Size size: Size.zero, double devicePixelRatio: 1.0, double textScaleFactor: 1.0, Brightness platformBrightness: Brightness.light, EdgeInsets padding: EdgeInsets.zero, EdgeInsets viewInsets: EdgeInsets.zero, EdgeInsets systemGestureInsets: EdgeInsets.zero, EdgeInsets viewPadding: EdgeInsets.zero, bool alwaysUse24HourFormat: false, bool accessibleNavigation: false, bool invertColors: false, bool highContrast: false, bool disableAnimations: false, bool boldText: false, NavigationMode navigationMode: NavigationMode.traditional }) MediaQueryData.fromWindow(Window window) 2.2. 属性 bool accessibleNavigation; bool alwaysUse24HourFormat; bool boldText; double devicePixelRatio; bool disableAnimations; int hashCode; bool highContrast; bool invertColors; NavigationMode navigationMode; Orientation orientation; EdgeInsets padding; Brightness platformBrightness; Type runtimeType; Size size; //返回context所在的窗口Size EdgeInsets systemGestureInsets; double textScaleFactor; EdgeInsets viewInsets; EdgeInsets viewPadding; "},"widget/basic/Colors.html":{"url":"widget/basic/Colors.html","title":"Colors","keywords":"","body":""},"widget/basic/InteractiveViewer.html":{"url":"widget/basic/InteractiveViewer.html","title":"InteractiveViewer","keywords":"","body":"1. 构造函数2. 资料InteractiveViewer Class 构建常见交互，如平移、缩放和拖放，甚至在可调节大小的窗口中也可实现这些交互。 1. 构造函数 InteractiveViewer({ Key key, bool alignPanAxis: false, EdgeInsets boundaryMargin: EdgeInsets.zero, bool constrained: true, double maxScale: 2.5, double minScale: 0.8, GestureScaleEndCallback onInteractionEnd, GestureScaleStartCallback onInteractionStart, GestureScaleUpdateCallback onInteractionUpdate, bool panEnabled: true, bool scaleEnabled: true, TransformationController transformationController, @required Widget child }) TransformationController( [Matrix4 value] ) 2. 资料 五子棋示例 知晓拖放操作的位置 "},"widget/basic/Scaffold.html":{"url":"widget/basic/Scaffold.html","title":"Scaffold(脚手架)","keywords":"","body":"1. 构造函数Scaffold Class 1. 构造函数 const Scaffold({ Key key, PreferredSizeWidget appBar, // 显示在界面顶部的一个AppBar Widget body, // 当前界面所显示的主要内容 Widget floatingActionButton, // Material Design中定义的一个功能按钮 FloatingActionButtonLocation floatingActionButtonLocation, FloatingActionButtonAnimator floatingActionButtonAnimator, List persistentFooterButtons, // 固定在下方显示的按钮 Widget drawer, // 侧边栏组件 Widget endDrawer, Widget bottomNavigationBar, // 显示在底部的导航栏按钮栏 Widget bottomSheet, Color backgroundColor, // 背景颜色 bool resizeToAvoidBottomPadding, // 控制界面内容`body`是否重新布局来避免底部被覆盖,比如当键盘显示时,重新布局避免被键盘盖住内容。默认值为`true` bool resizeToAvoidBottomInset, bool primary: true, DragStartBehavior drawerDragStartBehavior: DragStartBehavior.start, bool extendBody: false, bool extendBodyBehindAppBar: false, Color drawerScrimColor, double drawerEdgeDragWidth, bool drawerEnableOpenDragGesture: true, bool endDrawerEnableOpenDragGesture: true }) 示例代码：codePen import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"MaterialApp Demo\", theme: ThemeData(primaryColor: Color(0xFF37966F)), color: Colors.orange, home: HomePage(), ); } } //////////////////////////////////////////////////////////////////////// class HomePage extends StatefulWidget { @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { @override Widget build(BuildContext context) { return Scaffold( // 头部元素 appBar: AppBar(title: Text(\"Home Page\")), // 视图部份 body: Center(child: Text('Home')), // 抽屉 drawer: Drawer(), bottomNavigationBar: BottomAppBar( shape: const CircularNotchedRectangle(), color: Color(0xFF37966F), child: Container( height: 50.0, ), ), floatingActionButton: FloatingActionButton( onPressed: () {}, backgroundColor: Color(0xFF37966F), child: Icon(Icons.add), ), floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked, ); } } 关于Scaffold.of() called with a context that does not contain a Scaffold.的报错解决方案 "},"widget/basic/Drawer.html":{"url":"widget/basic/Drawer.html","title":"Drawer(抽屉)","keywords":"","body":"1. Drawer(抽屉组件)1. Drawer(抽屉组件) Drawer 属性 类型 默认值 说明 child Widget 可显示对象 elevation double 16 组件的z坐标顺序 DrawerHeader : 头部效果，展示基本信息。 UserAccountsDrawerHeader : 头部效果，展示用户头像、用户名、Email等信息。 DrawerHeader 属性 类型 说明 decoration Decoration curve Curve child Widget padding EdgeInsetsGeometry margin EdgeInsetsGeometry UserAccountsDrawerHeader 属性 类型 说明 margin EdgeInsetsGeometry decoration Decoration CurrentAccountPicture Widget OtherAccountsPictures List accountName Widget accountEmail Widget onDetailsPressed VoidCallback import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), drawer: new Drawer( child: ListView( children: [ UserAccountsDrawerHeader( accountName: new Text('accountName'), accountEmail: new Text('accountEmail'), currentAccountPicture: new CircleAvatar( backgroundImage: new AssetImage('icons/1.png'), ), otherAccountsPictures: [ new Container( child: Image.asset('icons/code.png'), ) ], onDetailsPressed: () {}, ), ListTile( leading: new CircleAvatar( child: Icon(Icons.color_lens), ), title: Text('个性装扮'), ), ListTile( leading: new CircleAvatar( child: Icon(Icons.photo), ), title: Text('我的相册'), ), ListTile( leading: new CircleAvatar( child: Icon(Icons.wifi), ), title: Text('免流量权限'), ), ], ), )), ); } } "},"widget/basic/ExpansionPanel.html":{"url":"widget/basic/ExpansionPanel.html","title":"ExpansionPanel","keywords":"","body":"1. ExpansionPanel1.1. ExpansionPanelList1.2. ExpansionPanelList.radio1. ExpansionPanel class ExpansionPanel{} class ExpansionPanelList extends StatefulWidget{ const ExpansionPanelList({ Key key, this.children = const [], this.expansionCallback, this.animationDuration = kThemeAnimationDuration, this.expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, }); } class ExpansionPanelRadio extends ExpansionPanel{} 1.1. ExpansionPanelList 示例 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp(title: \"Demo\", home: HomePage()); } } // 数据模型 class Item { Item({this.expandedValue, this.headerValue, this.isExpanded = false}); String expandedValue; String headerValue; bool isExpanded; } List generateItems(int length) { return List.generate( length, (index) => Item( headerValue: 'Panel $index', expandedValue: 'This is item number $index'), ); } class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { List list = generateItems(8); Widget _buildPanel() { return ExpansionPanelList( children: list.map((Item item) { return ExpansionPanel( headerBuilder: (BuildContext context, bool isExpanded) { return ListTile(title: Text(item.headerValue)); }, body: ListTile( title: Text(item.expandedValue), subtitle: Text('To delete this panel, tap the trash can icon'), trailing: Icon(Icons.delete), onTap: () {}, ), isExpanded: item.isExpanded, ); }).toList(), expansionCallback: (int index, bool isExpanded) { setState(() { list[index].isExpanded = !isExpanded; }); }, ); } @override Widget build(BuildContext context) { return Scaffold( body: SingleChildScrollView( child: Container( child: _buildPanel(), ), ), ); } } 1.2. ExpansionPanelList.radio CodePen-ExpansionPanelList.radio import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp(title: \"Demo\", home: HomePage()); } } // 数据模型 class Item { Item({this.expandedValue, this.headerValue, this.id}); String expandedValue; String headerValue; int id; } List generateItems(int length) { return List.generate( length, (index) => Item( id: index, headerValue: 'Panel $index', expandedValue: 'This is item number $index'), ); } class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { List list = generateItems(8); Widget _buildPanel() { return ExpansionPanelList.radio( initialOpenPanelValue: 2, children: list.map((Item item) { return ExpansionPanelRadio( headerBuilder: (BuildContext context, bool isExpanded) { return ListTile(title: Text(item.headerValue)); }, body: ListTile( title: Text(item.expandedValue), subtitle: Text('To delete this panel, tap the trash can icon'), trailing: Icon(Icons.delete), onTap: () {}, ), value: item.id, ); }).toList(), ); } @override Widget build(BuildContext context) { return Scaffold( body: SingleChildScrollView( child: Container( child: _buildPanel(), ), ), ); } } "},"widget/basic/Card.html":{"url":"widget/basic/Card.html","title":"Card(卡片组件)","keywords":"","body":"1. 构造函数2. Card(卡片组件)Card Class 1. 构造函数 const Card({ Key key, Color color, Color shadowColor, double elevation, ShapeBorder shape, bool borderOnForeground: true, EdgeInsetsGeometry margin, Clip clipBehavior, Widget child, bool semanticContainer: true }) 2. Card(卡片组件) Card(卡片组件)内容可以由大多数类型的Widget构成，但通常与ListTitle搭配使用。Card有一个child属性，可以支持多个child的列、行、列表、网格或者其他小部件。默认情况下Card将其大小缩放为0像素。你可以使用SizeBox组件来限制Card的大小。 属性 类型 说明 child Widget margin shape ShapeBorder import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { var card = new SizedBox( height: 250.0, child: new Card( child: new Column( children: [ new ListTile( title: Text('data1'), subtitle: Text('2020动画《真人快打传奇：蝎子的复仇》1080p.HD中英双字[04-14]2019动画《红鞋子和七个小矮人》1080p.HD中英双字'), leading: Icon(Icons.home), ), new Divider(), new ListTile( title: Text('data2'), subtitle: Text('2020动画《真人快打传奇：蝎子的复仇》1080p.HD中英双字[04-14]2019动画《红鞋子和七个小矮人》1080p.HD中英双字'), leading: Icon(Icons.school), ), ], ), ), ); return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Title'), ), body: new Center( child: card, ), ), ); } } "},"widget/basic/FocusNode.html":{"url":"widget/basic/FocusNode.html","title":"FocusNode(焦点)","keywords":"","body":"1. 方法FocusNode Class 1. 方法 // 失去焦点。 void unfocus(); // 请求当前节点的焦点 void requestFocus(); "},"widget/basic/PhysicalModel.html":{"url":"widget/basic/PhysicalModel.html","title":"PhysicalModel","keywords":"","body":"1. 构造函数2. 示例PhysicalModel Class 1. 构造函数 PhysicalModel({ Key key, BoxShape shape: BoxShape.rectangle, Clip clipBehavior: Clip.none, BorderRadius borderRadius, double elevation: 0.0, @required Color color, Color shadowColor: const Color(0xFF000000), Widget child }) 2. 示例 Widget build(BuildContext context) { return PhysicalModel( color: Colors.transparent, borderRadius: BorderRadius.circular(6), clipBehavior: Clip.antiAlias, child: Column( children: _gridNaviItems(context), ), ); } "},"widget/basic/AppBar.html":{"url":"widget/basic/AppBar.html","title":"AppBar(导航栏)","keywords":"","body":"1. 构造函数 AppBar Class AppBar Design 1. 构造函数 AppBar({ Key key, // Widget leading, // 在标题前显示的一个组件，在首页通常显示为应用的logo，在其他页面通常显示为返回按钮 bool automaticallyImplyLeading: true, // Widget title, // 标题 List actions, // 一个`Widget`列表。代表Toolbar中所展示的菜单。对于常用的菜单，通常使用`IconButton`来表示，对于不常用的菜单使用`PopupMenuButton`来显示为三个点，点击后弹出二级菜单 Widget flexibleSpace, // 一个显示在`AppBar`下方的组件，高度和`AppBar`高度一样，可以实现一些特殊效果，通常在`SliverAppBar`中使用 PreferredSizeWidget bottom, // 通常是`TabBar`。用来在ToolBar标题下展示菜单 double elevation, // z坐标顺序，对于可滚动的`SliverAppBar`，当`SliverAppBar`和内容同级的时候，改值为0，当内容滚动`SliverAppBar`变为`ToolBar`的时候，修改elevation的值 ShapeBorder shape, // Color backgroundColor, // 背景色 Brightness brightness, // `AppBar`的亮度，有白色、黑色两种主题 IconThemeData iconTheme, // `AppBar`上图标的颜色、透明度、尺寸信息 IconThemeData actionsIconTheme, // TextTheme textTheme, // `AppBar`上文字样式 bool primary: true, // bool centerTitle, // 标题是否居中显示 bool excludeHeaderSemantics: false, // double titleSpacing: NavigationToolbar.kMiddleSpacing, // double toolbarOpacity: 1.0, // double bottomOpacity: 1.0 // )} 应用按钮组件有AppBar、SliverAppBar，都是继承子StatefulWidget类。区别在于AppBar固定在顶部，SliverAppBar可以跟着内容进行滚动。 SliverAppBar属性 默认值 类型 leading Widget automaticallyImplyLeading true bool title Widget actions List flexibleSpace Widget bottom PreferredSizeWidget elevation double forceElevated false bool backgroundColor Color brightness Brightness iconTheme IconThemeData actionsIconTheme IconThemeData textTheme TextTheme primary true bool centerTitle bool excludeHeaderSemantics false bool titleSpacing NavigationToolbar.kMiddleSpacing double expandedHeight double floating false bool pinned false bool snap false bool stretch false bool stretchTriggerOffset 100.0 double onStretchTrigger AsyncCallback shape ShapeBorder AppBar、SliverAppBar 代码示例 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"MaterialApp Demo\", theme: ThemeData(primaryColor: Color(0xFF37966F)), color: Colors.orange, home: FirstPage(), routes: { \"/first\": (_) => FirstPage(), \"/second\": (_) => SecondPage(), }, ); } } //////////////////////////////////////////////////////////////////////// class FirstPage extends StatefulWidget { FirstPage({Key key}) : super(key: key); @override _FirstPage createState() => new _FirstPage(); } class _FirstPage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"First Page\"), leading: Icon(Icons.ac_unit), actions: [ IconButton(icon: Icon(Icons.add), onPressed: null), IconButton(icon: Icon(Icons.search), onPressed: null) ], centerTitle: true, ), floatingActionButton: FloatingActionButton( onPressed: () { Navigator.pushNamed(context, '/second'); }, child: Text('Push'), backgroundColor: Theme.of(context).primaryColor, ), ); } } //////////////////////////////////////////////////////////////////////// class SecondPage extends StatefulWidget { SecondPage({Key key}) : super(key: key); @override _SecondPage createState() => new _SecondPage(); } class _SecondPage extends State { @override Widget build(BuildContext context) { return Scaffold( body: CustomScrollView( slivers: [ const SliverAppBar( pinned: true, expandedHeight: 200.0, flexibleSpace: FlexibleSpaceBar( title: Text('SliverAppBar Demo'), ), ), SliverFixedExtentList( itemExtent: 50.0, delegate: SliverChildBuilderDelegate( (BuildContext context, int index) { return Container( alignment: Alignment.center, color: Colors.lightBlue[100 * (index % 9)], child: Text('List Item $index'), ); }, ), ), ], ), ); } } "},"widget/routes/":{"url":"widget/routes/","title":"路由管理","keywords":"","body":"1. 基础用法1.1. 给路由传参数2. 动态路由3. 未知路由兼容4. 导航不使用BuildContext5. 不定义路由直接跳转Flutter关于Route的系统库文件： MaterialPageRoute ModalRoute OverlayRoute PageRoute PageRouteBuilder PopupRoute Route RouteAware RouteObserver RouteSettings RouteTransitionRecord TransitionRoute LocalHistoryRoute MaterialRouteTransitionMixin RoutePopDisposition InitialRouteListFactory PageRouteFactory RouteBuilder RouteFactory RouteListFactory RoutePageBuilder RoutePredicate RouteTransitionsBuilder 1. 基础用法 const MaterialApp({ Map routes: const {}, String initialRoute, }) 示例： class _TutorialAppState extends State { @override Widget build(BuildContext context) { return MaterialApp( routes: _routesManager(), ); } Map _routesManager() { return { \"/\": (_) => TutorialPage1(), \"/page2\": (_) => TutorialPage2(), \"/page3\": (_) => TutorialPage3(), }; } } [warning] 使用注意 MaterialApp.routes中的路由\"/\"和MaterialApp.home不能同时使用，根页面只能选择一种实现方案。 1.1. 给路由传参数 // 注册路由 routes:{ \"new_page\":(context)=>EchoRoute(), }, // 通过RouteSetting对象获取路由参数 class EchoRoute extends StatelessWidget { @override Widget build(BuildContext context) { //获取路由参数 var args=ModalRoute.of(context).settings.arguments } } // Navigator 跳转路由 Navigator.of(context).pushNamed(\"new_page\", arguments: \"hi\"); 2. 动态路由 MaterialApp中可以通过onGenerateRoute来实现动态路由的功能。 const MaterialApp({ Map routes: const {}, String initialRoute, RouteFactory onGenerateRoute, // 动态路由 InitialRouteListFactory onGenerateInitialRoutes, RouteFactory onUnknownRoute, }) Route RouteFactory ( RouteSettings settings ) RouteSettings({ String name, // 路由的名字，(e.g., \"/settings\") Object arguments // 路由的传参 }) 示例: class _TutorialAppState extends State { @override Widget build(BuildContext context) { return MaterialApp( home: TutorialPage1(), onGenerateRoute: generateRoute, ); } Route generateRoute(RouteSettings routeSettings) { switch (routeSettings.name) { case '/page2': return MaterialPageRoute( builder: (_) => TutorialPage2(inputParams: routeSettings.arguments)); case '/page3': return MaterialPageRoute(builder: (_) => TutorialPage3()); default: return MaterialPageRoute(builder: (_) => TutorialPage1()); } } } 如何实现page1->page2 Navigator.of(context).pushNamed('/page2',arguments: 'para'); 3. 未知路由兼容 const MaterialApp({ RouteFactory onUnknownRoute, // 设置未发现的路由 }) 示例： class _TutorialAppState extends State { @override Widget build(BuildContext context) { return MaterialApp( onGenerateRoute: generateRoute, onUnknownRoute: (routeSettings) => MaterialPageRoute(builder: (_) => TutorialNotFoundPage()), ); } } 4. 导航不使用BuildContext 在使用Navigator的时候需要传入context上下文参数，实现不需要传context直接导航的功能。 class NavigatorService { // 定义单例 static final NavigatorService _instance = NavigatorService._internal(); NavigatorService._internal(); factory NavigatorService() { return _instance; } final GlobalKey navigatorKey = GlobalKey(); Future pushTo(String routeName) { return navigatorKey.currentState.pushNamed(routeName, arguments: 'A'); } void pop() { if (navigatorKey.currentState.canPop()) { navigatorKey.currentState.pop(); } } } 获取APP中的全局Key。 class _TutorialAppState extends State { @override Widget build(BuildContext context) { return MaterialApp( home: TutorialPage1(), onGenerateRoute: generateRoute, navigatorKey: NavigatorService().navigatorKey, ); } Route generateRoute(RouteSettings routeSettings) { switch (routeSettings.name) { case '/page2': return MaterialPageRoute(builder: (_) => TutorialPage2(inputParams: routeSettings.arguments)); case '/page3': return MaterialPageRoute(builder: (_) => TutorialPage3()); default: return MaterialPageRoute(builder: (_) => TutorialPage1()); } } } 在具体的页面上进行页面push,因为这种方法不需要BuildContext，可以直接在Model层进行调用；基本实现了V-M分离。 NavigatorService().pushTo('/page2'); 5. 不定义路由直接跳转 class NavigatorUtil { static push(BuildContext context, Widget widget) async { final result = await Navigator.push( context, MaterialPageRoute(builder: (_) => widget)); return result; } } "},"widget/routes/Navigator.html":{"url":"widget/routes/Navigator.html","title":"Navigator(顶部导航)","keywords":"","body":"1. 构造方法2. 方法、属性3. 使用3.1. 不定义路由直接跳转到新的Route4. 资料1. 构造方法 const Navigator({ Key key, List pages: const >[], PopPageCallback onPopPage, String initialRoute, RouteListFactory onGenerateInitialRoutes: Navigator.defaultGenerateInitialRoutes, RouteFactory onGenerateRoute, RouteFactory onUnknownRoute, TransitionDelegate transitionDelegate: const DefaultTransitionDelegate(), List observers: const [] }) 2. 方法、属性 方法名 含义 canPop 导航器是否可以弹出。 pop 弹出路由 popAndPushNamed 将当前路线从导航器中弹出，并在其中推入已命名的路由位置 popUntil 一直弹出直到指定路由 push 直接路由入栈 pushAndRemoveUntil 将具有给定名称的路由推入导航器，然后删除所有 pushNamed 按路由名字路由入栈 pushNamedAndRemoveUntil 按路由名称将具有给定名称的路由推入导航器，然后删除所有 pushReplacement 替换当前路由栈 pushReplacementNamed 按路由名字替换当前路由栈 defaultGenerateInitialRoutes maybePop 导航器是否可以弹出，可以的话弹出 of removeRoute 删除指定路由 removeRouteBelow 立即从导航器中删除一条路由，然后[Route.dispose]的要替换的路线是给定的“ anchorRoute”下方的路线。 replace 用新路由替换导航器上的路由 replaceRouteBelow 用新路由替换导航器上的路由。 路由是替换为给定anchorRoute下面的那个 Navigator.push()方式的使用： 3. 使用 3.1. 不定义路由直接跳转到新的Route Navigator.push( context, MaterialPageRoute( builder: (_) { return Scaffold( appBar: AppBar(title: Text(\"Demo\")), body: FlatButton( onPressed: () { Navigator.pop(context); }, child: Text(\"POP\")), ); }, ), ); 4. 资料 flutter.dev-Navigator Class Navigator operation requested with a context that does not include a Navigator "},"widget/routes/NavigationRail.html":{"url":"widget/routes/NavigationRail.html","title":"NavigationRail","keywords":"","body":"1. 构造函数2. 示例 Material Design NavigationRail class 1. 构造函数 const NavigationRail({ Color backgroundColor, bool extended: false, Widget leading, Widget trailing, @required List destinations, @required int selectedIndex, ValueChanged onDestinationSelected, double elevation, double groupAlignment, NavigationRailLabelType labelType, TextStyle unselectedLabelTextStyle, TextStyle selectedLabelTextStyle, IconThemeData unselectedIconTheme, IconThemeData selectedIconTheme, double minWidth, double minExtendedWidth }); enum NavigationRailLabelType { none, // 仅仅展示 destinations selected, // 展示选中 destinations 的 label all, // 所有的 destinations 都显示其 label } 2. 示例 NavigationRailExample.dart import 'package:flutter/cupertino.dart'; import 'package:flutter/material.dart'; class NavigationRailExample extends StatefulWidget { final String title; const NavigationRailExample({Key key, this.title}) : super(key: key); @override _NavigationRailExampleState createState() => _NavigationRailExampleState(); } class _NavigationRailExampleState extends State { int _selectedIndex = 0; @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(widget.title), ), body: Row( children: [ NavigationRail( labelType: NavigationRailLabelType.selected, leading: FlatButton(onPressed: () {}, child: Text(\"Leading\")), trailing: FlatButton(onPressed: () {}, child: Text(\"Trailing\")), destinations: [ NavigationRailDestination( icon: Icon(Icons.favorite_border), selectedIcon: Icon(Icons.favorite), label: Text('first'), ), NavigationRailDestination( icon: Icon(Icons.bookmark_border), selectedIcon: Icon(Icons.book), label: Text('Second'), ), NavigationRailDestination( icon: Icon(Icons.star_border), selectedIcon: Icon(Icons.star), label: Text('Third'), ) ], selectedIndex: _selectedIndex, onDestinationSelected: (int index) { setState(() { _selectedIndex = index; }); }, ), VerticalDivider(thickness: 1, width: 1), Expanded( child: Center( child: Text('selectedIndex: $_selectedIndex'), )) ], ), ); } } "},"widget/routes/NavigationRailDestination.html":{"url":"widget/routes/NavigationRailDestination.html","title":"NavigationRailDestination","keywords":"","body":"1. 构造函数 NavigationRailDestination Class 1. 构造函数 const NavigationRailDestination({ @required Widget icon, Widget selectedIcon, Widget label }) "},"widget/navigation/":{"url":"widget/navigation/","title":"导航","keywords":"","body":"1. 导航监控 BottomNavigationBar BottomNavigationBarItem BottomNavigationBarTheme BottomNavigationBarThemeData NavigationRail NavigationRailDestination NavigationRailTheme NavigationRailThemeData NavigationToolbar Navigator NavigatorObserver NavigatorState 1. 导航监控 可以通过MaterialApp.navigatorObservers来监听用户操作导航的过程。 class LocalNavigatorObserver implements NavigatorObserver { @override void didPop(Object route, Route previousRoute) {} @override void didPush(Route route, Route previousRoute) {} @override void didRemove(Route route, Route previousRoute) {} @override void didReplace({Route newRoute, Route oldRoute}) {} @override void didStartUserGesture(Route route, Route previousRoute) {} @override void didStopUserGesture() {} @override NavigatorState get navigator => throw UnimplementedError(); } class _TutorialAppState extends State { @override Widget build(BuildContext context) { return MaterialApp( navigatorObservers: [ LocalNavigatorObserver(), ], ); } } "},"widget/navigation/PreferredSizeWidget.html":{"url":"widget/navigation/PreferredSizeWidget.html","title":"PreferredSizeWidget","keywords":"","body":"PreferredSizeWidget-class PreferredSizeWidget 是一个接口，可以返回一个具有size的widget。它的子类有： AppBar CupertinoTabBar ObstructingPreferredSizeWidget PreferredSize TabBar "},"widget/navigation/BottomNavigationBar.html":{"url":"widget/navigation/BottomNavigationBar.html","title":"BottomNavigationBar(底部导航栏)","keywords":"","body":"1. 属性、方法2. 资料1. 属性、方法 属性 类型 说明 currentIndex int 当前索引 fixedColor iconColor items List 底部导航栏按钮集合 onTap ValueChanged 按下其中某个按钮的回调事件。需要根据返回的索引设置当前索引 type控制项目的显示方式，如果没有指定，那么它会自动设置为BottomNavigationBarType.fixed. BottomNavigationBarType.fixed : 当Items少于4个时，则会通过selectedItemColor显示选中Item的颜色，如果selectedItemColor为null，则使用ThemeData.primaryColor。如果backgroundColor为null，则使用ThemeData.canvasColor（本质上是不透明的白色）。 BottomNavigationBarType.shifting : 当Items大于等于4个时， 如果selectedItemColor为null，则所有项目均以白色呈现。背景颜色与所选项目的BottomNavigationBarItem.backgroundColor相同 。 代码示例1 代码示例2,切换body为Scaffold 2. 资料 flutter.dev-BottomNavigationBar Class "},"widget/navigation/WillPopScope.html":{"url":"widget/navigation/WillPopScope.html","title":"WillPopScope(导航返回拦截)","keywords":"","body":"1. 构造函数2. 示例WillPopScope Class 以下几种情况我们会用到WillPopScope： 需要询问用户是否退出。(为了避免用户误触返回按钮而导致APP退出，在很多APP中都拦截了用户点击返回键的按钮，然后进行一些防误触判断，比如当用户在某一个时间段内点击两次时，才会认为用户是要退出（而非误触）。) App中有多个Navigator，想要的是让其中一个Navigator 退出，而不是直接让在Widget tree 底层的Navigator退出。 1. 构造函数 const WillPopScope({ Key key, @required Widget child, @required WillPopCallback onWillPop }) 2. 示例 import 'package:flutter/material.dart'; class WillPopScopeExample extends StatefulWidget { @override _WillPopScopeExampleState createState() => _WillPopScopeExampleState(); } class _WillPopScopeExampleState extends State { DateTime _dateTime; @override Widget build(BuildContext context) { return WillPopScope( onWillPop: () async { if (_dateTime == null || DateTime.now().difference(_dateTime) > Duration(seconds: 1)) { _dateTime = DateTime.now(); return false; } return true; }, child: Container( child: Text('1秒内连续点击两次返回键则退出APP'), alignment: Alignment.center, ), ); } } "},"widget/navigation/AutomaticKeepAliveClientMixin.html":{"url":"widget/navigation/AutomaticKeepAliveClientMixin.html","title":"AutomaticKeepAliveClientMixin(保持页面激活)","keywords":"","body":"1. 示例 AutomaticKeepAliveClientMixin AutomaticKeepAlive Class KeepAliveNotification Class 当通过设置wantKeepAlive属性为true，则当前页面回保持激活状态。 const AutomaticKeepAlive({ Key key, Widget child }) const KeepAliveNotification( Listenable handle ) 1. 示例 class _HomePageState with AutomaticKeepAliveClientMixin{//要点1 @override bool get wantKeepAlive => true;//要点2 Widget build(BuildContext context){ super.build(context);//要点3 } } "},"widget/layout/":{"url":"widget/layout/","title":"布局","keywords":"","body":"Flutter几乎所有的东西都是Widgtes，包括布局都是Widgtes。 布局组件的child有两种形式: Single-child layout widgets -> Widget child Multi-child layout widgets -> List children = const [] Flutter 仓库地址 Flutter关于布局的示例 Flutter Gallery 应用 布局构造 Layout widgets "},"widget/layout/Stack.html":{"url":"widget/layout/Stack.html","title":"Stack(绝对定位)","keywords":"","body":"1. 构造函数2. 示例2.1. Positioned3. IndexedStack Stack Class 1. 构造函数 Stack({ Key key, AlignmentGeometry alignment: AlignmentDirectional.topStart, TextDirection textDirection, StackFit fit: StackFit.loose, Overflow overflow: Overflow.clip, List children: const [] }) enum StackFit { loose, expand, passthrough, } enum Overflow { visible, // 保留溢出 clip, // 删除溢出 } enum TextDirection { rtl, // 左 ltr, // 右 } 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { var stack = new Stack( alignment: Alignment.topLeft, children: [ new CircleAvatar( backgroundImage: new AssetImage('icons/code.png'), radius: 100.0, ), new Container( decoration: new BoxDecoration( color: Colors.blue, ), child: new Text( 'TestTes', style: new TextStyle( fontSize: 30.0, fontWeight: FontWeight.bold, color: Colors.white, ), ), ) ], ); return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar(title: Text('data'),), body: new Center( child: stack, ), ), ); } } 2.1. Positioned Positioned组件是用来定位的。Stack组件里需要包裹一个定位组件。 属性 类型 描述 top double 子元素相对顶部边界距离 bottom double 子元素相对底部边界距离 left double 子元素相对坐侧边界距离 right double 子元素相对右侧边界距离 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { var stack = new Stack( alignment: Alignment.topLeft, children: [ new CircleAvatar( backgroundImage: new AssetImage('icons/code.png'), radius: 100.0, ), new Positioned( bottom: 50.0, right: 50.0, child: new Text('data', style: new TextStyle( fontSize: 36.0, fontWeight: FontWeight.bold, color: Colors.red))), ], ); return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Center( child: stack, ), ), ); } } 3. IndexedStack IndexedStack Class IndexedStack继承了Stack，它的作用就是显示第index个child，其他的child不可见。所以IndexStack的尺寸永远是和最大的子节点尺寸一致的。 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { var stack = new IndexedStack( index: 1, alignment: Alignment.topLeft, children: [ new CircleAvatar( backgroundImage: new AssetImage('icons/code.png'), radius: 100.0, ), new Positioned( bottom: 50.0, right: 50.0, child: new Text('data', style: new TextStyle( fontSize: 36.0, fontWeight: FontWeight.bold, color: Colors.red))), ], ); return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Center( child: stack, ), ), ); } } "},"widget/layout/Align.html":{"url":"widget/layout/Align.html","title":"Align(绝对定位)","keywords":"","body":"1. 构造函数2. 示例 Align class：将子组件按照指定的方式对齐，并且根据子组件的大小调整自己的大小。 1. 构造函数 const Align({ Key key, AlignmentGeometry alignment: Alignment.center, double widthFactor, double heightFactor, Widget child }) Align需要再Stack中使用 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: PaddingDemo(), ); } } class PaddingDemo extends StatelessWidget { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: Text('Align Demo'), ), body: new Stack( children: [ // 左上角 new Align( alignment: new FractionalOffset(0.0, 0.0), child: new Image.asset('icons/code.png',width: 128.0,height: 128.0,), ), // 右上角 new Align( alignment: FractionalOffset(1.0, 0.0), child: new Image.asset('icons/code.png',width: 128.0,height: 128.0,), ), // 水平垂直居中 new Align( alignment: FractionalOffset.center, child: new Image.asset('icons/code.png',width: 128.0,height: 128.0,), ), // 左下角 new Align( alignment: FractionalOffset.bottomLeft, child: new Image.asset('icons/code.png',width: 128.0,height: 128.0,), ), // 右下角 new Align( alignment: FractionalOffset.bottomRight, child: new Image.asset('icons/code.png',width: 128.0,height: 128.0,), ), ], ), ); } } "},"widget/layout/Positioned.html":{"url":"widget/layout/Positioned.html","title":"Positioned(绝对定位)","keywords":"","body":"1. 构造函数2. 示例Positioned Class 1. 构造函数 const Positioned({ Key key, double left, double top, double right, double bottom, double width, double height, @required Widget child }) factory Positioned.directional({ Key key, @required TextDirection textDirection, double start, double top, double end, double bottom, double width, double height, @required Widget child }) const Positioned.fill({ Key key, double left: 0.0, double top: 0.0, double right: 0.0, double bottom: 0.0, @required Widget child }) const Positioned.fromRect({ Key key, Rect rect, @required Widget child }) const Positioned.fromRelativeRect({ Key key, RelativeRect rect, @required Widget child }) Positioned需要在Stack中使用。 2. 示例 class _PositionedExampleState extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"PositionedExample\"), ), body: Stack( children: [ Positioned( top: 50, child: Container( child: Text(\"red\"), color: Colors.red, padding: EdgeInsets.all(10.0), ), ), Positioned( top: 100, left: 100, child: Container( child: Text(\"green\"), color: Colors.green, padding: EdgeInsets.all(10.0), ), ), Positioned( top: 150, left: 150, child: Container( child: Text(\"blue\"), color: Colors.blue, padding: EdgeInsets.all(10.0), ), ) ], )); } } "},"widget/layout/Column.html":{"url":"widget/layout/Column.html","title":"Column(垂直)","keywords":"","body":"1. 构造函数1.1. MainAxisAlignment1.2. CrossAxisAlignment2. 示例 Column class 1. 构造函数 Column({ Key key, MainAxisAlignment mainAxisAlignment: MainAxisAlignment.start, // 主轴的排列方式 MainAxisSize mainAxisSize: MainAxisSize.max, // 主轴应该占据多少空间。取值max为最大，min为最小。 CrossAxisAlignment crossAxisAlignment: CrossAxisAlignment.center, // 交叉轴的排列方式 TextDirection textDirection, VerticalDirection verticalDirection: VerticalDirection.down, TextBaseline textBaseline, List children: const [] }); enum MainAxisAlignment { // 把 children 放置在尽可能靠近主轴起点的位置。 // 如果在水平(horizontal)方向上使用`MainAxisAlignment.start`,则需要使用`TextDirection`来确定起点是左侧还是右侧。 // 如果在垂直(vertical)方向上使用`MainAxisAlignment.start`,则需要使用`VerticalDirection`来确定起点是顶部还是底部。 start, end, // 把 children 放置在尽可能靠近主轴末端的位置。 center, // 把 children 放置在尽可能靠近主轴中心的位置。 spaceBetween, // 将主轴方向上的空白区域均分，使得children之间的空白区域相等，首尾child都靠近首尾，没有间隙。 spaceAround, // 将主轴方向上的空白区域均分，使得children之间的空白区域相等，但是首尾child的空白区域为1/2。 spaceEvenly, // 将主轴方向上的空白区域均分，使得children之间的空白区域相等，包括首尾child。 } enum MainAxisSize { min, max, } enum CrossAxisAlignment { start, // children在交叉轴上起点处展示。 end, // children在交叉轴上末尾展示。 center, // children在交叉轴上居中展示。 stretch, // 让children填满交叉轴方向。 baseline, // 在交叉轴方向，使得children的baseline对齐。 } enum TextDirection { rtl, // 左 ltr, // 右 } enum VerticalDirection { up, // 上 down, // 下 } enum TextBaseline { alphabetic, ideographic, } 1.1. MainAxisAlignment 1.2. CrossAxisAlignment 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: PaddingDemo(), ); } } class PaddingDemo extends StatelessWidget { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: Text('Align Demo'), ), body: new Column( crossAxisAlignment: CrossAxisAlignment.start,// 水平方向靠左对齐 mainAxisSize: MainAxisSize.min, //主轴方向最小化处理 children: [ new Text('度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询'), new Text('度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询'), new Text('度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询'), new Text('data1'), new Text('度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询'), new Text('度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询'), ], ), ); } } "},"widget/layout/Row.html":{"url":"widget/layout/Row.html","title":"Row(水平)","keywords":"","body":"1. 构造函数2. 示例2.1. 实现一个简单的分割线 Row class 1. 构造函数 Row({ Key key, MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, MainAxisSize mainAxisSize = MainAxisSize.max, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, TextDirection textDirection, VerticalDirection verticalDirection = VerticalDirection.down, TextBaseline textBaseline, List children = const [], }) [info] 构造函数中的参数含义 可以参数Column布局。 2. 示例 import 'package:flutter/material.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { var stars = Row( mainAxisSize: MainAxisSize.min, children: [ Icon(Icons.star, color: Colors.green[500]), Icon(Icons.star, color: Colors.green[500]), Icon(Icons.star, color: Colors.green[500]), Icon(Icons.star, color: Colors.black), Icon(Icons.star, color: Colors.black), ], ); final ratings = Container( color: Colors.blue, padding: EdgeInsets.all(20), child: Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, //空间均分 children: [ stars, Text( '170 Reviews', style: TextStyle( color: Colors.black, fontWeight: FontWeight.w800, fontFamily: 'Roboto', letterSpacing: 0.5, fontSize: 20, ), ), ], ), ); return MaterialApp( title: 'Flutter Demo', home: new Scaffold( appBar: AppBar( title: Text('FittedBox Demo'), ), body: Center( child: ratings, ), ), ); } } 2.1. 实现一个简单的分割线 Row( mainAxisAlignment: MainAxisAlignment.spaceAround, children: [ Expanded( child: Container( margin: EdgeInsets.only(left: 20), color: Color(0xffEAEAEA), height: 1, ), flex: 1, ), Expanded( child: Container( child: Center( child: Text( '其他登陆方式', style: TextStyle(fontSize: 12, color: Color(0xff999999)), ), ), ), flex: 1, ), Expanded( child: Container( margin: EdgeInsets.only(right: 20), color: Color(0xffEAEAEA), height: 1, ), flex: 1, ), ], ) "},"widget/layout/Wrap.html":{"url":"widget/layout/Wrap.html","title":"Wrap(自动换行)","keywords":"","body":"1. 构造函数2. 示例Wrap Class:按宽高自动换行布局 1. 构造函数 Wrap({ Key key, Axis direction: Axis.horizontal, // 主轴(mainAxis)的方向,默认为水平 WrapAlignment alignment: WrapAlignment.start, // 主轴方向上的对齐方式,默认为start double spacing: 0.0, // 主轴方向上的间距 WrapAlignment runAlignment: WrapAlignment.start, // run的对齐方式。run可以理解为新的行或者列,如果是水平方向布局的话,run可以理解为新的一行 double runSpacing: 0.0, // run的间距 WrapCrossAlignment crossAxisAlignment: WrapCrossAlignment.start, // 主轴(crossAxis)方向上的对齐方式 TextDirection textDirection, // 文本方向 VerticalDirection verticalDirection: VerticalDirection.down, // 定义了children摆放顺序,默认是down List children: const [] }) enum Axis { horizontal, vertical, } enum WrapAlignment { start, end, center, spaceBetween, spaceAround, spaceEvenly, } Wrap 使用了Flex中的一些概念，某种意义上和Row、Column更加相似。单行的Wrap和Row表现几乎一致，单列的Wrap和Column表现几乎一致。Wrap是在主轴上空间不足时，则向次轴上去扩展显示。 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: new Text('Demo'), ), body: Wrap( spacing: 8.0, //主轴间距 runSpacing: 4.0, // 行间距【默认水平排序】 children: [ Chip( label: new Text('data'), avatar: CircleAvatar( backgroundColor: Colors.lightGreen.shade800, child: new Text( 'data', style: new TextStyle(fontSize: 10.0), ), ), ), Chip( label: new Text('datadata'), avatar: CircleAvatar( backgroundColor: Colors.lightGreen.shade800, child: new Text( 'datadata', style: new TextStyle(fontSize: 10.0), ), ), ), Chip( label: new Text('datadatadatadata'), avatar: CircleAvatar( backgroundColor: Colors.lightGreen.shade800, child: new Text( 'datadatadatadata', style: new TextStyle(fontSize: 10.0), ), ), ), Chip( label: new Text('datadatadatadataadatadata'), avatar: CircleAvatar( backgroundColor: Colors.lightGreen.shade800, child: new Text( 'datadatadatadataadatadata', style: new TextStyle(fontSize: 10.0), ), ), ), ], ), ), ); } } "},"widget/layout/Padding.html":{"url":"widget/layout/Padding.html","title":"Padding(内边距)","keywords":"","body":"1. 构造函数2. 示例3. Padding、Margin4. 资料 Padding Class 1. 构造函数 const Padding({ Key key, @required EdgeInsetsGeometry padding, Widget child }) 2. 示例 addingExample.dart import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: PaddingDemo(), ); } } class PaddingDemo extends StatelessWidget { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: Text('Padding Demo'), ), body: new Center( child: new Container( width: 300.0, height: 300.0, // 容器的上下左右填充设置为60.0 padding: new EdgeInsets.all(30.0), decoration: new BoxDecoration( color: Colors.red, border: new Border.all( color: Colors.green, width: 8.0, ), ), child: new Container( color: Colors.white, ), ), ), ); } } 3. Padding、Margin Widget buildTile() { return Container( color: Colors.red, child: Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, //子组件的排列方式为主轴两端对齐 children: [ new InkWell( child: new Padding( padding: const EdgeInsets.all(12.0), child: Image.asset( Constant.ASSETS_IMG + 'icon_close.png', width: 20.0, height: 20.0, )), onTap: () { // Navigator.pop(context); }, ), new InkWell( child: new Padding( padding: const EdgeInsets.all(12.0), child: new Text( \"帮助\", style: new TextStyle(fontSize: 16.0, color: Color(0xff6B91BB)), )), onTap: () {}, ), ], ), ); } Container buildInputPass() { return Container( color: Colors.orange, margin: const EdgeInsets.only( left: 20.0, top: 30.0, bottom: 20, right: 20.0, ), child: Text( \"请输入账号密码请输入账号密码请输入账号密码请输入账号\", style: TextStyle(fontSize: 24.0, color: Colors.black), ), ); } ListView( children: [ buildTile(), buildInputPass(), ], ), 从红色块和橙色块两个Widget的布局可以知道内边距和外边距的区别。 4. 资料 Padding (Flutter Widget of the Week) Padding Demo "},"widget/layout/Center.html":{"url":"widget/layout/Center.html","title":"Center(居中)","keywords":"","body":"1. Center(居中布局)1. Center(居中布局) Center(居中布局)： 子元素处于水平和垂直方向的中间位置。 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Title'), ), body: new Center( child: new Text('Center Layout'), ), ), ); } } "},"widget/layout/Baseline.html":{"url":"widget/layout/Baseline.html","title":"Baseline(基准线)","keywords":"","body":"1. 构造函数2. Baseline(基准线布局) Baseline class:根据 child 的基线来放置 child 的 widgets。 1. 构造函数 const Baseline({ Key key, @required double baseline, @required TextBaseline baselineType, Widget child }) enum TextBaseline { alphabetic, // 对齐字符底部的水平线 ideographic, // 对齐表意字符串的水平线 } 2. Baseline(基准线布局) Baseline 将左右元素底部放到同一条水平线上。 Baseline Class "},"widget/layout/SizedBox.html":{"url":"widget/layout/SizedBox.html","title":"SizedBox(设置具体尺寸)","keywords":"","body":"1. 构造函数2. 示例 SizedBox class 1. 构造函数 const SizedBox({ Key key, double width, // 如果具体设置了宽度，则强制child宽度为此值； 如果没有设置，则根据child宽度调整自身宽度,填充整个父类 Widget double height, // 如果具体设置了高度，则强制child高度为此值； 如果没有设置，则根据child高度调整自身宽度,填充整个父类 Widget Widget child }) // 创建父类允许最大尺寸的约束Box const SizedBox.expand({ Key key, Widget child }) // 创建指定大小的约束Box SizedBox.fromSize({ Key key, Widget child, Size size }) // 创建父类允许最小尺寸的约束Box const SizedBox.shrink({ Key key, Widget child }) 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: SizedBox( width: 200.0, height: 300.0, child: const Card( child: Text( 'data', style: TextStyle(fontSize: 36.0), ), ), ), ), ); } } "},"widget/layout/LimitedBox.html":{"url":"widget/layout/LimitedBox.html","title":"LimitedBox(限定最大宽高)","keywords":"","body":"1. 构造函数2. 示例 LimitedBox class : 限定最大宽高布局 1. 构造函数 const LimitedBox({ Key key, double maxWidth: double.infinity, // 最大宽度 double maxHeight: double.infinity, // 最大高度 Widget child }) 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); // 宽度300的Container上添加一个约束最大最小宽高的ConstrainedBox。 class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: Row( children: [ Container( color: Colors.red, width: 100.0, ), LimitedBox( maxWidth: 100.0, child: Container( color: Colors.blue, width: 250.0,// 虽然设置了25.0 但是父容器限制了最大宽度 ), ), ], ), ), ); } } "},"widget/layout/ConstrainedBox.html":{"url":"widget/layout/ConstrainedBox.html","title":"ConstrainedBox(限定最大最小宽度)","keywords":"","body":"1. 构造函数 ConstrainedBox class : 限定子元素child的最大宽度、最大高度、最小宽度和最小高度。例如：通过ConstrainedBox来限制文本 Widget 的最大宽度，使其跨越多行。 1. 构造函数 ConstrainedBox({ Key key, @required BoxConstraints constraints, Widget child }) "},"widget/layout/OverflowBox.html":{"url":"widget/layout/OverflowBox.html","title":"OverflowBox(溢出父容器显示)","keywords":"","body":"1. 构造函数2. 示例 OverflowBox class 1. 构造函数 const OverflowBox({ Key key, AlignmentGeometry alignment: Alignment.center, double minWidth, // 允许 child 的最小宽度。如果 child 宽度小于这个值，则按照最小宽度进行显示 double maxWidth, // 允许 child 的最大宽度。如果 child 宽度大于这个值，则按照最大宽度进行显示 double minHeight, // 允许 child 的最小高度。如果 child 宽度小于这个值，则按照最小高度进行显示 double maxHeight, // 允许 child 的最大高度。如果 child 宽度大于这个值，则按照最大高度进行显示 Widget child }) 当OverflowBox的最大尺寸大于child的时候，child可以完整显示。 当OverflowBox的最大尺寸小于child的时候，则以最大尺寸为基准，当然这个尺寸是可以突破父节点的。 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Container( color: Colors.red, width: 200.0, height: 200.0, padding: const EdgeInsets.all(10.0), child: OverflowBox( alignment: Alignment.topLeft, maxWidth: 300.0, maxHeight: 500.0, child: Container( color: Colors.green, width: 400.0, height: 400.0, ), ), ), ), ); } } "},"widget/layout/FittedBox.html":{"url":"widget/layout/FittedBox.html","title":"FittedBox(缩放)","keywords":"","body":"1. 构造函数2. 示例 FittedBox Class 1. 构造函数 const FittedBox({ Key key, BoxFit fit: BoxFit.contain, // 缩放方式 AlignmentGeometry alignment: Alignment.center, // 设置对齐方式 Widget child }) 布局行为分为两种情况: 如果外部有约束的话，按照外部约束调整自身尺寸，然后缩放调整child，按照指定的条件进行布局。 如果没有外部约束条件，则跟着child尺寸一致，指定的缩放以及位置属性将不起作用。 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar(title: Text('data'),), body: new Container( color: Colors.red, width: 200.0, height: 200.0, child: new FittedBox( fit: BoxFit.scaleDown, alignment: Alignment.topLeft, child: new Container( color: Colors.green, child: new Text('Test'), ), ), ), ), ); } } "},"widget/layout/FractionallySizedBox.html":{"url":"widget/layout/FractionallySizedBox.html","title":"FractionallySizedBox(百分比)","keywords":"","body":"1. 构造函数2. 示例 FractionallySizedBox Class 1. 构造函数 const FractionallySizedBox({ Key key, AlignmentGeometry alignment: Alignment.center, // 对齐方式 double widthFactor, // 宽度因子 double heightFactor, // 高度因子 Widget child }) Widget 会根据现有空间来调整 child 的尺寸，所以就算为 child 设置了尺寸数值，也不起作用。 设置了具体的宽高因子，具体的宽高=现有的空间宽高X因子。 没有设置宽高因子，则填满可用区域。 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Container( color: Colors.red, height: 200.0, width: 200.0, child: new FractionallySizedBox( alignment: Alignment.topCenter, widthFactor: 0.5, //宽度因子 heightFactor: 1.5, //高度因子 child: new Container( color: Colors.blue, ), ), ), ), ); } } "},"widget/layout/AspectRatio.html":{"url":"widget/layout/AspectRatio.html","title":"AspectRatio(调整宽高比)","keywords":"","body":"1. 构造函数2. 示例 AspectRatio class:根据设置调整子元素child的宽高比，适合用于需要固定宽高比的场景。 1. 构造函数 const AspectRatio({ Key key, @required double aspectRatio, // 设置child组件的宽高比，`aspectRatio:3/2`:宽高比例为`3:2` Widget child }) AspectRatio 会在布局条件允许的范围内尽可能的扩展。Widget的高度是由宽度和比率决定的，类似于BoxFit.contain，按照固定比率去尽可能的沾满区域。 如果在满足区域限制条件后依然无法找到可行的尺寸，AspectRatio会优先适应布局限制条件，而忽略所设置的比率。 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); // 宽度300的Container上添加一个约束最大最小宽高的ConstrainedBox。 class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Container( height: 200.0, child: new AspectRatio( aspectRatio: 1.5,// 比率是1.5 => W = H * 1.5,所以AspectRatio组件的尺寸为(300,200) child: new Container( color: Colors.green, ), ), ), ), ); } } "},"widget/layout/Flexible.html":{"url":"widget/layout/Flexible.html","title":"Flexible(自适应)","keywords":"","body":"1. 构造函数2. Flexible VS Expanded3. 示例 Flexible Class 1. 构造函数 const Flexible({ Key key, int flex: 1, FlexFit fit: FlexFit.loose, @required Widget child }) enum FlexFit { tight, // 会尽可能的占用空间 loose, // 则按照子控件的自身尺寸的需要 } 当 FlexFit 设置 fit:FlexFit.tight，效果相当于Expanded。 2. Flexible VS Expanded ... -> Flexible ... -> Flexible -> Expanded Expanded是继承自Flexible。 相同点 : 都必须使用在Row、Column、Flex其中，都可用来配置子布局的比例（权重）适配。 不同点 : Expanded会强制填充剩余留白空间，而Flexible不会强制填充。 class _SpacerExampleState extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"FlexibleExample\"), ), body: Column( children: [ Row( children: [ Container( padding: EdgeInsets.all(10), decoration: BoxDecoration(color: Colors.red), child: Text(\"short string\"), ), Flexible( child: Container( padding: EdgeInsets.all(10), decoration: BoxDecoration(color: Colors.green), child: Text(\"Flexible \"), ), ) ], ), Row( children: [ Container( padding: EdgeInsets.all(10), decoration: BoxDecoration(color: Colors.blue), child: Text(\"short string\"), ), Expanded( child: Container( padding: EdgeInsets.all(10), decoration: BoxDecoration(color: Colors.green), child: Text(\"Expanded \"), ), ) ], ) ], ), ); } } 3. 示例 class _FlexibleExampleState extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"FlexibleExample\"), ), body: Column( children: [ Flexible(flex: 3, child: Container(color: Colors.red)), Flexible(flex: 2, child: Container(color: Colors.green)), Flexible(flex: 1, child: Container(color: Colors.blue)), ], ), ); } } "},"widget/layout/Spacer.html":{"url":"widget/layout/Spacer.html","title":"Spacer(空格)","keywords":"","body":"1. 构造函数2. 示例 Spacer Class 1. 构造函数 const Spacer({ Key key, int flex: 1 }) Creates a flexible space to insert into a Flexible widget. 2. 示例 class _SpacerExampleState extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"FlexibleExample\"), ), body: Row( children: [ Container(color: Colors.red, width: 80, height: 80), Spacer(flex: 1), Container(color: Colors.green, width: 80, height: 80), Spacer(flex: 5), Container(color: Colors.blue, width: 80, height: 80), ], ), ); } } "},"widget/layout/Expanded.html":{"url":"widget/layout/Expanded.html","title":"Expanded(填充)","keywords":"","body":"1. 构造函数2. 示例 Expanded Class 1. 构造函数 const Expanded({ Key key, int flex: 1, @required Widget child }) 填充 Row、Column、Flex中所有 child 的空间。 2. 示例 import 'package:flutter/material.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', home: new Scaffold( appBar: AppBar( title: Text('Flutter Demo'), ), body: Center( child: Column( children: [ Row( children: [ Container( color: Colors.blue, width: 100.0, height: 100.0, margin: EdgeInsets.all(2.0), child: Center( child: Text('Container'), ), ), Container( color: Colors.blue, width: 100.0, height: 100.0, margin: EdgeInsets.all(2.0), child: Center( child: Text('Container'), ), ), ], ), Row( children: [ Container( color: Colors.blue, width: 100.0, height: 100.0, margin: EdgeInsets.all(2.0), child: Center( child: Text('Container'), ), ), Expanded( child: Container( color: Colors.amber, height: 100.0, child: Center( child: Text('Expanded'), ), ), ), Container( color: Colors.blue, width: 100.0, height: 100.0, margin: EdgeInsets.all(2.0), child: Center( child: Text('Container'), ), ), ], ), Row( children: [ Expanded( flex: 2, child: Container( color: Colors.amber, height: 100.0, child: Center( child: Text( 'Expanded \\nflex: 2', textAlign: TextAlign.center, ), ), ), ), Container( color: Colors.blue, width: 100.0, height: 100.0, margin: EdgeInsets.all(2.0), child: Center( child: Text('Container'), ), ), Expanded( flex: 1, child: Container( color: Colors.amber, height: 100.0, child: Center( child: Text( 'Expanded \\nflex: 1', textAlign: TextAlign.center, ), ), ), ), ], ), ], ), ), ), ); } } "},"widget/layout/Container.html":{"url":"widget/layout/Container.html","title":"Container(容器)","keywords":"","body":"1. 构造函数2. 示例Container class Container(基础布局)是一个组合的 Widget 。类似于HTML中的标签，用于组合其他的 Widget 。 1. 构造函数 Container({ Key key, AlignmentGeometry alignment, // 控制 child 的对齐方式，如果 Container或者 Container父节点尺寸大于 child 的尺寸，这个属性设置会起作用，有很多种对齐方式 EdgeInsetsGeometry padding, // 填充属性， Decoration **内部**的空白区域，如果有 child的话，child位于padding 内部 Color color, // 用来设置 Container背景色，如果 foregroundDecoration 设置的话，可能会遮盖 color效果 Decoration decoration, // 给Container添加一些装饰，比如形状、颜色...，设置了 Decoration 的话，就不能设置 color属性，否则会报错，此时应该在 Decoration 中进行颜色的设置 Decoration foregroundDecoration, // 绘制在 child前面的装饰 double width, double height, BoxConstraints constraints, // 添加到 child上额外的约束条件 EdgeInsetsGeometry margin, // 边距属性，围绕在 Decoration 和 child 之外的空白区域，不属于内容区域 Matrix4 transform, // 设置 Container 的变换矩阵，类型为 Matrix4 Widget child, Clip clipBehavior: Clip.none )} 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: new Scaffold( appBar: new AppBar( title: new Text(\"AppBar Title\"), ), body: new Center( child: new Container( width: 200, height: 200, decoration: BoxDecoration( color: Colors.red ), child: new Center( child: new Text('Container Text'), ), ), ), ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { Widget container = new Container( // 添加装饰效果 decoration: new BoxDecoration( color: Colors.grey, ), // 子元素指定为一个垂直水平嵌套布局的组件 child: new Column( children: [ // 第一行 new Row( children: [ new Expanded( child: new Container( width: 150.0, height: 150.0, // 添加边框样式 decoration: new BoxDecoration( border: new Border.all( width: 10.0, color: Colors.blueGrey, ), borderRadius: const BorderRadius.all( const Radius.circular(8.0), )), margin: const EdgeInsets.all(4.0), child: new Image.asset('icons/code.png'), )), new Expanded( child: new Container( width: 150.0, height: 150.0, decoration: new BoxDecoration( border: new Border.all( width: 10.0, color: Colors.blueGrey, ), borderRadius: const BorderRadius.all( const Radius.circular(8.0), )), margin: const EdgeInsets.all(4.0), child: new Image.asset('icons/code.png'), )), ], ), // 第二行 new Row( children: [ new Expanded( child: new Container( width: 150.0, height: 150.0, decoration: new BoxDecoration( border: new Border.all( width: 10.0, color: Colors.blueGrey, ), borderRadius: const BorderRadius.all( const Radius.circular(8.0), )), margin: const EdgeInsets.all(4.0), child: new Image.asset('icons/code.png'), )), new Expanded( child: new Container( width: 150.0, height: 150.0, decoration: new BoxDecoration( border: new Border.all( width: 10.0, color: Colors.blueGrey, ), borderRadius: const BorderRadius.all( const Radius.circular(8.0), )), margin: const EdgeInsets.all(4.0), child: new Image.asset('icons/code.png'), )), ], ) ], ), ); return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Title'), ), body: container, ), ); } } "},"widget/layout/Offstage.html":{"url":"widget/layout/Offstage.html","title":"Offstage(控制是否显示)","keywords":"","body":"1. 构造函数2. 示例Offstage Class : 通过参数来控制child是否显示。 1. 构造函数 const Offstage({ Key key, bool offstage: true, // 控制显示状态 Widget child }) 2. 示例 class _OffstageExampleState extends State { bool _offstage = true; @override Widget build(BuildContext context) { return Scaffold( floatingActionButton: FloatingActionButton( onPressed: () { setState(() { _offstage = !_offstage; }); }, child: Text(\"Click\"), ), appBar: AppBar( title: Text(\"OffstageExample\"), ), body: Row( children: [ Container(color: Colors.red, width: 100, height: 100), Offstage( offstage: _offstage, child: Container(color: Colors.green, width: 100, height: 100)), Container(color: Colors.blue, width: 100, height: 100), ], ), ); } } "},"widget/layout/Transform.html":{"url":"widget/layout/Transform.html","title":"Transform(矩阵转换)","keywords":"","body":"1. Transform(矩阵转换)1. Transform(矩阵转换) Transform (Flutter Widget of the Week) Transform 主要作用就是做矩阵转换。对组件进行平移、旋转和缩放的等操作。 const Transform({ Key key, @required this.transform, this.origin, this.alignment, this.transformHitTests = true, Widget child, }); 属性 类型 描述 transform Matrix4 一个4x4的矩阵。 origin Offset 旋转点，相对于左上角顶点的偏移。默认旋转点是在左上角顶点 alignment AlignmentGeometry 对齐方式 transformHitTests bool 点击区域石佛业做相应的改变 Transform.translate({Key key,@required Offset offset,this.transformHitTests = true,Widget child,}); "},"widget/layout/LayoutBuilder.html":{"url":"widget/layout/LayoutBuilder.html","title":"LayoutBuilder(布局构造器)","keywords":"","body":"1. LayoutBuilder(布局构造器) 1. LayoutBuilder(布局构造器) LayoutBuilder可以通过判断设备尺寸来布局界面。与其类似的用法还有MediaQuery.of(context).orientation == Orientation.portrait LayoutBuilder Class import 'package:flutter/material.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', home: new Scaffold( appBar: AppBar( title: Text('FittedBox Demo'), ), body: LayoutBuilder( builder: (BuildContext context, BoxConstraints constraints) { // 通过 constraints 来判断屏幕的尺寸，从而进行界面适配。 if (constraints.maxWidth "},"widget/button/":{"url":"widget/button/","title":"按钮","keywords":"","body":""},"widget/button/FloatingActionButton.html":{"url":"widget/button/FloatingActionButton.html","title":"FloatingActionButton(悬停按钮)","keywords":"","body":"1. FloatingActionButton(悬停按钮组件)1. FloatingActionButton(悬停按钮组件) 属性 类型 默认值 说明 child Widget tooltip foregroundColor backgroundColor elevation hignlightElevation onPressed shape 这个组件构造方法： FloatingActionButton(); FloatingActionButton.extended(); 示例代码 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"FloatingActionButton Demo\", home: HomePage(), ); } } //////////////////////////////首页////////////////////////////////// class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"FloatingActionButton Demo\"), ), /*floatingActionButton: FloatingActionButton( onPressed: () {}, child: Icon(Icons.navigation), backgroundColor: Colors.green, ),*/ floatingActionButton: FloatingActionButton.extended( onPressed: () {}, label: Text('Approve'), icon: Icon(Icons.thumb_up), backgroundColor: Colors.pink, ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), floatingActionButton: new Builder(builder: (BuildContext context){ return new FloatingActionButton( child: const Icon(Icons.add), tooltip: 'Click Tip', foregroundColor: Colors.red, backgroundColor: Colors.blue, elevation: 7.0,// 未点击阴影值 highlightElevation: 14.0,// 点击阴影值 mini: false, shape: new CircleBorder(), isExtended: false, onPressed: (){ Scaffold.of(context).showSnackBar( new SnackBar(content: new Text('data')) ); }, ); }), floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,// 居中 ), ); } } 把FloatingActionButton写在Builder组件里面为了使SnackBar有效果，因为这个类是StatelessWidget。也可以通过下面的代码实现，使用StatefulWidget： import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); // MyApp 不做状态处理，所以继承 StatelessWidget class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new LoginPage(title: 'This is title!',), ); } } // 主体需要做状态处理，继承 StatefulWidget class LoginPage extends StatefulWidget { LoginPage({Key key,this.title}) : super(key:key); final String title; @override _LoginPageState createState() => new _LoginPageState(); } class _LoginPageState extends State { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: Text(widget.title), ), body: new Center( child: FlatButton(onPressed: (){ _neverSatisfied(context); }, child: new Text('FlatButton')) ), ); } } Future _neverSatisfied(BuildContext context) async { return showDialog( context: context, barrierDismissible: false, builder: (BuildContext context) { return AlertDialog( title: Text('Rewind and remember'), content: SingleChildScrollView( child: ListBody( children: [ Text('You will never be satisfied.'), Text('You\\’re like me. I’m never satisfied.'), ], ), ), actions: [ FlatButton( child: Text('Regret'), onPressed: () { Navigator.of(context).pop(); }, ), ], ); }); } "},"widget/button/FlatButton.html":{"url":"widget/button/FlatButton.html","title":"FlatButton(扁平按钮组件)","keywords":"","body":"1. FlatButton(扁平按钮组件)1. FlatButton(扁平按钮组件) FlatButton组件是Materail Design风格按钮，点击时会有一个阴影效果。 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), body: new Center( child: FlatButton( onPressed: () {}, child: Text( 'FlatButton', style: TextStyle(fontSize: 24.0), )), ), ), ); } } "},"widget/button/PopupMenuButton.html":{"url":"widget/button/PopupMenuButton.html","title":"PopupMenuButton(弹出菜单组件)","keywords":"","body":"1. PopupMenuButton(弹出菜单组件)1. PopupMenuButton(弹出菜单组件) 属性 类型 说明 child Widget icon Icon itemBuilder PopupMenuItembuilder 菜单构造器，菜单项为任意类型，文本、图标都行 onSelected PopupMenuItembuilder 菜单被选中的回调方法 示例代码 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"FloatingActionButton Demo\", home: HomePage(), ); } } //////////////////////////////首页////////////////////////////////// class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } enum ConferenceItem { AddMember, LockConference, ModifyLayout, TurnoffAll } class _HomePage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"FloatingActionButton Demo\"), actions: [ PopupMenuButton(itemBuilder: (_) { return >[ const PopupMenuItem( child: Text('添加成员'), value: ConferenceItem.AddMember, ), const PopupMenuItem( child: Text('锁定会议'), value: ConferenceItem.LockConference, ), const PopupMenuItem( child: Text('修改布局'), value: ConferenceItem.ModifyLayout, ), const PopupMenuItem( child: Text('挂断所有'), value: ConferenceItem.TurnoffAll, ), ]; }) ], ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), body: new Center( child: FlatButton( onPressed: () {}, child: PopupMenuButton( itemBuilder: (BuildContext context) { return >[ const PopupMenuItem( child: Text('添加成员'), value: ConferenceItem.AddMember, ), const PopupMenuItem( child: Text('锁定会议'), value: ConferenceItem.LockConference, ), const PopupMenuItem( child: Text('修改布局'), value: ConferenceItem.ModifyLayout, ), const PopupMenuItem( child: Text('挂断所有'), value: ConferenceItem.TurnoffAll, ), ]; }, onSelected: (ConferenceItem item) { }, ), ), ), ), ); } } enum ConferenceItem { AddMember, LockConference, ModifyLayout, TurnoffAll } "},"widget/dialog/Chip.html":{"url":"widget/dialog/Chip.html","title":"Chip","keywords":"","body":"1. Chip1. Chip InputChip ChoiceChip FilterChip ActionChip 查看官方测试文件 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp(title: \"Demo\", home: HomePage()); } } class ActorFilterEntry { const ActorFilterEntry(this.name, this.initials); final String name; final String initials; } class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { /////////////////////////////////////////////// Chip _chip() { return Chip( avatar: CircleAvatar( backgroundColor: Colors.grey.shade800, child: Text('AB'), ), deleteButtonTooltipMessage: 'Delete chip A', label: Text('Aaron Burr'), onDeleted: () { print('Chip.'); }, ); } /////////////////////////////////////////////// bool _inputChipSlected = false; InputChip _inputChip() { return InputChip( avatar: CircleAvatar( backgroundColor: Colors.grey.shade800, child: Text('AB'), ), label: Text('Aaron Burr'), selected: _inputChipSlected, onSelected: (bool value) { setState(() { _inputChipSlected = value; }); }, ); } /////////////////////////////////////////////// int _value = 1; Wrap _choiceChip() { return Wrap( children: List.generate( 3, (int index) { return ChoiceChip( label: Text('Item $index'), selected: _value == index, onSelected: (bool selected) { setState(() { _value = selected ? index : null; }); }, ); }, ).toList(), ); } /////////////////////////////////////////////// final List _cast = [ const ActorFilterEntry('Aaron Burr', 'AB'), const ActorFilterEntry('Alexander Hamilton', 'AH'), const ActorFilterEntry('Eliza Hamilton', 'EH'), const ActorFilterEntry('James Madison', 'JM'), ]; List _filters = []; Iterable get actorWidgets sync* { for (final ActorFilterEntry actor in _cast) { yield Padding( padding: const EdgeInsets.all(4.0), child: FilterChip( avatar: CircleAvatar(child: Text(actor.initials)), label: Text(actor.name), selected: _filters.contains(actor.name), onSelected: (bool value) { setState(() { if (value) { _filters.add(actor.name); } else { _filters.removeWhere((String name) { return name == actor.name; }); } }); }, ), ); } } /////////////////////////////////////////////// ActionChip _actionChip() { return ActionChip( avatar: CircleAvatar( backgroundColor: Colors.grey.shade800, child: Text('AB'), ), label: Text('Aaron Burr'), onPressed: () { print(\"If you stand for nothing, Burr, what’ll you fall for?\"); }); } /////////////////////////////////////////////// Container demo1() { return Container( width: 75.0, height: 25.0, child: Chip( label: Container( width: 100.0, height: 50.0, ), onDeleted: () {}, ), ); } InputChip demo2() { return InputChip( label: const Text('InputChip'), selected: true, showCheckmark: true, checkmarkColor: Colors.red, ); } Widget _selectedFilterChip({Color checkmarkColor}) { return FilterChip( label: const Text('InputChip'), selected: true, showCheckmark: true, checkmarkColor: checkmarkColor, onSelected: (bool _) {}, ); } @override Widget build(BuildContext context) { return Scaffold( body: Column( children: [ _chip(), _inputChip(), _choiceChip(), Wrap(children: actorWidgets.toList()), _actionChip(), demo1(), demo2(), _selectedFilterChip(checkmarkColor: Colors.red), ], ), ); } } "},"widget/button/CheckboxListTile.html":{"url":"widget/button/CheckboxListTile.html","title":"CheckboxListTile(复选框)","keywords":"","body":"1. CheckboxListTile(复选框)1. CheckboxListTile(复选框) const CheckboxListTile({ Key key, @required this.value, @required this.onChanged, this.activeColor, this.checkColor, this.title, this.subtitle, this.isThreeLine = false, this.dense, this.secondary,// 图标 this.selected = false, this.controlAffinity = ListTileControlAffinity.platform, this.autofocus = false, }); import 'package:flutter/cupertino.dart'; import 'package:flutter/material.dart'; class CheckboxListTileDemo extends StatefulWidget { @override _CheckboxListTileDemoState createState() => _CheckboxListTileDemoState(); } class _CheckboxListTileDemoState extends State { bool _checkboxSelected = false; @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"CheckboxListTile Demo\"), ), body: Center( child: CheckboxListTile( title: Text('Animate Slowly'), value: _checkboxSelected, secondary: Icon(Icons.add), controlAffinity: ListTileControlAffinity.leading, onChanged: (value) { setState(() { _checkboxSelected = value; }); }, ), ), ); } } 如果这些样式都满足不了需要，可以使用Checkbox和其他的Widgest结合使用。 "},"widget/button/RaisedButton.html":{"url":"widget/button/RaisedButton.html","title":"RaisedButton","keywords":"","body":"1. 构造函数1.1. RaisedButton()1.2. RaisedButton.icon()RaisedButton Class 1. 构造函数 1.1. RaisedButton() RaisedButton({ Key key, @required VoidCallback onPressed, VoidCallback onLongPress, ValueChanged onHighlightChanged, ButtonTextTheme textTheme, Color textColor,// 文字颜色 Color disabledTextColor, Color color, //按钮背景色 Color disabledColor, Color focusColor, Color hoverColor, Color highlightColor, Color splashColor, Brightness colorBrightness, double elevation, double focusElevation, double hoverElevation, double highlightElevation, double disabledElevation, EdgeInsetsGeometry padding, VisualDensity visualDensity, ShapeBorder shape, Clip clipBehavior: Clip.none, FocusNode focusNode, bool autofocus: false, MaterialTapTargetSize materialTapTargetSize, Duration animationDuration, Widget child }) 1.2. RaisedButton.icon() RaisedButton.icon({ Key key, @required VoidCallback onPressed, VoidCallback onLongPress, ValueChanged onHighlightChanged, ButtonTextTheme textTheme, Color textColor, Color disabledTextColor, Color color, Color disabledColor, Color focusColor, Color hoverColor, Color highlightColor, Color splashColor, Brightness colorBrightness, double elevation, double highlightElevation, double disabledElevation, ShapeBorder shape, Clip clipBehavior, FocusNode focusNode, bool autofocus, EdgeInsetsGeometry padding, MaterialTapTargetSize materialTapTargetSize, Duration animationDuration, @required Widget icon, @required Widget label }) "},"widget/button/DropdownButton.html":{"url":"widget/button/DropdownButton.html","title":"DropdownButton","keywords":"","body":"1. 构造函数1.1. DropdownButton1.2. DropdownMenuItem2. 示例DropdownButton Class 1. 构造函数 1.1. DropdownButton DropdownButton({ Key key, @required List> items, DropdownButtonBuilder selectedItemBuilder, T value, // 当前选定的值，如果没有选择任何一个，则为空。 Widget hint, Widget disabledHint, // 禁用下拉列表的时候显示的消息。 @required ValueChanged onChanged, // 当用户选择了其中一个值得时候触发 VoidCallback onTap, int elevation: 8, // 菜单展开时的阴影 TextStyle style, Widget underline, // 绘制按钮下划线 Widget icon, // 下拉指示图标 Color iconDisabledColor, Color iconEnabledColor, double iconSize: 24.0, bool isDense: false, bool isExpanded: false, // 是否填充 double itemHeight: kMinInteractiveDimension, Color focusColor, FocusNode focusNode, bool autofocus: false, Color dropdownColor }) 1.2. DropdownMenuItem DropdownButton中的item。 const DropdownMenuItem({ Key key, VoidCallback onTap, T value, @required Widget child }) 2. 示例 class _DropdownButtonExampleState extends State { String selectedValue = ''; List dropdownList = ['One', 'Two', 'Three', 'Four']; @override void initState() { selectedValue = dropdownList.first; super.initState(); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"DropdownButtonExample\"), ), body: DropdownButton( isExpanded: true, icon: Icon(Icons.arrow_downward), value: selectedValue, items: dropdownList .map((e) => DropdownMenuItem( child: Text(e), value: e, )) .toList(), onChanged: (newValue) { setState(() { print(newValue); selectedValue = newValue; }); }, ), ); } } 设置菜单的阴影值： elevation: 24, "},"widget/dialog/":{"url":"widget/dialog/","title":"弹窗","keywords":"","body":""},"widget/dialog/SimpleDialog.html":{"url":"widget/dialog/SimpleDialog.html","title":"SimpleDialog(简单对话框组件)","keywords":"","body":"1. SimpleDialog(简单对话框组件)1. SimpleDialog(简单对话框组件) 属性 类型 说明 children List title contentPadding titlePadding 示例代码 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"FloatingActionButton Demo\", home: HomePage(), ); } } //////////////////////////////首页////////////////////////////////// class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { @override Widget build(BuildContext context) { Future _showDialog() async { await showDialog( context: context, builder: (_) { return SimpleDialog( title: Text('This is a SimpleDialog!'), children: [ SimpleDialogOption(child: Text(\"data\")), SimpleDialogOption(child: Text(\"data\")), ], ); }); } return Scaffold( appBar: AppBar( title: Text(\"FloatingActionButton Demo\"), ), floatingActionButton: FloatingActionButton( onPressed: () { _showDialog(); }, ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), body: new Center( child: showDialog(), ), ), ); } } StatelessWidget showDialog() { return SimpleDialog( title: const Text('SimpleDialog Title'), children: [ SimpleDialogOption( child: new Text('Line 3'), onPressed: () {}, ), SimpleDialogOption( child: new Text('Line 3'), onPressed: () {}, ), SimpleDialogOption( child: new Text('Line 3'), onPressed: () {}, ), ], ); } 一般对话框要封装在方法里，通过点击事件弹出。如果这一过程是异步要加上async/await处理。 "},"widget/dialog/AlertDialog.html":{"url":"widget/dialog/AlertDialog.html","title":"AlertDialog(提示对话框组件)","keywords":"","body":"1. AlertDialog(提示对话框组件)1. AlertDialog(提示对话框组件) 示例 属性 类型 说明 actions List title contentPadding content Widget 内容，如果内容比较多可以用SingleChildScrollView组件进行包裹 titlePadding import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), body: new Center( child: new Builder(builder: (BuildContext context){ return new FlatButton(onPressed: (){ _neverSatisfied(context); }, child: new Text('data')); }), ), ), ); } } Future _neverSatisfied(BuildContext context) async { return showDialog( context: context, barrierDismissible: false, builder: (BuildContext context) { return AlertDialog( title: Text('Rewind and remember'), content: SingleChildScrollView( child: ListBody( children: [ Text('You will never be satisfied.'), Text('You\\’re like me. I’m never satisfied.'), ], ), ), actions: [ FlatButton( child: Text('Regret'), onPressed: () { Navigator.of(context).pop(); }, ), ], ); }); } "},"widget/dialog/BottomSheet.html":{"url":"widget/dialog/BottomSheet.html","title":"BottomSheet","keywords":"","body":"1. BottomSheet1. BottomSheet BottomSheet有两种设计方式： Persistent : 这是用过ScaffoldState.showBottomSheet来展示。 Modal 通过showModalBottomSheet来展示。 示例代码 import 'package:flutter/cupertino.dart'; import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp(title: \"Demo\", home: HomePage()); } } class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { final GlobalKey scaffoldKey = GlobalKey(); @override Widget build(BuildContext context) { return Scaffold( key: scaffoldKey, body: Builder( builder: (BuildContext context) => Center( child: FlatButton( child: Text(\"Alert\"), onPressed: () { _showBottomSheetDemo(context); }, ), ), ), // floatingActionButton: FloatingActionButton( // child: Text(\"Alert\"), // onPressed: () { // scaffoldKey.currentState.showBottomSheet( // (_) { // return Container( // margin: const EdgeInsets.all(40.0), // child: const Text('BottomSheet'), // ); // }, // ); // }, // ), ); } void _showBottomSheetDemo(BuildContext context) { Scaffold.of(context).showBottomSheet((_) { return Container( height: 200.0, color: Color(0xFF37966F), child: Column( mainAxisAlignment: MainAxisAlignment.center, mainAxisSize: MainAxisSize.min, children: [ const Text('BottomSheet'), RaisedButton( child: const Text('Close BottomSheet'), onPressed: () => Navigator.pop(context), ) ], ), ); }); } } 示例代码 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp(title: \"Demo\", home: HomePage()); } } class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { @override Widget build(BuildContext context) { return Scaffold( body: Builder( builder: (BuildContext context) => Center( child: FlatButton( child: Text(\"Alert\"), onPressed: () { showModalBottomSheet( context: context, backgroundColor: Colors.pink, barrierColor: Colors.red, elevation: 9.0, shape: BeveledRectangleBorder( borderRadius: BorderRadius.circular(12)), clipBehavior: Clip.antiAlias, builder: (_) { return Container( child: const Text('BottomSheet'), height: 400.0, ); }).then( (value) {}, ); }, ), ), ), ); } } "},"widget/dialog/SnackBar.html":{"url":"widget/dialog/SnackBar.html","title":"SnackBar","keywords":"","body":"1. SnackBar(轻量提示组件)1. SnackBar(轻量提示组件) 属性 类型 说明 action animation content duration backgroundColor import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), body: new Center( child: new Builder(builder:(BuildContext context) { return new FlatButton(onPressed: (){ Scaffold.of(context).showSnackBar( new SnackBar(content: new Text('data')) ); }, child: new Text('data')); }) ), ), ); } } "},"widget/dialog/showDialog.html":{"url":"widget/dialog/showDialog.html","title":"showDialog","keywords":"","body":"1. 构造函数2. 示例2.1. 控制弹窗的SizeshowDialog 1. 构造函数 Future showDialog ({ @required BuildContext context, bool barrierDismissible: true, Widget child, WidgetBuilder builder, bool useRootNavigator: true, RouteSettings routeSettings }) 2. 示例 Future _showMyDialog() async { return showDialog( context: context, barrierDismissible: false, // user must tap button! builder: (BuildContext context) { return AlertDialog( title: Text('AlertDialog Title'), content: SingleChildScrollView( child: ListBody( children: [ Text('This is a demo alert dialog.'), Text('Would you like to approve of this message?'), ], ), ), actions: [ FlatButton( child: Text('Approve'), onPressed: () { Navigator.of(context).pop(); }, ), ], ); }, ); } 2.1. 控制弹窗的Size Future _showDialog() async { return showDialog( context: context, builder: (_) { return Center( // 如果没有center()，会全屏展示，就算Container()设置了尺寸也没用。Flutter needs a way to know how to align that 200x150 box inside the screen. child: Container( height: 200, width: 150, color: Colors.red, ), ); }, ); } "},"widget/input/":{"url":"widget/input/","title":"输入","keywords":"","body":" DropdownButtonFormField Form FormField FormFieldState FormState InputDatePickerFormField TextFormField "},"widget/input/Form.html":{"url":"widget/input/Form.html","title":"Form(表单)","keywords":"","body":"1. 构造函数2. 示例3. Form(表格)Form Class 1. 构造函数 const Form({ Key key, @required Widget child, bool autovalidate: false, // 是否自动校验输入内容 WillPopCallback onWillPop, VoidCallback onChanged // Form中的内容发生变化的时候会触发此方法。 }) 2. 示例 class _FormExampleState extends State { @override Widget build(BuildContext context) { GlobalKey _formKey = new GlobalKey(); FocusNode focusNodeName = FocusNode(); FocusNode focusNodePassword = FocusNode(); return Scaffold( appBar: AppBar( title: Text(\"FormExample\"), ), body: Padding( padding: const EdgeInsets.all(10.0), child: Form( key: _formKey, child: Column( children: [ TextFormField( onEditingComplete: () { focusNodePassword.requestFocus(); }, focusNode: focusNodeName, decoration: InputDecoration( labelText: \"用户名：\", icon: Icon(Icons.person), ), validator: (String value) { return value.trim().length > 0 ? null : \"用户名不能为空\"; }, ), TextFormField( obscureText: true, focusNode: focusNodePassword, decoration: InputDecoration( labelText: \"密码：\", icon: Icon(Icons.lock), ), validator: (String value) { return value.trim().length > 6 ? null : \"密码不能少于6位\"; }, ), Padding( padding: const EdgeInsets.only(top: 30.0), child: Row( children: [ Expanded( child: RaisedButton( padding: EdgeInsets.all(15.0), onPressed: () { // 失去焦点，收起键盘。 focusNodeName.unfocus(); focusNodePassword.unfocus(); if ((_formKey.currentState as FormState).validate()) { print(\"校验通过！\"); } }, child: Text(\"登录\"), textColor: Colors.white, color: Theme.of(context).primaryColor, ), ), ], ), ) ], ), ), ), ); } } 3. Form(表格) 表格类，可以通过Cookbook-Forms来初步实现Form的创建；其中涉及到的Widget有：FormField、TextFormField、DropdownButtonFormField、EditableText、InputDatePickerFormField。 class TextFormField extends FormField{} class DropdownButtonFormField extends FormField{} class EditableText extends StatefulWidget{} Form示例 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"FloatingActionButton Demo\", home: HomePage(), ); } } //////////////////////////////首页////////////////////////////////// class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { // Create a global key that uniquely identifies the Form widget // and allows validation of the form. // // Note: This is a `GlobalKey`, // not a GlobalKey. final _formKey = GlobalKey(); FocusNode _focusNode; List _dropList; String _dropListSelected; final TextEditingController _controller = TextEditingController(); @override void initState() { super.initState(); _focusNode = FocusNode(); _dropList = [\"One\", \"Two\"]; _dropListSelected = _dropList.length Form( key: _formKey, child: Column( mainAxisAlignment: MainAxisAlignment.start, // Add TextFormFields and RaisedButton here. children: [ Padding( padding: const EdgeInsets.all(16.0), child: TextFormField( //autofocus: true, //focusNode: _focusNode, decoration: const InputDecoration( hintText: 'Enter your email', ), // 校验字段 validator: (value) { if (value.isEmpty) { return 'Please enter some text'; } return null; }, onChanged: (value) { print(value); }, ), ), Padding( padding: EdgeInsets.only(left: 16.0, bottom: 16.0, right: 16.0), child: DropdownButtonFormField( hint: const Text('Select Value'), value: _dropListSelected, items: _dropList .map>((String dropdownMenuItem) { return DropdownMenuItem( child: Text(dropdownMenuItem), value: dropdownMenuItem, ); }).toList(), onChanged: (value) {}, validator: (String value) => value == null ? 'Must select value' : null, onSaved: (String value) { setState(() { _dropListSelected = value; }); }, ), ), Padding( padding: EdgeInsets.only(left: 16.0, bottom: 16.0, right: 16.0), child: EditableText( backgroundCursorColor: Colors.grey, controller: _controller, focusNode: _focusNode, style: TextStyle(color: Colors.black), cursorColor: Color.fromARGB(0xFF, 0xFF, 0x00, 0x00), ), ), InputDatePickerFormField( firstDate: DateTime(2018), lastDate: DateTime(2030), ), RaisedButton( onPressed: () { if (_focusNode.canRequestFocus) { _focusNode.requestFocus(); } if (_formKey.currentState.validate()) { Scaffold.of(context).showSnackBar( SnackBar(content: Text('Processing Data'))); } }, child: Text('Submit'), ), ], ), ), ), ); } } "},"widget/input/FormField.html":{"url":"widget/input/FormField.html","title":"FormField(表单输入框)","keywords":"","body":"1. 构造函数2. 自定义 FormFieldFormField Class 1. 构造函数 const FormField({ Key key, @required FormFieldBuilder builder, FormFieldSetter onSaved, //保存时触发 FormFieldValidator validator, //验证时触发 T initialValue, //初始化值 bool autovalidate: false, //是否自动校验 bool enabled: true }) 2. 自定义 FormField 实现一个demo，用户输入姓名、年纪，并且进行打印： class _FormFieldExampleState extends State { final _formKey = GlobalKey(); String name; int age; @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"FormFieldExample\"), ), body: Center( child: Form( key: this._formKey, child: Column( mainAxisSize: MainAxisSize.min, children: [ Text('Please fill in your name and age'), TextFormField( autovalidate: false, onSaved: (value) => this.name = value, validator: (value) { return value.length 其中Counter()为计数的自定义Widget: class Counter extends StatefulWidget { @override _CounterState createState() => _CounterState(); } class _CounterState extends State { int value; @override void initState() { this.value = 0; super.initState(); } @override Widget build(BuildContext context) { return Row( mainAxisSize: MainAxisSize.min, children: [ IconButton( icon: Icon(Icons.remove), onPressed: () { setState(() { if (this.value > 0) { this.value--; } }); }, ), Padding( padding: const EdgeInsets.only(left: 20.0, right: 20.0), child: Text(this.value.toString()), ), IconButton( icon: Icon(Icons.add), onPressed: () { setState(() { this.value++; }); }, ) ], ); } } 现在如果把Counter()做成成像FormField一样的表单输入，可以通过继承FormField完成： class CounterFieldExample extends FormField { CounterFieldExample( {FormFieldSetter onSaved, FormFieldValidator validator, int initialValue = 0, bool autovalidate: false, bool enabled: true}) : super( onSaved: onSaved, validator: validator, initialValue: initialValue, autovalidate: autovalidate, builder: (FormFieldState field) { return Column( children: [ // Counter 计数器Widget Row( mainAxisSize: MainAxisSize.min, children: [ IconButton( icon: Icon(Icons.remove), onPressed: () { field.didChange(field.value - 1); print(\"remove ${field.value}\"); }, ), Padding( padding: const EdgeInsets.only(left: 20.0, right: 20.0), child: Text(field.value.toString()), ), IconButton( icon: Icon(Icons.add), onPressed: () { field.didChange(field.value + 1); print(\"add ${field.value}\"); }, ) ], ), // 添加错误提示 field.hasError ? Text( field.errorText, style: TextStyle(color: Colors.red), ) : Container() ], ); }); } 现在集成CounterFieldExample： CounterFieldExample( autovalidate: false, onSaved: (value) => this.age = value, validator: (int value) { print(value); return value "},"widget/input/DropdownButtonFormField.html":{"url":"widget/input/DropdownButtonFormField.html","title":"DropdownButtonFormField(下拉菜单)","keywords":"","body":"1. 构造函数DropdownButtonFormField Class 1. 构造函数 DropdownButtonFormField({ Key key, T value, @required List> items, DropdownButtonBuilder selectedItemBuilder, Widget hint, @required ValueChanged onChanged, VoidCallback onTap, InputDecoration decoration: const InputDecoration(), FormFieldSetter onSaved, FormFieldValidator validator, bool autovalidate: false, Widget disabledHint, int elevation: 8, TextStyle style, Widget icon, Color iconDisabledColor, Color iconEnabledColor, double iconSize: 24.0, bool isDense: true, bool isExpanded: false, double itemHeight }) "},"widget/input/FormState.html":{"url":"widget/input/FormState.html","title":"FormState(表单状态)","keywords":"","body":"1. 方法FormState Class 1. 方法 void reset(); // 重新输入 void save(); // 保存 bool validate(); // 校验Form内容，任何一个不满足则返回 false "},"widget/input/TextField.html":{"url":"widget/input/TextField.html","title":"TextField(输入框)","keywords":"","body":"1. 构造函数1.1. TextInputType1.2. TextAlign2. 示例2.1. 给 TextField 添加颜色3. 资料TextField Class 1. 构造函数 const TextField({ Key key, TextEditingController controller, //编辑框的控制器，跟文本框的交互一般都通过该属性完成，如果不创建的话默认会自动创建 FocusNode focusNode, //用于管理焦点 InputDecoration decoration: const InputDecoration(), //输入框的装饰器，用来修改外观 TextInputType keyboardType, //设置输入类型，不同的输入类型键盘不一样 TextInputAction textInputAction, //用于控制键盘动作（一般位于右下角，默认是完成） TextCapitalization textCapitalization: TextCapitalization.none, // 键盘输入字符大小写 TextStyle style, //输入的文本样式 StrutStyle strutStyle, TextAlign textAlign: TextAlign.start, //输入的文本位置 TextAlignVertical textAlignVertical, TextDirection textDirection, //输入的文字排列方向，一般不会修改这个属性 bool readOnly: false, ToolbarOptions toolbarOptions, bool showCursor, bool autofocus: false, //是否自动获取焦点 bool obscureText: false, //是否隐藏输入的文字，一般用在密码输入框中 bool autocorrect: true, //是否自动校验 SmartDashesType smartDashesType, SmartQuotesType smartQuotesType, bool enableSuggestions: true, int maxLines: 1, //最大行 int minLines, bool expands: false, int maxLength, //能输入的最大字符个数 bool maxLengthEnforced: true, //配合maxLength一起使用，在达到最大长度时是否阻止输入 ValueChanged onChanged, //输入文本发生变化时的回调 VoidCallback onEditingComplete, //点击键盘完成按钮时触发的回调，该回调没有参数，(){} ValueChanged onSubmitted, //同样是点击键盘完成按钮时触发的回调，该回调有参数，参数即为当前输入框中的值。(String){} List inputFormatters, //对输入文本的校验 bool enabled, //输入框是否可用 double cursorWidth: 2.0, //光标的宽度 Radius cursorRadius, //光标的圆角 Color cursorColor, //光标的颜色 BoxHeightStyle selectionHeightStyle: ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle: ui.BoxWidthStyle.tight, Brightness keyboardAppearance, EdgeInsets scrollPadding: const EdgeInsets.all(20.0), DragStartBehavior dragStartBehavior: DragStartBehavior.start, bool enableInteractiveSelection: true, GestureTapCallback onTap, //点击输入框时的回调 InputCounterWidgetBuilder buildCounter, ScrollController scrollController, ScrollPhysics scrollPhysics }) 1.1. TextInputType TeextInputType.text 文本 TextInputType.datetime 调用起输入数字键盘，带 \".\" 和 \"-\" ，来输入日期和时间 TextInputType.emailAddress 邮箱 TextInputType.multiline 多行文本信息 TextInputType.number 数字 TextInputType.url url 类型 TextInputType.visiblePassword 密码 TextInputType.values 多种类型 1.2. TextAlign enum TextAlign { left, right, center, justify, start, end, } 2. 示例 2.1. 给 TextField 添加颜色 Theme( data: ThemeData( primaryColor: Colors.red, hintColor: Colors.green, ), child: TextField( controller: textEditingController, decoration: InputDecoration( labelText: 'Hello', ), ), ) 3. 资料 TextFormField Form 可以从flutter 官方测试文件中找到Demo 使用TextEditingController CodePen示例 "},"widget/input/InputDecoration.html":{"url":"widget/input/InputDecoration.html","title":"InputDecoration","keywords":"","body":"1. 构造函数1.1. InputDecoration()1.2. InputDecoration.collapsed()2. 示例InputDecoration Class 1. 构造函数 1.1. InputDecoration() const InputDecoration({ Widget icon, //位于装饰器外部和输入框前面的图片 String labelText, //用于描述输入框，例如这个输入框是用来输入用户名还是密码的，当输入框获取焦点时默认会浮动到上方， TextStyle labelStyle, // 控制labelText的样式,接收一个TextStyle类型的值 String helperText, //辅助文本，位于输入框下方，如果errorText不为空的话，则helperText不会显示 TextStyle helperStyle,//helperText的样式 String hintText, //提示文本，位于输入框内部 TextStyle hintStyle, //hintText的样式 String errorText, //错误信息提示 TextStyle errorStyle, //errorText的样式 int errorMaxLines, int helperMaxLines, int hintMaxLines, @Deprecated('Use floatingLabelBehaviour instead. ' 'This feature was deprecated after v1.13.2.') bool hasFloatingPlaceholder: true,//labelText是否浮动，默认为true，修改为false则labelText在输入框获取焦点时不会浮动且不显示 FloatingLabelBehavior floatingLabelBehavior: FloatingLabelBehavior.auto, bool isDense,//改变输入框是否为密集型，默认为false，修改为true时，图标及间距会变小 EdgeInsetsGeometry contentPadding,//内间距 Widget prefixIcon, //位于输入框内部起始位置的图标。 BoxConstraints prefixIconConstraints, Widget prefix,//预先填充的Widget,跟prefixText同时只能出现一个 String prefixText,//预填充的文本，例如手机号前面预先加上区号等 TextStyle prefixStyle,//prefixText的样式 Widget suffixIcon, //位于输入框后面的图片,例如一般输入框后面会有个眼睛，控制输入内容是否明文 Widget suffix, //位于输入框尾部的控件，同样的不能和suffixText同时使用 String suffixText, //位于尾部的填充文字 TextStyle suffixStyle,//suffixText的样式 BoxConstraints suffixIconConstraints, Widget counter, //位于输入框右下方的小控件，不能和counterText同时使用 String counterText, //位于右下方显示的文本，常用于显示输入的字符数量 TextStyle counterStyle, //counterText的样式 bool filled, //如果为true，则输入使用fillColor指定的颜色填充 Color fillColor, //相当于输入框的背景颜色 Color focusColor, Color hoverColor, InputBorder errorBorder,//errorText不为空，输入框没有焦点时要显示的边框 InputBorder focusedBorder,//输入框有焦点时的边框,如果errorText不为空的话，该属性无效 InputBorder focusedErrorBorder, //errorText不为空时，输入框有焦点时的边框 InputBorder disabledBorder, //输入框禁用时显示的边框，如果errorText不为空的话，该属性无效 InputBorder enabledBorder, //输入框可用时显示的边框，如果errorText不为空的话，该属性无效 InputBorder border, //正常情况下的border bool enabled: true, //输入框是否可用 String semanticCounterText, bool alignLabelWithHint }) 1.2. InputDecoration.collapsed() const InputDecoration.collapsed({ @required String hintText, @Deprecated('Use floatingLabelBehaviour instead. ' 'This feature was deprecated after v1.13.2.') bool hasFloatingPlaceholder: true, FloatingLabelBehavior floatingLabelBehavior: FloatingLabelBehavior.auto, TextStyle hintStyle, bool filled: false, Color fillColor, Color focusColor, Color hoverColor, InputBorder border: InputBorder.none, bool enabled: true }) 2. 示例 TextField( decoration: InputDecoration( icon: Icon(Icons.add), labelText: \"labelText\", helperText: \"helperText\", hintText: \"helperText\", errorText: \"errorText\", ), ) TextField( decoration: InputDecoration( icon: Icon(Icons.add), labelText: \"labelText\", helperText: \"helperText\", hintText: \"hintText\", errorText: \"errorText\", ), ) TextField( decoration: InputDecoration( icon: Icon(Icons.add), labelText: \"labelText\", helperText: \"helperText\", hintText: \"hintText\", // errorText: \"errorText\", ), ) TextField( controller: textEditingController, decoration: InputDecoration( prefixText: \"prefixText\", suffixText: \"suffixText\", ), ) TextField( controller: textEditingController, decoration: InputDecoration( prefixText: \"prefixText\", suffixText: \"suffixText\", contentPadding: EdgeInsets.all(15.0), ), ) TextField( controller: textEditingController, decoration: InputDecoration( fillColor: Colors.blue.shade100, filled: true, labelText: 'Hello', ), ) TextField( controller: textEditingController, decoration: InputDecoration( labelText: 'Hello', prefixIcon: Icon(Icons.phone), suffixIcon: Icon(Icons.offline_bolt), ), ) TextField( controller: textEditingController, decoration: InputDecoration( labelText: 'Hello', prefixIcon: Icon(Icons.phone), suffixIcon: Icon(Icons.offline_bolt), border: OutlineInputBorder( borderRadius: BorderRadius.circular(15.0), ), ), ) "},"widget/input/OutlineInputBorder.html":{"url":"widget/input/OutlineInputBorder.html","title":"OutlineInputBorder","keywords":"","body":"1. 构造函数2. 示例OutlineInputBorder Class 1. 构造函数 const OutlineInputBorder({ BorderSide borderSide: const BorderSide(), BorderRadius borderRadius: const BorderRadius.all(Radius.circular(4.0)), double gapPadding: 4.0 }) 2. 示例 TextField( controller: textEditingController, decoration: InputDecoration( labelText: 'Hello', prefixIcon: Icon(Icons.phone), suffixIcon: Icon(Icons.offline_bolt), border: OutlineInputBorder( borderRadius: BorderRadius.circular(15.0), ), ), ) "},"widget/input/UnderlineInputBorder.html":{"url":"widget/input/UnderlineInputBorder.html","title":"UnderlineInputBorder","keywords":"","body":"1. 构造函数UnderlineInputBorder Class 1. 构造函数 const UnderlineInputBorder({ BorderSide borderSide: const BorderSide(), BorderRadius borderRadius: const BorderRadius.only(topLeft: Radius.circular(4.0), topRight: Radius.circular(4.0)) }) "},"widget/input/TextEditingController.html":{"url":"widget/input/TextEditingController.html","title":"TextEditingController","keywords":"","body":"1. 构造函数1.1. TextEditingController1.1.1. TextEditingController()1.1.2. TextEditingController.fromValue()1.2. TextEditingValue2. 属性3. 方法4. 示例4.1. 添加监听 TextEditingController Class TextEditingValue Class 1. 构造函数 1.1. TextEditingController 1.1.1. TextEditingController() TextEditingController({ String text }) 1.1.2. TextEditingController.fromValue() TextEditingController.fromValue( TextEditingValue value ) 1.2. TextEditingValue TextEditingValue({ String text: '' TextSelection selection: const TextSelection.collapsed(offset: -1) TextRange composing: TextRange.empty }) TextEditingValue.fromJSON(Map encoded) 2. 属性 selection : 当前选中的文本。 text : 当前用户正在输入的文本。 value : 。 3. 方法 4. 示例 class _TextFieldExampleState extends State { @override Widget build(BuildContext context) { final TextEditingController textEditingController = TextEditingController(); textEditingController.addListener(() { print(textEditingController.text); }); return Scaffold( appBar: AppBar( title: Text(\"TextFieldExample\"), ), body: Column( children: [ TextField( controller: textEditingController, ], ), ); } } 4.1. 添加监听 TextEditingController _controller = TextEditingController(); _controller.addListener(() { print(_controller.text); }); "},"widget/Text/":{"url":"widget/Text/","title":"文本","keywords":"","body":"1. services2. material1. services TextEditingValue TextInput 并不是组件，而是Flutter与原生交互的服务，控制键盘的显示。TextField组件的TextInputAction属性通过此服务实现。 TextInputClient TextInputConfiguration TextInputConnection TextInputFormatter TextInputType TextPosition TextRange TextSelection TextSelectionDelegate TextureAndroidViewController LengthLimitingTextInputFormatter TextAffinity enum TextCapitalization enum TextInputAction enum 2. material RichText EditableText 是一个基本的文本输入组件，此组件和TextInput一起让用户编辑输入框的内容，提供滚动、选择、光标运动，但不提供焦点管理。通常情况下我们不会直至使用此组件，而是使用Material风格的TextField组件。 EditableTextState DefaultTextHeightBehavior TextHeightBehavior DefaultTextStyle 用于文本显示样式的一个控件 DefaultTextStyleTransition TextStyle属性动画 TextStyle TextStyleTween : Tween 解决了动画中 AnimationController 产生的数值的范围从 0.0 到 1.0 这样具有范围的数据，可以用 Tween 解决。 TextAlign 输入文本对齐方式 TextAlignVertical 垂直方向对齐方式 TextDirection 文本方向 TextDecoration 文本划线 TextDecorationStyle 文本划线的线样式 TextEditingController TextEditingValue TextField TextFormField Text TextBox TextInputType 键盘输入类型 TextSpan 处理富文本 RichText中内容的样式 TextPainter 绘制文字 TextPosition TextRange TextSelection 文本复制粘贴工具 TextSelectionControls TextSelectionDelegate TextSelectionGestureDetector TextSelectionGestureDetectorBuilder TextSelectionGestureDetectorBuilderDelegate TextSelectionOverlay TextTheme Texture TextAffinity TextBaseline TextCapitalization TextInputAction 是TextField用来实现 TextInput 功能的属性 TextOverflow TextSelectionHandleType TextWidthBasis "},"widget/Text/TextStyle.html":{"url":"widget/Text/TextStyle.html","title":"TextStyle","keywords":"","body":"1. 构造函数1.1. TextDecoration 划线1.2. TextDecorationStyle 线样式2. 示例 TextStyle class 1. 构造函数 TextStyle({ Color color, 颜色 TextDecoration decoration, 添加上划线，下划线，删除线 Color decorationColor, 划线的颜色 TextDecorationStyle decorationStyle, 这个style可能控制画实线，虚线，两条线，点, 波浪线等 double decorationThickness, FontWeight fontWeight, 字重，加粗也用这个字段 FontWeight.w700 FontStyle fontStyle,FontStyle.normal FontStyle.italic斜体 TextBaseline textBaseline, 基线，两个值，字面意思是一个用来排字母的，一人用来排表意字的（类似中文） String fontFamily, 字体 List fontFamilyFallback, double fontSize,字号 double letterSpacing, 字符间距 就是单个字母或者汉字之间的间隔，可以是负数 double wordSpacing, 字间距 句字之间的间距 double height, 当用来Text控件上时，行高（会乘以fontSize,所以不以设置过大） lineHeight = fontSize * height Locale locale, Paint background, Paint foreground, List shadows, List fontFeatures }) 1.1. TextDecoration 划线 1.2. TextDecorationStyle 线样式 enum TextDecorationStyle { solid, ///画一条直线 double, /// 画两条线 dotted, /// 画圆点虚线 dashed, /// 画破折号虚线 wavy /// 画波浪线 } 2. 示例 TypePageExample.dart import 'dart:ui'; import 'package:flutter/material.dart'; class TypePageExample extends StatelessWidget { final titleStyle = TextStyle( fontSize: 18, fontFeatures: [FontFeature.enable('smcp')], color: Colors.blueGrey[600], ); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"TextStyleExample\"), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ Spacer(flex: 5), Text('regular numbers have their place:', style: titleStyle), Text('The 1972 cup final was a 1-1 draw.', style: TextStyle( fontFamily: 'Cardo', fontSize: 24, )), Spacer(), Text('but old-style figures blend well with lower case:', style: titleStyle), Text('The 1972 cup final was a 1-1 draw.', style: TextStyle( fontFamily: 'Cardo', fontSize: 24, fontFeatures: [FontFeature.oldstyleFigures()])), Spacer(), Divider(), Spacer(), Text('fractions look better with a custom ligature:', style: titleStyle), Text('Add 1/2 tsp of flour and stir.', style: TextStyle( fontFamily: 'Milonga', fontSize: 24, fontFeatures: [FontFeature.enable('frac')])), Spacer(), Divider(), Spacer(), Text('multiple stylistic sets in one font:', style: titleStyle), Text('Raleway Dots', style: TextStyle(fontFamily: 'Raleway Dots', fontSize: 48)), Text('Raleway Dots', style: TextStyle( fontFeatures: [FontFeature.stylisticSet(1)], fontFamily: 'Raleway Dots', fontSize: 48, )), Spacer(flex: 5), ], ), ), ); } } "},"widget/Text/RichText.html":{"url":"widget/Text/RichText.html","title":"RichText","keywords":"","body":"1. 构造函数2. 资料RichText Class 1. 构造函数 RichText({ Key key, @required InlineSpan text, TextAlign textAlign: TextAlign.start, TextDirection textDirection, bool softWrap: true, TextOverflow overflow: TextOverflow.clip, double textScaleFactor: 1.0, int maxLines, Locale locale, StrutStyle strutStyle, TextWidthBasis textWidthBasis: TextWidthBasis.parent, TextHeightBehavior textHeightBehavior }) 2. 资料 如何低成本实现Flutter富文本，看这一篇就够了！ "},"widget/tab/":{"url":"widget/tab/","title":"Tab","keywords":"","body":" Tab TabBar TabBarTheme TabBarView TabController TabPageSelector TabPageSelectorIndicator "},"widget/tab/Tab.html":{"url":"widget/tab/Tab.html","title":"Tab(水平选项卡)","keywords":"","body":"1. 构造函数Tab Class 1. 构造函数 const Tab({ Key key, String text, // Tab图标 Widget icon, // Tab文本 EdgeInsetsGeometry iconMargin: const EdgeInsets.only(bottom: 10.0), Widget child }) "},"widget/tab/TabBar.html":{"url":"widget/tab/TabBar.html","title":"TabBar(水平选项卡)","keywords":"","body":"1. 构造函数2. 示例2.1.1. 示例2TabBar Class 1. 构造函数 const TabBar({ Key key, @required List tabs, // Tab选项列表，建议不要放太多项，否则用户操作起来不方便 TabController controller, // 如果 TabController 没有提供，那默认会使用 DefaultTabController bool isScrollable: false, // 是否可以水平移动 Color indicatorColor,//指示器颜色 double indicatorWeight: 2.0,//指示器高度 EdgeInsetsGeometry indicatorPadding: EdgeInsets.zero,//底部指示器的Padding Decoration indicator,//指示器decoration，例如边框等 TabBarIndicatorSize indicatorSize,//指示器大小计算方式 Color labelColor,//选中label颜色 TextStyle labelStyle,//选中label的Style EdgeInsetsGeometry labelPadding,//每个label的padding值 Color unselectedLabelColor,//未选中label颜色 TextStyle unselectedLabelStyle,//未选中label的Style DragStartBehavior dragStartBehavior: DragStartBehavior.start, ValueChanged onTap }) 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { // 选项卡 数据源 final List tabs = [ Tab(text: '选项卡 1',), Tab(text: '选项卡 2',), Tab(text: '选项卡 3',), ]; // 应用程序的主组件 @override Widget build(BuildContext context) { return new MaterialApp( home: DefaultTabController( child: new Scaffold( appBar: new AppBar( // 添加导航栏 bottom: TabBar(tabs: tabs), ), body: TabBarView(children: tabs.map((Tab tab){ return Center( child: Text(tab.text), ); }).toList()), ), length: tabs.length,), ); } } 实现一个完整示例： import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( // DefaultTabController：关联 TabBar 和 TabBarView home: DefaultTabController( child: new Scaffold( appBar: new AppBar( bottom: TabBar( // 设置可滚动 isScrollable: true, tabs: items.map((ItemView item) { return Tab( text: item.title, icon: new Icon(item.icon), ); }).toList(), ), ), body: new TabBarView( children: items.map((ItemView item) { return new Padding( padding: const EdgeInsets.all(16.0), child: new SelectedView(item: item), ); }).toList()), ), length: items.length, ), ); } } // 选项卡数据结构 class ItemView { // 构造函数 const ItemView({this.title, this.icon}); final String title; final IconData icon; } // 选项卡数据源 const List items = [ const ItemView(title: '自驾', icon: Icons.directions_car), const ItemView(title: '自行车', icon: Icons.directions_bike), const ItemView(title: '轮船', icon: Icons.directions_boat), const ItemView(title: '公交车', icon: Icons.directions_bus), const ItemView(title: '火车', icon: Icons.directions_railway), const ItemView(title: '步行', icon: Icons.directions_walk), ]; // 被选中的视图->被装载在 TabBarView 里面 class SelectedView extends StatelessWidget { const SelectedView({Key key, this.item}) : super(key: key); final ItemView item; @override Widget build(BuildContext context) { final TextStyle textStyle = Theme.of(context).textTheme.display1; return new Card( color: Colors.white, child: new Center( child: new Column( mainAxisSize: MainAxisSize.min, // 垂直方向最小化处理 crossAxisAlignment: CrossAxisAlignment.center, //水平方向居中对齐 children: [ new Icon( item.icon, size: 128.0, color: textStyle.color, ), new Text( item.title, style: textStyle, ) ], ), ), ); } } 2.1.1. 示例2 class _AppBarExample01State extends State with SingleTickerProviderStateMixin { TabController _tabController; List tabs = []; @override void initState() { tabs = [ Tab(text: \"Tab1\"), Tab(text: \"Tab2\"), Tab(text: \"Tab3\"), Tab(text: \"Tab4\"), Tab(text: \"Tab5\"), Tab(text: \"Tab6\"), Tab(text: \"Tab7\"), Tab(text: \"Tab8\"), Tab( text: \"Tab9\", icon: Icon(Icons.phone), ) ]; _tabController = TabController(initialIndex: 2, length: tabs.length, vsync: this); super.initState(); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"AppBarExample02\"), bottom: TabBar( tabs: tabs, controller: _tabController, isScrollable: true, ), ), body: TabBarView( children: tabs .map((Tab tab) => Container( child: Center( child: Text(tab.text), ), )) .toList(), controller: _tabController, ), ); } @override void dispose() { _tabController.dispose(); super.dispose(); } } "},"widget/tab/TabBarView.html":{"url":"widget/tab/TabBarView.html","title":"TabBarView","keywords":"","body":"1. 构造函数TabBarView Class 1. 构造函数 const TabBarView({ Key key, @required List children, TabController controller, // 如果 TabController 没有提供，那默认会使用 DefaultTabController ScrollPhysics physics, // // 列表滚动至边缘后继续拖动的物理效果，Android与iOS效果不同。 DragStartBehavior dragStartBehavior: DragStartBehavior.start }) 使用 TabBarView 是有条件要求的，TabBarView 的父 Widget 必须知道宽高才能布局，但是一般我们在实际项目使用的时候又不会写死宽高，因此一般我都会在一个 Expanded 中使用 TabBarView。 "},"widget/tab/TabController.html":{"url":"widget/tab/TabController.html","title":"TabController","keywords":"","body":"1. 构造函数TabController Class 1. 构造函数 TabController({ int initialIndex: 0, @required int length, @required TickerProvider vsync }) "},"widget/table/":{"url":"widget/table/","title":"Table","keywords":"","body":" Table TableRow TableColumnWidth FixedColumnWidth FlexColumnWidth FractionColumnWidth IntrinsicColumnWidth MaxColumnWidth MinColumnWidth TableBorder TableCellVerticalAlignment TableCell DataTable DataColumn DataRow DataCell DataTableSource PaginatedDataTable PaginatedDataTableState "},"widget/table/Table.html":{"url":"widget/table/Table.html","title":"Table","keywords":"","body":"1. 构造函数1.1. Table1.2. TableRow1.3. TableBorder1.4. TableCell1.5. TableColumnWidth2. 示例 TableRow TableColumnWidth FixedColumnWidth FlexColumnWidth FractionColumnWidth IntrinsicColumnWidth MaxColumnWidth MinColumnWidth TableBorder TableCellVerticalAlignment TableCell TableRowInkWell 1. 构造函数 1.1. Table Table({ Key key, List children: const [], Map columnWidths, TableColumnWidth defaultColumnWidth: const FlexColumnWidth(1.0), TextDirection textDirection, TableBorder border, TableCellVerticalAlignment defaultVerticalAlignment: TableCellVerticalAlignment.top, TextBaseline textBaseline: TextBaseline.alphabetic }) 1.2. TableRow TableRow({LocalKey key, Decoration decoration, List children }) 1.3. TableBorder TableBorder({ BorderSide top: BorderSide.none, BorderSide right: BorderSide.none, BorderSide bottom: BorderSide.none, BorderSide left: BorderSide.none, BorderSide horizontalInside: BorderSide.none, BorderSide verticalInside: BorderSide.none }) TableBorder.all({ Color color: const Color(0xFF000000), double width: 1.0, BorderStyle style: BorderStyle.solid }) TableBorder.symmetric({ BorderSide inside: BorderSide.none, BorderSide outside: BorderSide.none }) 1.4. TableCell TableCell({ Key key, TableCellVerticalAlignment verticalAlignment, @required Widget child }) 1.5. TableColumnWidth TableColumnWidth() FixedColumnWidth(double value) FlexColumnWidth([double value = 1.0]) FractionColumnWidth(double value) IntrinsicColumnWidth({double flex}) MaxColumnWidth(TableColumnWidth a, TableColumnWidth b) MinColumnWidth(TableColumnWidth a, TableColumnWidth b) 2. 示例 @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"刷新\"), ), body: Table( border: new TableBorder.all(width: 1.0, color: Colors.purpleAccent), children: [ TableRow( children: [ TableCell(child: Center(child: Text(\"data1\"))), TableCell(child: Center(child: Text(\"data1\"))), TableCell(child: Center(child: Text(\"data1\"))), ], ), TableRow( children: [ TableCell(child: Center(child: Text(\"data1\"))), TableCell(child: Center(child: Text(\"data1\"))), TableCell(child: Center(child: Text(\"data1\"))), ], ), ], ), ); } "},"widget/table/DataTable.html":{"url":"widget/table/DataTable.html","title":"DataTable","keywords":"","body":"1. 构造函数1.1. DataTable1.2. DataColumn1.3. DataRow1.4. DataCell2. 示例2.1. 排序2.2. 列居右3. 其他3.1. PaginatedDataTable4. Table4.1. DataTable4.2. SingleChildScrollView4.3. PaginatedDataTable DataTable DataColumn DataRow DataCell 1. 构造函数 1.1. DataTable DataTable({ Key key, @required List columns, @required List rows int sortColumnIndex, 表格显示排序图标的索引 bool sortAscending: true, 参数表示升序或者降序 ValueSetter onSelectAll, bool showCheckboxColumn: true, double dataRowHeight: kMinInteractiveDimension, double headingRowHeight: 56.0, double horizontalMargin: 24.0, double columnSpacing: 56.0, double dividerThickness: 1.0, }) 1.2. DataColumn DataColumn({ @required Widget label, String tooltip, bool numeric: false, 默认情况下数据是左对齐的，让某一列右对齐只需设置DataColumn中numeric参数true DataColumnSortCallback onSort }) 1.3. DataRow DataRow({ LocalKey key, @required List cells bool selected: false, ValueChanged onSelectChanged, MaterialStateProperty color, }) DataRow.byIndex({ @required List cells int index, bool selected: false, ValueChanged onSelectChanged, MaterialStateProperty color, }) 1.4. DataCell DataCell(Widget child, { bool placeholder: false, bool showEditIcon: false, VoidCallback onTap }) 2. 示例 @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Demo\"), ), body: DataTable( columns: [ DataColumn(label: Text(\"Column1\")), DataColumn(label: Text(\"Column2\")), ], rows: [ DataRow( selected: true, onSelectChanged: (isSelected) {}, cells: [ DataCell( Container( child: Text(\"Cell1\"), ), ), DataCell( Container( child: Text(\"Cell2\"), ), ), ], ), DataRow( cells: [ DataCell( Container( child: Text(\"Cell1\"), ), ), DataCell( Container( child: Text(\"Cell2\"), ), showEditIcon: true, onTap: () { print(\"object\"); }, ), ], ), ], ), ); } 2.1. 排序 DataTable( sortAscending: true, sortColumnIndex: 0, columns: [ DataColumn( label: Text(\"Column1\"), onSort: (index, sort) { print(\"$index, $sort\"); }), DataColumn(label: Text(\"Column2\")), ], rows: [ DataRow( cells: [ DataCell(Container(child: Text(\"Cell1\"))), DataCell(Container(child: Text(\"Cell2\"))), ], ), DataRow( cells: [ DataCell(Container(child: Text(\"Cell1\"))), DataCell(Container(child: Text(\"Cell2\"))), ], ), ], ) 2.2. 列居右 DataTable( columns: [ DataColumn(label: Text(\"Column1\")), DataColumn(label: Text(\"Column2\"), numeric: true), ] ... ), 3. 其他 示例 import 'package:flutter/material.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', home: MainPage(), ); } } class MainPage extends StatefulWidget { @override _MainPage createState() => new _MainPage(); } class _MainPage extends State { List columnsTitles = List.generate(3, (index) { return DataColumn( numeric: true, label: Text(\"COL$index\", style: TextStyle(fontStyle: FontStyle.italic)), ); }); List rows = List.generate(20, (index) { return DataRow( selected: index == 2 ? true : false, onSelectChanged: (bool value){ print('object-$index'); }, cells: [ DataCell(Text('co1-$index'),showEditIcon: true), DataCell(Text('co2-$index'),showEditIcon: true), DataCell(Text('co3-$index'),showEditIcon: true), ], ); }); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Demo\"), ), body: DataTable( columns: [ DataColumn( // numeric: true, label: Text( \"COL1\", style: TextStyle(fontStyle: FontStyle.italic), ), tooltip: \"Column Tips\" ), DataColumn( // numeric: true, label: Text( \"COL22\", style: TextStyle(fontStyle: FontStyle.italic), ), ), DataColumn( numeric: true, label: Text( \"COL3\", style: TextStyle(fontStyle: FontStyle.italic), ), ), ], rows: rows, ), ); } } 3.1. PaginatedDataTable PaginatedDataTable({ Key key, @required this.header,//表头 this.actions, @required this.columns, this.sortColumnIndex, this.sortAscending = true, this.onSelectAll, this.dataRowHeight = kMinInteractiveDimension, this.headingRowHeight = 56.0, this.horizontalMargin = 24.0, this.columnSpacing = 56.0, this.showCheckboxColumn = true, this.initialFirstRowIndex = 0, this.onPageChanged, this.rowsPerPage = defaultRowsPerPage, this.availableRowsPerPage = const [defaultRowsPerPage, defaultRowsPerPage * 2, defaultRowsPerPage * 5, defaultRowsPerPage * 10], this.onRowsPerPageChanged, this.dragStartBehavior = DragStartBehavior.start, @required this.source, }); 4. Table Table (Flutter Widget of the Week) Table Class 4.1. DataTable DataTable (Flutter Widget of the Week) CodePen-DataTable,搭配视频讲解看 4.2. SingleChildScrollView SingleChildScrollView-DataTable 4.3. PaginatedDataTable "},"widget/list/":{"url":"widget/list/","title":"List","keywords":"","body":" ListBody ListTile ListTileTheme ListView ListWheelChildDelegate ListWheelChildBuilderDelegate ListWheelChildListDelegate ListWheelChildLoopingListDelegate ListWheelElement ListWheelScrollView ListWheelViewport "},"widget/list/ListView.html":{"url":"widget/list/ListView.html","title":"ListView","keywords":"","body":"1. 构造函数1.1. ListView1.2. ListView.builder1.3. ListView.custom1.4. ListView.separated2. 示例2.1. 分割线ListView Class 1. 构造函数 1.1. ListView ListView({ Key key, List children: const [], double itemExtent, // 子元素长度。当列表中的每一项长度是固定的情况下可以指定该值，有助于提高列表的性能 double cacheExtent, // 预渲染区域长度 int semanticChildCount, bool shrinkWrap: false, // 决定列表的长度是否仅包裹其内容的长度。当ListView嵌在一个无限长的容器组件中时，shrinkWrap必须为true，否则Flutter会给出警告 bool primary, bool reverse: false, bool addAutomaticKeepAlives: true, bool addRepaintBoundaries: true, bool addSemanticIndexes: true, DragStartBehavior dragStartBehavior: DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.manual EdgeInsetsGeometry padding, // 列表内边距 Axis scrollDirection: Axis.vertical, // 列表的滚动方向 ScrollController controller, // 控制器，与列表滚动相关，比如监听列表的滚动事件 ScrollPhysics physics, // 列表滚动至边缘后继续拖动的物理效果，Android与iOS效果不同。 }) 1.2. ListView.builder // 数据量很多的时候使用 builder 构建。 ListView.builder({ Key key, @required IndexedWidgetBuilder itemBuilder, // 子元素渲染构造器 Axis scrollDirection: Axis.vertical, ScrollController controller, ScrollPhysics physics, EdgeInsetsGeometry padding, DragStartBehavior dragStartBehavior: DragStartBehavior.start double itemExtent, double cacheExtent, int itemCount, // 列表中元素的数量 int semanticChildCount, bool reverse: false, bool primary, bool shrinkWrap: false, bool addAutomaticKeepAlives: true, bool addRepaintBoundaries: true, bool addSemanticIndexes: true, }) 1.3. ListView.custom ListView.custom({ Key key, @required SliverChildDelegate childrenDelegate, bool reverse: false, bool primary, bool shrinkWrap: false, double itemExtent, double cacheExtent, int semanticChildCount Axis scrollDirection: Axis.vertical, ScrollController controller, ScrollPhysics physics, EdgeInsetsGeometry padding, }) 1.4. ListView.separated // 展示列表分割线 ListView.separated({ Key key, @required IndexedWidgetBuilder itemBuilder, @required IndexedWidgetBuilder separatorBuilder, // 分割线渲染构造器 @required int itemCount, bool reverse: false, bool primary, bool addAutomaticKeepAlives: true, bool addRepaintBoundaries: true, bool shrinkWrap: false, bool addSemanticIndexes: true, double cacheExtent, Axis scrollDirection: Axis.vertical, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.manual ScrollController controller, ScrollPhysics physics, EdgeInsetsGeometry padding, }) 2. 示例 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { final List list = [ new ListTile( title: Text('titletitletitletitletitletitletitletitletitletitletitletitletitletitle',style: new TextStyle(fontWeight: FontWeight.w400,fontSize: 18.0),), subtitle: Text('Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test '), leading: Icon(Icons.fastfood,color: Colors.blue,), ), new ListTile( title: Text('data',style: new TextStyle(fontWeight: FontWeight.w400,fontSize: 18.0),), subtitle: Text('data'), leading: Icon(Icons.fastfood,color: Colors.blue,), ), ]; @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Center( child: new ListView( children: list, ) ), ), ); } } 2.1. 分割线 @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"刷新\"), ), body: ListView.separated( itemBuilder: (_, index) { return Container( height: 50, child: Center(child: Text(\"data-$index\")), ); }, separatorBuilder: (_, index) { return Divider( height: .5, //indent: 75, color: Color(0xFFDDDDDD), ); }, itemCount: 20, ), ); } "},"widget/list/ListBody.html":{"url":"widget/list/ListBody.html","title":"ListBody","keywords":"","body":"1. 构造函数ListBody-class 1. 构造函数 ListBody({ Key key, Axis mainAxis: Axis.vertical, bool reverse: false, List children: const [] }) ListBody必须在一个有强制范围的容器中使用，一般很少直接使用都是通过ListView和Column搭配使用。 "},"widget/list/ListWheelScrollView.html":{"url":"widget/list/ListWheelScrollView.html","title":"ListWheelScrollView(滚筒)","keywords":"","body":"1. 构造函数2. 示例ListWheelScrollView-class 1. 构造函数 ListWheelScrollView({ Key key, @required double itemExtent, 指定每一个Item的高度 @required List children ScrollController controller, ScrollPhysics physics, Clip clipBehavior: Clip.hardEdge, double diameterRatio: RenderListWheelViewport.defaultDiameterRatio, double perspective: RenderListWheelViewport.defaultPerspective, double offAxisFraction: 0.0, double magnification: 1.0, double overAndUnderCenterOpacity: 1.0, double squeeze: 1.0, ValueChanged onSelectedItemChanged, bool useMagnifier: false, bool renderChildrenOutsideViewport: false, }) ListWheelScrollView.useDelegate({ Key key, @required double itemExtent, @required ListWheelChildDelegate childDelegate ScrollController controller, ScrollPhysics physics, Clip clipBehavior: Clip.hardEdge, double diameterRatio: RenderListWheelViewport.defaultDiameterRatio, 设置滚轮的直径距离，diameterRatio越小表示圆筒越圆,默认值是2 double perspective: RenderListWheelViewport.defaultPerspective, double offAxisFraction: 0.0, double overAndUnderCenterOpacity: 1.0, double squeeze: 1.0, ValueChanged onSelectedItemChanged, bool renderChildrenOutsideViewport: false, double magnification: 1.0, // 放大倍数 bool useMagnifier: false, // 是否启动放大镜 }) 2. 示例 @override Widget build(BuildContext context) { return Scaffold( body: ListWheelScrollView.useDelegate( itemExtent: 150, childDelegate: ListWheelChildBuilderDelegate( builder: (_, index) { return Container( color: Colors.primaries[index % 10], child: Center(child: Text(\"Index $index\")), ); }, childCount: 20, ), ), ); } "},"widget/list/ListWheelChildDelegate.html":{"url":"widget/list/ListWheelChildDelegate.html","title":"ListWheelChildDelegate","keywords":"","body":"1. ListWheelChildDelegate2. ListWheelChildBuilderDelegate3. ListWheelChildListDelegate4. ListWheelChildLoopingListDelegate ListWheelChildDelegate ListWheelChildBuilderDelegate ListWheelChildListDelegate ListWheelChildLoopingListDelegate 1. ListWheelChildDelegate 2. ListWheelChildBuilderDelegate ListWheelChildBuilderDelegate({ @required IndexedWidgetBuilder builder, int childCount }) 3. ListWheelChildListDelegate ListWheelChildListDelegate({@required List children}) 4. ListWheelChildLoopingListDelegate ListWheelChildLoopingListDelegate({@required List children}) "},"widget/scroll/":{"url":"widget/scroll/","title":"Scroll","keywords":"","body":"1. List NestedScrollView NestedScrollViewState NestedScrollViewViewport RenderNestedScrollViewViewport SingleChildScrollView ScrollView BoxScrollView CustomScrollView 和sliver 搭配使用的容器。 ScrollEndNotification OverscrollIndicatorNotification OverscrollNotification ScrollNotification ScrollStartNotification ScrollUpdateNotification UserScrollNotification DraggableScrollableNotification ScrollPhysics AlwaysScrollableScrollPhysics BouncingScrollPhysics ClampingScrollPhysics FixedExtentScrollPhysics NeverScrollableScrollPhysics PageScrollPhysics RangeMaintainingScrollPhysics ScrollActivityDelegate ScrollActivity DragScrollActivity BallisticScrollActivity DrivenScrollActivity HoldScrollActivity IdleScrollActivity ScrollController FixedExtentScrollController PageController TrackingScrollController ScrollDragController ScrollHoldController PrimaryScrollController ScrollPositionWithSingleContext Scrollable ScrollableState ScrollAction ScrollAwareImageProvider ScrollbarPainter ScrollBehavior ScrollConfiguration ScrollContext ScrollIncrementDetails ScrollIntent ScrollSpringSimulation BouncingScrollSimulation ClampingScrollSimulation DraggableScrollableActuator DraggableScrollableSheet 1. List ListView ListWheelScrollView 功能类似ListView 但是效果是滚筒效果。 ListWheelChildDelegate ListWheelChildBuilderDelegate ListWheelChildListDelegate ListWheelChildLoopingListDelegate "},"widget/scroll/SingleChildScrollView.html":{"url":"widget/scroll/SingleChildScrollView.html","title":"SingleChildScrollView","keywords":"","body":"1. 构造函数1.1. SingleChildScrollView1.2. ScrollController SingleChildScrollView Class ScrollController Class 1. 构造函数 1.1. SingleChildScrollView const SingleChildScrollView({ Key key, Axis scrollDirection: Axis.vertical, bool reverse: false, EdgeInsetsGeometry padding, bool primary, ScrollPhysics physics, ScrollController controller, Widget child, DragStartBehavior dragStartBehavior: DragStartBehavior.start, Clip clipBehavior: Clip.hardEdge }) 1.2. ScrollController ScrollController({ double initialScrollOffset: 0.0, bool keepScrollOffset: true, String debugLabel }) "},"widget/scroll/CustomScrollView.html":{"url":"widget/scroll/CustomScrollView.html","title":"CustomScrollView","keywords":"","body":"1. 构造函数CustomScrollView Class 1. 构造函数 const CustomScrollView({ Key key, Axis scrollDirection: Axis.vertical, bool reverse: false, ScrollController controller, bool primary, ScrollPhysics physics, bool shrinkWrap: false, Key center, double anchor: 0.0, double cacheExtent, List slivers: const [], int semanticChildCount, DragStartBehavior dragStartBehavior: DragStartBehavior.start }) "},"widget/scroll/PageView.html":{"url":"widget/scroll/PageView.html","title":"PageView","keywords":"","body":"1. 构造函数PageView Class 1. 构造函数 PageView({ Key key, Axis scrollDirection: Axis.horizontal, bool reverse: false, PageController controller, ScrollPhysics physics, bool pageSnapping: true, ValueChanged onPageChanged, List children: const [], DragStartBehavior dragStartBehavior: DragStartBehavior.start, bool allowImplicitScrolling: false }) PageView.builder({ Key key, Axis scrollDirection: Axis.horizontal, bool reverse: false, PageController controller, ScrollPhysics physics, bool pageSnapping: true, ValueChanged onPageChanged, @required IndexedWidgetBuilder itemBuilder, int itemCount, DragStartBehavior dragStartBehavior: DragStartBehavior.start, bool allowImplicitScrolling: false }) PageView.custom({ Key key, Axis scrollDirection: Axis.horizontal, bool reverse: false, PageController controller, ScrollPhysics physics, bool pageSnapping: true, ValueChanged onPageChanged, @required SliverChildDelegate childrenDelegate, DragStartBehavior dragStartBehavior: DragStartBehavior.start, bool allowImplicitScrolling: false }) "},"widget/scroll/PageController.html":{"url":"widget/scroll/PageController.html","title":"PageController","keywords":"","body":"1. 构造函数PageController Class 1. 构造函数 PageController({ int initialPage: 0, bool keepPage: true, double viewportFraction: 1.0 }) "},"widget/scroll/GridView.html":{"url":"widget/scroll/GridView.html","title":"GridView(网格列表)","keywords":"","body":"1. 构造函数2. 示例3. GridView(网格列表布局)GridView Class 1. 构造函数 GridView({ Key key, Axis scrollDirection: Axis.vertical, bool reverse: false, ScrollController controller, bool primary, ScrollPhysics physics, bool shrinkWrap: false, EdgeInsetsGeometry padding, @required SliverGridDelegate gridDelegate, // 布局代理 bool addAutomaticKeepAlives: true, bool addRepaintBoundaries: true, bool addSemanticIndexes: true, double cacheExtent, List children: const [], int semanticChildCount, DragStartBehavior dragStartBehavior: DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.manual }) GridView.builder({ Key key, Axis scrollDirection: Axis.vertical, bool reverse: false, ScrollController controller, bool primary, ScrollPhysics physics, bool shrinkWrap: false, EdgeInsetsGeometry padding, @required SliverGridDelegate gridDelegate, @required IndexedWidgetBuilder itemBuilder, int itemCount, bool addAutomaticKeepAlives: true, bool addRepaintBoundaries: true, bool addSemanticIndexes: true, double cacheExtent, int semanticChildCount, DragStartBehavior dragStartBehavior: DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.manual }) GridView.count({ Key key, Axis scrollDirection: Axis.vertical, bool reverse: false, ScrollController controller, bool primary, ScrollPhysics physics, bool shrinkWrap: false, EdgeInsetsGeometry padding, @required int crossAxisCount, double mainAxisSpacing: 0.0, double crossAxisSpacing: 0.0, double childAspectRatio: 1.0, bool addAutomaticKeepAlives: true, bool addRepaintBoundaries: true, bool addSemanticIndexes: true, double cacheExtent, List children: const [], int semanticChildCount, DragStartBehavior dragStartBehavior: DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.manual }) GridView.custom({ Key key, Axis scrollDirection: Axis.vertical, bool reverse: false, ScrollController controller, bool primary, ScrollPhysics physics, bool shrinkWrap: false, EdgeInsetsGeometry padding, @required SliverGridDelegate gridDelegate, @required SliverChildDelegate childrenDelegate, double cacheExtent, int semanticChildCount, DragStartBehavior dragStartBehavior: DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.manual }) GridView.extent({ Key key, Axis scrollDirection: Axis.vertical, bool reverse: false, ScrollController controller, bool primary, ScrollPhysics physics, bool shrinkWrap: false, EdgeInsetsGeometry padding, @required double maxCrossAxisExtent, double mainAxisSpacing: 0.0, double crossAxisSpacing: 0.0, double childAspectRatio: 1.0, bool addAutomaticKeepAlives: true, bool addRepaintBoundaries: true, bool addSemanticIndexes: true, List children: const [], int semanticChildCount, DragStartBehavior dragStartBehavior: DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.manual }) 2. 示例 Widget gridViewItem(GridItemModel itemModel) { return Column( children: [ Image.asset(itemModel.pic), Text(itemModel.name), ], ); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('GridviewExample'), ), body: GridView.count( crossAxisCount: 5, children: list.map((GridItemModel e) { return gridViewItem(e); }).toList(), ), ); } } flutter: The overflowing RenderFlex has an orientation of Axis.vertical. flutter: The edge of the RenderFlex that is overflowing has been marked in the rendering with a yellow and flutter: black striped pattern. This is usually caused by the contents being too big for the RenderFlex. flutter: Consider applying a flex factor (e.g. using an Expanded widget) to force the children of the flutter: RenderFlex to fit within the available space instead of being sized to their natural size. flutter: This is considered an error condition because it indicates that there is content that cannot be flutter: seen. If the content is legitimately bigger than the available space, consider clipping it with a flutter: ClipRect widget before putting it in the flex, or using a scrollable container rather than a Flex, flutter: like a ListView. flutter: The specific RenderFlex in question is: RenderFlex#7b07d OVERFLOWING: flutter: creator: Column ← RepaintBoundary ← IndexedSemantics ← NotificationListener ← flutter: KeepAlive ← AutomaticKeepAlive ← KeyedSubtree ← SliverGrid ← MediaQuery ← SliverPadding ← Viewport flutter: ← IgnorePointer-[GlobalKey#b6ba6] ← ⋯ flutter: parentData: (can use size) flutter: constraints: BoxConstraints(w=75.0, h=75.0) flutter: size: Size(75.0, 75.0) flutter: direction: vertical flutter: mainAxisAlignment: start flutter: mainAxisSize: max flutter: crossAxisAlignment: center flutter: verticalDirection: down flutter: ◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤◢◤ flutter: ════════════════════════════════════════════════════════════════════════════════════════════════════ flutter: Another exception was thrown: A RenderFlex overflowed by 2.0 pixels on the bottom. flutter: Another exception was thrown: A RenderFlex overflowed by 19 pixels on the bottom. flutter: Another exception was thrown: A RenderFlex overflowed by 19 pixels on the bottom. flutter: Another exception was thrown: A RenderFlex overflowed by 19 pixels on the bottom. flutter: Another exception was thrown: A RenderFlex overflowed by 2.0 pixels on the bottom. flutter: Another exception was thrown: A RenderFlex overflowed by 19 pixels on the bottom. 可以看到布局报错，GridView中child内的布局超过了规定约束的大小。 3. GridView(网格列表布局) 网格列表组件(GridView)：克实现多行多列的应用场景。 GridView.count： 允许你制定列的数量。 GridView.extent： 允许你制定单元格的最大宽度。 属性 类型 默认值 说明 scrollDirection reverse controller primary bool 是否是与父节点的PrimaryScrollController所关联的主滚动视图 physics shrinkWrap padding gridDelegate SliverGridDelegate 控制GridView中节点布局的delegate cacheExtent import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { List widgets = new List.generate(20, (i) => new Text('data')); return MaterialApp( home: new Scaffold( appBar: new AppBar( title: new Text('Bar title'), ), body: new GridView.count( crossAxisCount: 3,// 一行上放三列数据 primary: false, padding: const EdgeInsets.all(20.0), crossAxisSpacing: 30.0, children: widgets, ), ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { List _buildGridTitleList(int count) { return new List.generate(count, (int index) { return new Container( child: new Image.asset('icons/code.png',), ); }); } Widget buildGrid() { return new GridView.extent( maxCrossAxisExtent: 150.0, // 次轴最大宽度 padding: const EdgeInsets.all(4.0), mainAxisSpacing: 4.0, // 主轴间隙 crossAxisSpacing: 4.0, // 次轴间隙 children: _buildGridTitleList(9), ); } return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Center( child: buildGrid(), ), ), ); } } "},"widget/scroll/ScrollPhysics.html":{"url":"widget/scroll/ScrollPhysics.html","title":"ScrollPhysics","keywords":"","body":" ScrollPhysics Class AlwaysScrollableScrollPhysics BouncingScrollPhysics ClampingScrollPhysics FixedExtentScrollPhysics NeverScrollableScrollPhysics PageScrollPhysics RangeMaintainingScrollPhysics "},"widget/scroll/NestedScrollView.html":{"url":"widget/scroll/NestedScrollView.html","title":"NestedScrollView","keywords":"","body":"1. 构造函数2. 示例NestedScrollView 1. 构造函数 const NestedScrollView({ Key key, ScrollController controller, Axis scrollDirection: Axis.vertical, bool reverse: false, ScrollPhysics physics, @required NestedScrollViewHeaderSliversBuilder headerSliverBuilder, @required Widget body, DragStartBehavior dragStartBehavior: DragStartBehavior.start, bool floatHeaderSlivers: false, Clip clipBehavior: Clip.hardEdge }) 2. 示例 @override Widget build(BuildContext context) { return Scaffold( body: NestedScrollView( headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) { return [ SliverAppBar( elevation: 0.0, expandedHeight: 230, flexibleSpace: FlexibleSpaceBar( background: Image.network( 'http://img1.mukewang.com/5c18cf540001ac8206000338.jpg', fit: BoxFit.fitHeight, ), ), ), ]; }, body: ListView.builder( itemBuilder: (_, index) { return Container( height: 80, child: Center(child: Text(\"Index$index\")), color: Colors.primaries[index % Colors.primaries.length], ); }, itemCount: 20, ), ), ); } "},"widget/scroll/ScrollController.html":{"url":"widget/scroll/ScrollController.html","title":"ScrollController","keywords":"","body":"1. 构造函数2. 属性 ScrollController FixedExtentScrollController PageController TrackingScrollController 1. 构造函数 ScrollController({ double initialScrollOffset: 0.0, //初始化滑动距离 bool keepScrollOffset: true, //是否保存滑动距离 String debugLabel }) 2. 属性 ScrollPosition position; "},"widget/sliver/":{"url":"widget/sliver/","title":"Sliver","keywords":"","body":" SliverSafeArea: SliverSafeArea的功能和SafeArea是一样的，区别就是SliverSafeArea用于Sliver控件 SliverAppBar: SliverAppBar控件可以实现页面头部区域展开、折叠的效果 SliverAnimatedList: 动画 SliverAnimatedListState: 动画 SliverAnimatedOpacity: 动画 SliverFadeTransition: 动画 SliverMultiBoxAdaptorElement: SliverWithKeepAliveWidget: SliverMultiBoxAdaptorWidget: SliverGrid: 要同时滚动ListView和GridView的时候可以使用SliverList和SliverGrid。 SliverList: 要同时滚动ListView和GridView的时候可以使用SliverList和SliverGrid。 SliverFixedExtentList: 和SliverList用法一样，唯一的区别就是SliverFixedExtentList是固定子控件的高度的，SliverFixedExtentList比SliverList更加高效 SliverPrototypeExtentList: SliverList用法一样，区别是SliverPrototypeExtentList的高度由prototypeItem控件决定。 SliverOverlapAbsorber: SliverOverlapAbsorberHandle: SliverOverlapInjector: SliverToBoxAdapter: 使用CustomScrollView创建自定义滚动效果的时候，CustomScrollView只能包含sliver系列组件，如果包含普通的组件如何处理？使用SliverToBoxAdapter包裹。 SliverFillRemaining: 是sliver系列组件之一，此组件充满视口剩余空间，通常用于最后一个sliver组件，以便于没有任何剩余控件。 SliverFillViewport: SliverFillViewport生成的每一个item都占满全屏， SliverPadding: SliverPadding 组件是sliver系列的Padding组件，配合CustomScrollView使用。 比如给CustomScrollView中SliverList添加内边距： SliverOffstage: SliverOpacity: SliverOpacity是sliver系列组件，子控件为sliver组件，可设置子组件透明度， SliverIgnorePointer: SliverVisibility: SliverPersistentHeader: 控件当滚动到边缘时根据滚动的距离缩小高度，有点类似 SliverAppBar 的背景效果。 SliverPersistentHeaderDelegate: SliverLayoutWidgetBuilder: SliverLayoutBuilder: 根据组件的约束条件提供子组件 SliverChildDelegate: SliverChildBuilderDelegate: SliverChildListDelegate: SliverGridDelegate: SliverGridDelegateWithFixedCrossAxisCount: SliverGridDelegateWithMaxCrossAxisExtent: "},"widget/sliver/SliverAppBar.html":{"url":"widget/sliver/SliverAppBar.html","title":"SliverAppBar","keywords":"","body":"1. 构造函数1.1. pinned 属性控制1.2. 展示阴影1.3. 添加滑动标题1.4. 添加背景图SliverAppBar Class 1. 构造函数 const SliverAppBar({ Key key, Widget leading, 左侧控件，通常情况下为\"返回\"图标 Widget title, 标题，通常为Text控件 List actions, 右侧控件 PreferredSizeWidget bottom, 底部控件 bool forceElevated: false, //是否显示阴影 double elevation, 阴影 double titleSpacing: NavigationToolbar.kMiddleSpacing, //标题横向间距 double stretchTriggerOffset: 100.0, bool automaticallyImplyLeading: true, //没有leading为true的时候，默认返回箭头 bool primary: true, //是否显示在状态栏的下面,false就会占领状态栏的高度 bool centerTitle, 标题是否在中间 bool excludeHeaderSemantics: false, Color backgroundColor, 背景颜色 Brightness brightness, //状态栏主题，默认Brightness.dark，可选参数light AsyncCallback onStretchTrigger, ShapeBorder shape, IconThemeData iconTheme, IconThemeData actionsIconTheme, TextTheme textTheme, Widget flexibleSpace, 是SliverAppBar中展开和折叠区域 double expandedHeight, 是表示flexibleSpace的高度 bool floating: false, 设置为true时，向下滑动时，即使当前CustomScrollView不在顶部，SliverAppBar也会跟着一起向下出现 bool snap: false, 设置为true时，当手指放开时，SliverAppBar会根据当前的位置进行调整，始终保持展开或收起的状态，此效果在floating=true时生效 bool pinned: false, 设置为true时，当SliverAppBar内容滑出屏幕时，将始终渲染一个固定在顶部的收起状态 bool stretch: false, }) SliverAppBar 控件需要和CustomScrollView搭配使用，SliverAppBar要通常放在slivers的第一位，后面接其他slive控件。 1.1. pinned 属性控制 当pinned=false的时候： 当pinned=true的时候： 具体的代码： @override Widget build(BuildContext context) { return CustomScrollView( slivers: [ SliverAppBar( leading: IconButton( icon: Icon(Icons.arrow_back), onPressed: () {}, ), title: Text(\"SliverAppBar\"), actions: [ IconButton( icon: Icon(Icons.home), onPressed: () {}, ), IconButton( icon: Icon(Icons.exit_to_app), onPressed: () {}, ), ], actionsIconTheme: IconThemeData(color: Colors.blue), backgroundColor: Colors.red[100], centerTitle: true, pinned: true, expandedHeight: 150, ), SliverGrid( delegate: SliverChildBuilderDelegate( (_, index) { return Container( color: Colors.primaries[index % Colors.primaries.length], ); }, childCount: 20, ), gridDelegate: SliverGridDelegateWithFixedCrossAxisCount( crossAxisCount: 2, mainAxisSpacing: 5, crossAxisSpacing: 5, ), ), ], ); } 1.2. 展示阴影 SliverAppBar( elevation: 10.0, forceElevated: true, ... ), 下面就是展示阴影和不展示阴影的区别： 1.3. 添加滑动标题 @override Widget build(BuildContext context) { return CustomScrollView( slivers: [ SliverAppBar( //title: Text(\"SliverAppBar\"), leading: IconButton( icon: Icon(Icons.arrow_back), onPressed: () {}, ), pinned: true, expandedHeight: 150, flexibleSpace: FlexibleSpaceBar( title: Text(\"SliverAppBar\"), collapseMode: CollapseMode.pin, ), ), SliverGrid( delegate: SliverChildBuilderDelegate( (_, index) { return Container( color: Colors.primaries[index % Colors.primaries.length], ); }, childCount: 20, ), gridDelegate: SliverGridDelegateWithFixedCrossAxisCount( crossAxisCount: 2, mainAxisSpacing: 5, crossAxisSpacing: 5, ), ), ], ); } 1.4. 添加背景图 @override Widget build(BuildContext context) { return CustomScrollView( slivers: [ SliverAppBar( flexibleSpace: FlexibleSpaceBar( background: Image.asset(Constant.ASSETS_IMG + 'hot_search_top.png'), ), ... ), ... ], ); } "},"widget/sliver/SliverPersistentHeader.html":{"url":"widget/sliver/SliverPersistentHeader.html","title":"SliverPersistentHeader","keywords":"","body":"1. 构造函数1.1. SliverPersistentHeaderDelegate2. 示例2.1. 构建吸顶效果2.2. 下拉图片方法 SliverPersistentHeader-class SliverPersistentHeaderDelegate-class 1. 构造函数 SliverPersistentHeader({ Key key, @required SliverPersistentHeaderDelegate delegate, // 需要创建其子类实现功能 bool pinned: false, bool floating: false }) 1.1. SliverPersistentHeaderDelegate class MySliverPersistentHeaderDelegate extends SliverPersistentHeaderDelegate { // 构建渲染的内容 @override Widget build( BuildContext context, double shrinkOffset, bool overlapsContent) { throw UnimplementedError(); } @override double get maxExtent => throw UnimplementedError(); // 展开状态下组件的高度 @override double get minExtent => throw UnimplementedError(); // 收起状态下组件的高度 // 更新组件 @override bool shouldRebuild(SliverPersistentHeaderDelegate oldDelegate) { throw UnimplementedError(); } } 2. 示例 2.1. 构建吸顶效果 实现代理方法： class MySliverPersistentHeaderDelegate extends SliverPersistentHeaderDelegate { final TabBar child; MySliverPersistentHeaderDelegate({@required this.child}); // 构建渲染的内容 @override Widget build( BuildContext context, double shrinkOffset, bool overlapsContent) { return this.child; } @override double get maxExtent => this.child.preferredSize.height; // 展开状态下组件的高度 @override double get minExtent => this.child.preferredSize.height; // 收起状态下组件的高度 // 更新组件 @override bool shouldRebuild(SliverPersistentHeaderDelegate oldDelegate) { return true; } } 实现功能： class StickyTabBarDemo extends StatefulWidget { @override _StickyTabBarDemoState createState() => _StickyTabBarDemoState(); } class _StickyTabBarDemoState extends State with SingleTickerProviderStateMixin { TabController tabController; @override void initState() { this.tabController = TabController(length: 2, vsync: this); super.initState(); } @override Widget build(BuildContext context) { return Scaffold( body: CustomScrollView( slivers: [ SliverAppBar( pinned: true, expandedHeight: 250, elevation: 0.0, flexibleSpace: FlexibleSpaceBar( title: Text(\"SliverAppBar\"), background: Image.network( 'http://img1.mukewang.com/5c18cf540001ac8206000338.jpg', fit: BoxFit.cover, ), ), ), SliverPersistentHeader( pinned: true, delegate: MySliverPersistentHeaderDelegate( child: TabBar( labelColor: Colors.black, controller: this.tabController, tabs: [ Tab(text: 'Home'), Tab(text: 'Profile'), ], ), ), ), SliverFillRemaining( child: TabBarView( controller: this.tabController, children: [ Center(child: Text('Content of Home')), Center(child: Text('Content of Profile')), ], ), ), ], ), ); } } 2.2. 下拉图片方法 先上效果： 组件实现： class BackImageZoomDemo extends StatefulWidget { @override _BackImageZoomDemoState createState() => _BackImageZoomDemoState(); } class _BackImageZoomDemoState extends State { @override Widget build(BuildContext context) { return Scaffold( body: CustomScrollView( slivers: [ SliverPersistentHeader( pinned: true, delegate: BackImageZoomHeaderDelegate( title: '哪吒之魔童降世', collapsedHeight: 40, expandedHeight: 300, paddingTop: MediaQuery.of(context).padding.top, coverImgUrl: 'https://img.zcool.cn/community/01c6615d3ae047a8012187f447cfef.jpg@1280w_1l_2o_100sh.jpg'), ), SliverFillRemaining( child: ContentWidget(), ) ], ), ); } } 实现Header的代理： class BackImageZoomHeaderDelegate extends SliverPersistentHeaderDelegate { final double collapsedHeight; final double expandedHeight; final double paddingTop; final String coverImgUrl; final String title; String statusBarMode = 'dark'; BackImageZoomHeaderDelegate( {this.collapsedHeight, this.expandedHeight, this.paddingTop, this.coverImgUrl, this.title}); @override Widget build( BuildContext context, double shrinkOffset, bool overlapsContent) { return Container( height: this.maxExtent, width: MediaQuery.of(context).size.width, child: Stack( fit: StackFit.expand, children: [ Container(child: Image.network(this.coverImgUrl, fit: BoxFit.cover)), Positioned( left: 0, top: this.maxExtent / 2, right: 0, bottom: 0, child: Container( decoration: BoxDecoration( gradient: LinearGradient( begin: Alignment.topCenter, end: Alignment.bottomCenter, colors: [ Color(0x00000000), Color(0x90000000), ], ), ), ), ), Positioned( left: 0, right: 0, top: 0, child: Container( color: this.makeStickyHeaderBgColor(shrinkOffset), child: SafeArea( bottom: false, child: Container( height: this.collapsedHeight, child: Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ IconButton( icon: Icon( Icons.arrow_back_ios, color: this .makeStickyHeaderTextColor(shrinkOffset, true), ), onPressed: () => Navigator.pop(context), ), Text( this.title, style: TextStyle( fontSize: 20, fontWeight: FontWeight.w500, color: this .makeStickyHeaderTextColor(shrinkOffset, false), ), ), IconButton( icon: Icon( Icons.share, color: this .makeStickyHeaderTextColor(shrinkOffset, true), ), onPressed: () {}, ), ], ), ), ), ), ), ], ), ); } 正文内容: class ContentWidget extends StatelessWidget { @override Widget build(BuildContext context) { return Padding( padding: const EdgeInsets.all(8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Row( crossAxisAlignment: CrossAxisAlignment.start, children: [ ClipRRect( borderRadius: BorderRadius.circular(6), child: Image.network( \"https://img1.gamersky.com/image2019/07/20190725_ll_red_136_2/gamersky_07small_14_201972510258D0.jpg\", width: 130, height: 180, fit: BoxFit.cover, ), ), Padding( padding: const EdgeInsets.only(left: 16), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( \"哪吒之魔童降世\", style: TextStyle( fontSize: 25, fontWeight: FontWeight.bold, color: Color(0xFF333333), ), ), Padding( padding: const EdgeInsets.only(top: 10), child: Text( '动画/中国大陆/110分钟', style: TextStyle( fontSize: 15, color: Color(0xFF999999), ), ), ), Padding( padding: EdgeInsets.only(top: 2), child: Text( '2019-07-26 08:00 中国大陆上映', style: TextStyle( fontSize: 15, color: Color(0xFF999999), ), ), ), Padding( padding: EdgeInsets.only(top: 2), child: Text( '32.1万人想看/大V推荐度95%', style: TextStyle( fontSize: 15, color: Color(0xFF999999), ), ), ), ], ), ), ], ), Divider(height: 32), Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( '剧情简介', style: TextStyle( fontSize: 25, fontWeight: FontWeight.bold, color: Color(0xFF333333), ), ), Padding( padding: const EdgeInsets.only(top: 10), child: Text( '天地灵气孕育出一颗能量巨大的混元珠，元始天尊将混元珠提炼成灵珠和魔丸，灵珠投胎为人，助周伐纣时可堪大用；而魔丸则会诞出魔王，为祸人间。元始天尊启动了天劫咒语，3年后天雷将会降临，摧毁魔丸。太乙受命将灵珠托生于陈塘关李靖家的儿子哪吒身上。然而阴差阳错，灵珠和魔丸竟然被掉包。本应是灵珠英雄的哪吒却成了混世大魔王。调皮捣蛋顽劣不堪的哪吒却徒有一颗做英雄的心。然而面对众人对魔丸的误解和即将来临的天雷的降临，哪吒是否命中注定会立地成魔？他将何去何从？', textAlign: TextAlign.justify, style: TextStyle( fontSize: 15, color: Color(0xFF999999), ), ), ), ], ), ], ), ); } } "},"widget/sliver/SliverList.html":{"url":"widget/sliver/SliverList.html","title":"SliverList","keywords":"","body":"1. 构造函数2. 示例2.1. SliverList、SliverGrid搭配使用2.2. SliverFixedExtentList、SliverGrid搭配使用2.3. SliverPrototypeExtentList、SliverGrid搭配使用 SliverList-class SliverFixedExtentList-class SliverPrototypeExtentList-class 1. 构造函数 SliverList({ Key key, @required SliverChildDelegate delegate }) SliverFixedExtentList({ Key key, @required SliverChildDelegate delegate, @required double itemExtent }) SliverPrototypeExtentList({ Key key, @required SliverChildDelegate delegate, @required Widget prototypeItem }) SliverList通过计算子控件布局去控制自身高度。 SliverPrototypeExtentList的高度是由prototypeItem的高度决定的，除此之外用法和SliverList一样。 SliverFixedExtentList是固定子控件高度。 效率: SliverPrototypeExtentList > SliverFixedExtentList > SliverList。 2. 示例 2.1. SliverList、SliverGrid搭配使用 @override Widget build(BuildContext context) { return CustomScrollView( slivers: [ SliverAppBar( title: Text(\"SliverAppBar\"), leading: IconButton( icon: Icon(Icons.arrow_back), onPressed: () {}, ), expandedHeight: 150, ), SliverGrid( delegate: SliverChildBuilderDelegate( (_, index) { return Container( color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"$index\"), ), ); }, childCount: 10, ), gridDelegate: SliverGridDelegateWithFixedCrossAxisCount( crossAxisCount: 5, ), ), SliverList( delegate: SliverChildBuilderDelegate( (_, index) { return Container( height: 50.0, color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"$index\"), ), ); }, childCount: 10, ), ), ], ); } 2.2. SliverFixedExtentList、SliverGrid搭配使用 @override Widget build(BuildContext context) { return CustomScrollView( slivers: [ SliverAppBar( title: Text(\"SliverAppBar\"), leading: IconButton( icon: Icon(Icons.arrow_back), onPressed: () {}, ), expandedHeight: 150, ), SliverGrid( delegate: SliverChildBuilderDelegate( (_, index) { return Container( color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"$index\"), ), ); }, childCount: 10, ), gridDelegate: SliverGridDelegateWithFixedCrossAxisCount( crossAxisCount: 5, ), ), SliverFixedExtentList( delegate: SliverChildBuilderDelegate( (_, index) { return Container( color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"$index\"), ), ); }, childCount: 10, ), itemExtent: 50.0, ) ], ); } 2.3. SliverPrototypeExtentList、SliverGrid搭配使用 @override Widget build(BuildContext context) { return CustomScrollView( slivers: [ SliverAppBar( title: Text(\"SliverAppBar\"), leading: IconButton( icon: Icon(Icons.arrow_back), onPressed: () {}, ), expandedHeight: 150, ), SliverGrid( delegate: SliverChildBuilderDelegate( (_, index) { return Container( color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"$index\"), ), ); }, childCount: 10, ), gridDelegate: SliverGridDelegateWithFixedCrossAxisCount( crossAxisCount: 5, ), ), SliverPrototypeExtentList( delegate: SliverChildBuilderDelegate( (_, index) { return Container( color: Colors.primaries[index % Colors.primaries.length], ); }, childCount: 10, ), prototypeItem: Text( '测试', style: TextStyle(fontSize: 38), ), ), ], ); } "},"widget/sliver/SliverGrid.html":{"url":"widget/sliver/SliverGrid.html","title":"SliverGrid","keywords":"","body":"1. 构造函数1.1. SliverGrid1.2. SliverChildDelegate1.2.1. SliverChildBuilderDelegate1.2.2. SliverChildListDelegate1.3. SliverGridDelegate1.3.1. SliverGridDelegateWithFixedCrossAxisCount1.3.2. SliverGridDelegateWithMaxCrossAxisExtent2. 示例 SliverGrid-class SliverChildDelegate-class SliverChildBuilderDelegate-class SliverChildListDelegate-class SliverGridDelegate-class SliverGridDelegateWithFixedCrossAxisCount SliverGridDelegateWithMaxCrossAxisExtent 1. 构造函数 1.1. SliverGrid SliverGrid({ Key key, @required SliverChildDelegate delegate, @required SliverGridDelegate gridDelegate }) SliverGrid.count({ Key key, @required int crossAxisCount, double mainAxisSpacing: 0.0, double crossAxisSpacing: 0.0, double childAspectRatio: 1.0, List children: const [] }) SliverGrid.extent({ Key key, @required double maxCrossAxisExtent, double mainAxisSpacing: 0.0, double crossAxisSpacing: 0.0, double childAspectRatio: 1.0, List children: const [] }) 1.2. SliverChildDelegate 1.2.1. SliverChildBuilderDelegate const SliverChildBuilderDelegate( IndexedWidgetBuilder builder, // 子控件构建器 {ChildIndexGetter findChildIndexCallback, int childCount, // 子控件总数 bool addAutomaticKeepAlives: true, bool addRepaintBoundaries: true, bool addSemanticIndexes: true, SemanticIndexCallback semanticIndexCallback: _kDefaultSemanticIndexCallback, int semanticIndexOffset: 0 }) Widget IndexedWidgetBuilder (BuildContext context,int index); 1.2.2. SliverChildListDelegate SliverChildListDelegate(List children, {bool addAutomaticKeepAlives: true, bool addRepaintBoundaries: true, bool addSemanticIndexes: true, SemanticIndexCallback semanticIndexCallback: _kDefaultSemanticIndexCallback, int semanticIndexOffset: 0 }) SliverChildListDelegate.fixed(List children, {bool addAutomaticKeepAlives: true, bool addRepaintBoundaries: true, bool addSemanticIndexes: true, SemanticIndexCallback semanticIndexCallback: _kDefaultSemanticIndexCallback, int semanticIndexOffset: 0 }) 1.3. SliverGridDelegate 1.3.1. SliverGridDelegateWithFixedCrossAxisCount const SliverGridDelegateWithFixedCrossAxisCount({ @required int crossAxisCount, // 主向子元素的总数 double mainAxisSpacing: 0.0, // 主轴方向的间距 double crossAxisSpacing: 0.0, // 次轴方向子元素的间距 double childAspectRatio: 1.0 // 子元素的宽高比 }) 1.3.2. SliverGridDelegateWithMaxCrossAxisExtent const SliverGridDelegateWithMaxCrossAxisExtent({ @required double maxCrossAxisExtent, // 子元素在主轴上的最大长度 double mainAxisSpacing: 0.0, // 主轴方向的间距 double crossAxisSpacing: 0.0, // 次轴方向子元素的间距 double childAspectRatio: 1.0 // 子元素的宽高比 }) 2. 示例 Widget build(BuildContext context) { return CustomScrollView( slivers: [ SliverGrid( delegate: SliverChildBuilderDelegate( (_, index) { return Container( color: Colors.primaries[index % Colors.primaries.length], ); }, childCount: 10, ), gridDelegate: SliverGridDelegateWithFixedCrossAxisCount( crossAxisCount: 3, mainAxisSpacing: 5, crossAxisSpacing: 5, ), ), ], ); } "},"widget/sliver/SliverSafeArea.html":{"url":"widget/sliver/SliverSafeArea.html","title":"SliverSafeArea","keywords":"","body":"1. 构造函数SliverSafeArea-class 1. 构造函数 const SliverSafeArea({ Key key, @required Widget sliver bool left: true, bool top: true, bool right: true, bool bottom: true, EdgeInsets minimum: EdgeInsets.zero, }) @override Widget build(BuildContext context) { return CustomScrollView( slivers: [ SliverGrid( delegate: SliverChildBuilderDelegate( (_, index) { return Container( color: Colors.primaries[index % Colors.primaries.length], ); }, childCount: 10, ), gridDelegate: SliverGridDelegateWithFixedCrossAxisCount( crossAxisCount: 3, mainAxisSpacing: 5, crossAxisSpacing: 5, ), ), ], ); } @override Widget build(BuildContext context) { return CustomScrollView( slivers: [ SliverSafeArea( sliver: SliverGrid( delegate: SliverChildBuilderDelegate( (_, index) { return Container( color: Colors.primaries[index % Colors.primaries.length], ); }, childCount: 10, ), gridDelegate: SliverGridDelegateWithFixedCrossAxisCount( crossAxisCount: 3, mainAxisSpacing: 5, crossAxisSpacing: 5, ), ), ), ], ); } 添加了SliverSafeArea以后可以发现，顶部导航栏添加了安全间距。 "},"widget/sliver/SliverToBoxAdapter.html":{"url":"widget/sliver/SliverToBoxAdapter.html","title":"SliverToBoxAdapter","keywords":"","body":"SliverToBoxAdapter-class 在使用CustomScrollView创建自定义滚动效果的时候，CustomScrollView只能包含sliver系列组件，如果包含普通的组件如何处理？使用SliverToBoxAdapter包裹。 @override Widget build(BuildContext context) { return Scaffold( body: CustomScrollView( slivers: [ SliverAppBar( expandedHeight: 250, elevation: 0.0, flexibleSpace: FlexibleSpaceBar( background: Image.network( 'http://img1.mukewang.com/5c18cf540001ac8206000338.jpg', fit: BoxFit.cover, ), ), ), SliverToBoxAdapter( child: Container( color: Colors.black45, height: 120.0, ), ), SliverList( delegate: SliverChildBuilderDelegate( (_, index) { return Container( height: 100.0, color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"$index\"), ), ); }, childCount: 20, ), ), ], ), ); } "},"widget/sliver/SliverPadding.html":{"url":"widget/sliver/SliverPadding.html","title":"SliverPadding","keywords":"","body":"1. SliverPadding1.1. 构造函数1.2. 示例2. SliverOffstage2.1. 构造函数2.2. 示例3. SliverOpacity3.1. 构造函数3.2. 示例 SliverPadding-class SliverOffstage-class SliverOpacity-class 1. SliverPadding 1.1. 构造函数 SliverPadding搭配CustomScrollView使用，设置sliver的内边距。 SliverPadding({ Key key, @required EdgeInsetsGeometry padding, Widget sliver }) 1.2. 示例 @override Widget build(BuildContext context) { return Scaffold( body: CustomScrollView( slivers: [ SliverAppBar( expandedHeight: 250, elevation: 0.0, flexibleSpace: FlexibleSpaceBar( background: Image.network( 'http://img1.mukewang.com/5c18cf540001ac8206000338.jpg', fit: BoxFit.cover, ), ), ), SliverPadding( padding: EdgeInsets.all(15), sliver: SliverList( delegate: SliverChildBuilderDelegate( (_, index) { return Container( height: 100.0, color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"$index\"), ), ); }, childCount: 20, ), ), ), ], ), ); } 2. SliverOffstage 2.1. 构造函数 SliverOffstage搭配CustomScrollView使用，设置sliver的显示或隐藏。 SliverOffstage({ Key key, bool offstage: true, Widget sliver }) 2.2. 示例 @override Widget build(BuildContext context) { return Scaffold( floatingActionButton: FloatingActionButton( onPressed: () { setState(() { _title = _offstage ? \"隐藏\" : \"显示\"; _offstage = !_offstage; }); }, child: Text(_title), ), body: CustomScrollView( slivers: [ SliverAppBar( expandedHeight: 250, elevation: 0.0, flexibleSpace: FlexibleSpaceBar( background: Image.network( 'http://img1.mukewang.com/5c18cf540001ac8206000338.jpg', fit: BoxFit.cover, ), ), ), SliverOffstage( offstage: _offstage, sliver: SliverList( delegate: SliverChildBuilderDelegate( (_, index) { return Container( height: 100.0, color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"$index\"), ), ); }, childCount: 20, ), ), ), ], ), ); } 3. SliverOpacity 3.1. 构造函数 SliverOpacity搭配CustomScrollView使用，设置sliver的透明度。 SliverOpacity({ Key key, @required double opacity, bool alwaysIncludeSemantics: false, Widget sliver }) 3.2. 示例 @override Widget build(BuildContext context) { return Scaffold( floatingActionButton: FloatingActionButton( onPressed: () { if (_opacity > 0.1) { setState(() { _opacity = _opacity - 0.1; }); } }, child: Text(_title), ), body: CustomScrollView( slivers: [ SliverAppBar( expandedHeight: 250, elevation: 0.0, flexibleSpace: FlexibleSpaceBar( background: Image.network( 'http://img1.mukewang.com/5c18cf540001ac8206000338.jpg', fit: BoxFit.cover, ), ), ), SliverOpacity( opacity: _opacity, sliver: SliverList( delegate: SliverChildBuilderDelegate( (_, index) { return Container( height: 100.0, color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"$index\"), ), ); }, childCount: 20, ), ), ), ], ), ); } "},"widget/sliver/SliverOverlapAbsorber.html":{"url":"widget/sliver/SliverOverlapAbsorber.html","title":"SliverOverlapAbsorber","keywords":"","body":" SliverOverlapAbsorber SliverOverlapAbsorberHandle SliverOverlapInjector SliverOverlapAbsorber({ Key key, @required SliverOverlapAbsorberHandle handle, Widget sliver }) SliverOverlapInjector({ Key key, @required SliverOverlapAbsorberHandle handle, Widget sliver }) "},"widget/sliver/FlexibleSpaceBar.html":{"url":"widget/sliver/FlexibleSpaceBar.html","title":"FlexibleSpaceBar(导航栏)","keywords":"","body":"1. 构造函数2. 示例FlexibleSpaceBar Class 1. 构造函数 const FlexibleSpaceBar({ Key key, Widget title, Widget background, bool centerTitle, EdgeInsetsGeometry titlePadding, CollapseMode collapseMode: CollapseMode.parallax, List stretchModes: const [StretchMode.zoomBackground] }) 2. 示例 import 'package:flutter/material.dart'; class FlexibleSpaceBarExample extends StatefulWidget { @override _FlexibleSpaceBarExampleState createState() => _FlexibleSpaceBarExampleState(); } class _FlexibleSpaceBarExampleState extends State { @override Widget build(BuildContext context) { return CustomScrollView( slivers: [ SliverAppBar( stretch: true, onStretchTrigger: () { // Function callback for stretch return; }, expandedHeight: 300.0, flexibleSpace: FlexibleSpaceBar( stretchModes: [ StretchMode.zoomBackground, StretchMode.blurBackground, StretchMode.fadeTitle, ], centerTitle: true, title: const Text('Flight Report'), background: Stack( fit: StackFit.expand, children: [ Image.network( 'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg', fit: BoxFit.cover, ), const DecoratedBox( decoration: BoxDecoration( gradient: LinearGradient( begin: Alignment(0.0, 0.5), end: Alignment(0.0, 0.0), colors: [ Color(0x60000000), Color(0x00000000), ], ), ), ), ], ), ), ), ], ); } } "},"widget/refresh/":{"url":"widget/refresh/","title":"刷新","keywords":"","body":" RefreshIndicator RefreshIndicatorState ProgressIndicator CircularProgressIndicator RefreshProgressIndicator LinearProgressIndicator "},"widget/refresh/RefreshIndicator.html":{"url":"widget/refresh/RefreshIndicator.html","title":"RefreshIndicator","keywords":"","body":"1. 构造函数2. 示例2.1. 上拉刷新RefreshIndicator 1. 构造函数 const RefreshIndicator({ Key key, @required Widget child, double displacement: 40.0, @required RefreshCallback onRefresh, Color color, Color backgroundColor, ScrollNotificationPredicate notificationPredicate: defaultScrollNotificationPredicate, String semanticsLabel, String semanticsValue, double strokeWidth: 2.0 }) 2. 示例 class _WeiboFindPageState extends State { int listCount = 0; Future loadData() async { print(\"load started!\"); await Future.delayed(Duration(seconds: 3)).then((value) { setState(() { listCount = 20; print(\"load finished!\"); return null; }); }); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"刷新\"), ), body: RefreshIndicator( onRefresh: loadData, child: ListView.builder( itemBuilder: (_, index) { return Container( height: 100, color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"data-$index\"), ), ); }, itemCount: listCount, ), ), ); } } 2.1. 上拉刷新 class _WeiboFindPageState extends State { ScrollController _scrollController = ScrollController(); int listCount = 10; @override void initState() { _scrollController.addListener(() { // 判断是否滑动到底部 if (_scrollController.position.pixels == _scrollController.position.maxScrollExtent) { loadData(); // 加载更多 } }); loadData(); // 初始化数据 super.initState(); } @override void dispose() { _scrollController.dispose(); super.dispose(); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"刷新\"), ), body: RefreshIndicator( onRefresh: loadData, child: CustomScrollView( slivers: [ SliverList( delegate: SliverChildBuilderDelegate( (_, index) { return Container( height: 100, color: Colors.primaries[index % Colors.primaries.length], child: Center( child: Text(\"$index\"), ), ); }, childCount: 20, ), ), SliverToBoxAdapter( child: Container( height: 100, child: Center( child: Text(\"加载更多\"), ), ), ), ], ), ), ); } Future loadData() async { print(\"load started!\"); await Future.delayed(Duration(seconds: 1)).then((value) { setState(() { listCount = 20; print(\"load finished!\"); return null; }); }); } } "},"widget/clip/":{"url":"widget/clip/","title":"裁剪组件","keywords":"","body":""},"widget/clip/ClipboardStatusNotifier.html":{"url":"widget/clip/ClipboardStatusNotifier.html","title":"ClipboardStatusNotifier","keywords":"","body":""},"widget/clip/ClipContext.html":{"url":"widget/clip/ClipContext.html","title":"ClipContext","keywords":"","body":""},"widget/clip/ClipOval.html":{"url":"widget/clip/ClipOval.html","title":"ClipOval","keywords":"","body":""},"widget/clip/ClipPath.html":{"url":"widget/clip/ClipPath.html","title":"ClipPath","keywords":"","body":""},"widget/clip/ClipRect.html":{"url":"widget/clip/ClipRect.html","title":"ClipRect","keywords":"","body":"1. 构造函数1.1. 裁剪模式ClipRect Class 默认情况下，ClipRect会阻止子widget在其边界外绘画，通常与ClipRect结合使用的widget： CustomPaint CustomSingleChildLayout CustomMultiChildLayout Align OverflowBox SizedOverflowBox 1. 构造函数 const ClipRect({ Key key, CustomClipper clipper, Clip clipBehavior: Clip.hardEdge, Widget child }) 1.1. 裁剪模式 enum Clip { none, // 无模式 hardEdge, // 裁剪速度稍快，但容易失真，有锯齿 antiAlias, // 裁剪边缘抗锯齿，使得裁剪更平滑，这种模式裁剪速度比 antiAliasWithSaveLayer 快，但是比 hardEdge 慢,该模式常用于圆形和弧形之类的形状裁剪 antiAliasWithSaveLayer, // 裁剪后具有抗锯齿特性并分配屏幕缓冲区，所有后续操作在缓冲区进行，然后再进行裁剪和合成 } "},"widget/clip/ClipRRect.html":{"url":"widget/clip/ClipRRect.html","title":"ClipRRect","keywords":"","body":"1. 构造函数2. 示例ClipRRect-class 1. 构造函数 ClipRRect({ Key key, BorderRadius borderRadius: BorderRadius.zero, // 边框半径裁剪 CustomClipper clipper, Clip clipBehavior: Clip.antiAlias, Widget child }) 2. 示例 ClipRRect( borderRadius: BorderRadius.circular(6), child: Image.network( \"https://img1.gamersky.com/image2019/07/20190725_ll_red_136_2/gamersky_07small_14_201972510258D0.jpg\", width: 130, height: 180, fit: BoxFit.cover, ), ) 下面图片就是添加圆角和没有添加圆角的区别： "},"widget/gestures/":{"url":"widget/gestures/","title":"手势","keywords":"","body":""},"widget/gestures/GestureDetector.html":{"url":"widget/gestures/GestureDetector.html","title":"GestureDetector","keywords":"","body":"1. 构造函数GestureDetector Class 1. 构造函数 GestureDetector({ Key key, Widget child, GestureTapDownCallback onTapDown, GestureTapUpCallback onTapUp, GestureTapCallback onTap, GestureTapCancelCallback onTapCancel, GestureTapCallback onSecondaryTap, GestureTapDownCallback onSecondaryTapDown, GestureTapUpCallback onSecondaryTapUp, GestureTapCancelCallback onSecondaryTapCancel, GestureTapCallback onDoubleTap, GestureLongPressCallback onLongPress, GestureLongPressStartCallback onLongPressStart, GestureLongPressMoveUpdateCallback onLongPressMoveUpdate, GestureLongPressUpCallback onLongPressUp, GestureLongPressEndCallback onLongPressEnd, GestureLongPressCallback onSecondaryLongPress, GestureLongPressStartCallback onSecondaryLongPressStart, GestureLongPressMoveUpdateCallback onSecondaryLongPressMoveUpdate, GestureLongPressUpCallback onSecondaryLongPressUp, GestureLongPressEndCallback onSecondaryLongPressEnd, GestureDragDownCallback onVerticalDragDown, GestureDragStartCallback onVerticalDragStart, GestureDragUpdateCallback onVerticalDragUpdate, GestureDragEndCallback onVerticalDragEnd, GestureDragCancelCallback onVerticalDragCancel, GestureDragDownCallback onHorizontalDragDown, GestureDragStartCallback onHorizontalDragStart, GestureDragUpdateCallback onHorizontalDragUpdate, GestureDragEndCallback onHorizontalDragEnd, GestureDragCancelCallback onHorizontalDragCancel, GestureForcePressStartCallback onForcePressStart, GestureForcePressPeakCallback onForcePressPeak, GestureForcePressUpdateCallback onForcePressUpdate, GestureForcePressEndCallback onForcePressEnd, GestureDragDownCallback onPanDown, GestureDragStartCallback onPanStart, GestureDragUpdateCallback onPanUpdate, GestureDragEndCallback onPanEnd, GestureDragCancelCallback onPanCancel, GestureScaleStartCallback onScaleStart, GestureScaleUpdateCallback onScaleUpdate, GestureScaleEndCallback onScaleEnd, HitTestBehavior behavior, bool excludeFromSemantics: false, DragStartBehavior dragStartBehavior: DragStartBehavior.start }) "},"widget/Notification/":{"url":"widget/Notification/","title":"监听","keywords":"","body":" NotificationListener SizeChangedLayoutNotification Notification DraggableScrollableNotification KeepAliveNotification LayoutChangedNotification OverscrollIndicatorNotification ScrollNotification OverscrollNotification ScrollEndNotification ScrollStartNotification ScrollUpdateNotification UserScrollNotification ScrollMetrics FixedScrollMetrics FixedExtentMetrics PageMetrics ScrollPosition ScrollPositionWithSingleContext "},"widget/Notification/NotificationListener.html":{"url":"widget/Notification/NotificationListener.html","title":"NotificationListener","keywords":"","body":"1. 构造函数2. 示例通过实现NotificationListener来监听Widget的树结构。 NotificationListener Class 1. 构造函数 const NotificationListener({ Key key, @required Widget child, NotificationListenerCallback onNotification }) 2. 示例 动态监听ListView滚动： RefreshIndicator( onRefresh: _handleRefresh, child: NotificationListener( onNotification: (Notification notification) { if (notification is ScrollNotification && notification.depth == 0) { _onScroll(notification.metrics.pixels); } return false; }, child: _listView(), ), "},"widget/Notification/Notification.html":{"url":"widget/Notification/Notification.html","title":"Notification","keywords":"","body":"1. 方法1. 方法 void debugFillDescription(List description); // 派发通知 void dispatch(BuildContext target); dynamic noSuchMethod(Invocation invocation); String toString(); bool visitAncestor(Element element); "},"widget/Notification/ScrollNotification.html":{"url":"widget/Notification/ScrollNotification.html","title":"ScrollNotification","keywords":"","body":"1. 构造函数 滚动监听及控制 Notification 1. 构造函数 ScrollNotification({ @required ScrollMetrics metrics, @required BuildContext context }) "},"widget/Notification/ScrollMetrics.html":{"url":"widget/Notification/ScrollMetrics.html","title":"ScrollMetrics","keywords":"","body":"1. 属性1. 属性 atEdge → bool 是否能够正好匹配 min/maxScrollExtent。 axis → Axis 视图滚动的轴。 axisDirection → AxisDirection 滚动的方向。 extentAfter → double 位于可滚动视口的“下方”的数量 extentBefore → double 位于可滚动视口的“上方”的数量 extentInside → double 可见内容的数量 maxScrollExtent → double 滚动最大的范围 minScrollExtent → double 滚动最小的范围 outOfRange → bool 是否在范围内 pixels → double 当前滚动位置 viewportDimension → double 沿着 axisDirection 的视口范围 "},"painting/":{"url":"painting/","title":"painting(绘画)","keywords":"","body":"Painting Library "},"painting/BoxDecoration.html":{"url":"painting/BoxDecoration.html","title":"BoxDecoration","keywords":"","body":"1. 构造函数2. 示例2.1. 边框2.2. 阴影2.3. 渐变2.4. 圆角 BoxDecoration Class 1. 构造函数 const BoxDecoration({ Color color, DecorationImage image, BoxBorder border, BorderRadiusGeometry borderRadius, List boxShadow, Gradient gradient, BlendMode backgroundBlendMode, BoxShape shape: BoxShape.rectangle }) 2. 示例 2.1. 边框 // 同时设置4条边框：1px粗细的黑色实线边框 BoxDecoration( border: Border.all(color: Colors.black, width: 1, style: BorderStyle.solid) ) // 设置单边框：上边框为1px粗细的黑色实线边框，右边框为1px粗细的红色实线边框 BoxDecoration( border: Border( top: BorderSide(color: Colors.black, width: 1, style: BorderStyle.solid), right: BorderSide(color: Colors.red, width: 1, style: BorderStyle.solid), ), ) 2.2. 阴影 BoxDecoration( boxShadow: [ BoxShadow( offset: Offset(0, 0), blurRadius: 6, spreadRadius: 10, color: Color.fromARGB(20, 0, 0, 0), ), ], ) 2.3. 渐变 // 从左到右，红色到蓝色的线性渐变 BoxDecoration( gradient: LinearGradient( begin: Alignment.centerLeft, end: Alignment.centerRight, colors: [Colors.red, Colors.blue], ), ) // 从中心向四周扩散，红色到蓝色的径向渐变 BoxDecoration( gradient: RadialGradient( center: Alignment.center, colors: [Colors.red, Colors.blue], ), ) 2.4. 圆角 // 同时设置4个角的圆角为5 BoxDecoration( borderRadius: BorderRadius.circular(5), ) // 设置单圆角：左上角的圆角为5，右上角的圆角为10 BoxDecoration( borderRadius: BorderRadius.only( topLeft: Radius.circular(5), topRight: Radius.circular(10), ), ) "},"painting/EdgeInsetsGeometry.html":{"url":"painting/EdgeInsetsGeometry.html","title":"EdgeInsetsGeometry","keywords":"","body":"1. EdgeInsetsGeometry2. EdgeInsets2.1. 构造函数3. EdgeInsetsDirectional3.1. 构造函数 EdgeInsets Class EdgeInsetsDirectional Class EdgeInsetsGeometry Class 这三个类的继承关系为： Object EdgeInsetsGeometry EdgeInsets EdgeInsetsDirectional 1. EdgeInsetsGeometry 2. EdgeInsets 2.1. 构造函数 // 所有方向 const EdgeInsets.all(double value) // 分别定义各个方向的边框 const EdgeInsets.only({double left: 0.0,double top: 0.0,double right: 0.0,double bottom: 0.0}) // 自定义垂直、水平方向 const EdgeInsets.symmetric({double vertical: 0.0,double horizontal: 0.0}) // 根据机型屏幕尺寸定义 EdgeInsets.fromWindowPadding(ui.WindowPadding padding, double devicePixelRatio) const EdgeInsets.fromLTRB(double left, double top, double right, double bottom) 3. EdgeInsetsDirectional 3.1. 构造函数 const EdgeInsetsDirectional.fromSTEB(double start, double top, double end, double bottom) const EdgeInsetsDirectional.only({double start: 0.0, double top: 0.0, double end: 0.0, double bottom: 0.0}) "},"painting/AlignmentGeometry.html":{"url":"painting/AlignmentGeometry.html","title":"AlignmentGeometry","keywords":"","body":"1. AlignmentGeometry2. Alignment2.1. 构造函数2.2. 常数3. AlignmentDirectional3.1. 构造函数 AlignmentGeometry Class Alignment Class AlignmentDirectional Class 这三个类的继承关系为： Object AlignmentGeometry Alignment AlignmentDirectional 1. AlignmentGeometry 2. Alignment 2.1. 构造函数 Alignment(double x, double y) 2.2. 常数 属性 值 描述 bottomCenter (0.5,1.0) 底部中心 bottomLeft (0.0,1.0) 左下角 bottomRight (1.0,1.0) 右下角 center (0.5,0.5) 水平垂直居中 centerLeft (0.0,0.5) 坐边缘中心 centerRight (1.0,0.5) 右边缘中心 topCenter (0.5,0.0) 顶部中心 topLeft (0.0,0.0) 左上角 topRight (1.0,0.0) 右上角 3. AlignmentDirectional 3.1. 构造函数 AlignmentDirectional(double start, double y) "},"painting/BoxFit.html":{"url":"painting/BoxFit.html","title":"BoxFit","keywords":"","body":"1. contain2. cover3. fill4. fitHeight5. fitWidth6. none7. scaleDown BoxFit Class 1. contain child在FittedBox范围内尽可能大，但是不能超出其尺寸。【contain是在保持着child宽高比不变的大前提下尽可能的填满，一般是宽度或者高度达到最大值时就会停止缩放。】 2. cover 按照原始尺寸填充整个容器，内容可能会超过容器范围| 3. fill 不按照宽高比填充，直接填满但是不会超过容器范围| 4. fitHeight 按照高度填充整个容器| 5. fitWidth 按照宽度填充整个容器| 6. none 没有任何填充| 7. scaleDown 根据情况缩小范围，内容不会超过容器范围，有时和contain一样有时和none一样 "},"painting/BorderSide.html":{"url":"painting/BorderSide.html","title":"BorderSide(边框侧边)","keywords":"","body":"1. 构造函数BorderSide Class 1. 构造函数 const BorderSide({ Color color: const Color(0xFF000000), // 边框线颜色 double width: 1.0, // 边框线宽度 BorderStyle style: BorderStyle.solid }) enum BorderStyle { none, // 没有边框线 solid, } "},"painting/BorderRadius.html":{"url":"painting/BorderRadius.html","title":"BorderRadius(边框弧度)","keywords":"","body":"1. 构造函数1.1. BorderRadius.all()1.2. BorderRadius.circular()1.3. BorderRadius.horizontal()1.4. BorderRadius.only()1.5. BorderRadius.vertical()BorderRadius Class 1. 构造函数 1.1. BorderRadius.all() BorderRadius.all( Radius radius ) 1.2. BorderRadius.circular() BorderRadius.circular( double radius ) 1.3. BorderRadius.horizontal() BorderRadius.horizontal({ Radius left: Radius.zero, Radius right: Radius.zero }) 1.4. BorderRadius.only() BorderRadius.only({ Radius topLeft: Radius.zero, Radius topRight: Radius.zero, Radius bottomLeft: Radius.zero, Radius bottomRight: Radius.zero }) 1.5. BorderRadius.vertical() BorderRadius.vertical({ Radius top: Radius.zero, Radius bottom: Radius.zero }) "},"painting/StrutStyle.html":{"url":"painting/StrutStyle.html","title":"StrutStyle","keywords":"","body":"1. 构造函数1.1. StrutStyle()1.2. StrutStyle.fromTextStyle()StrutStyle Class 1. 构造函数 1.1. StrutStyle() StrutStyle({ String fontFamily, List fontFamilyFallback, double fontSize, double height, double leading, FontWeight fontWeight, FontStyle fontStyle, bool forceStrutHeight, String debugLabel, String package }) 1.2. StrutStyle.fromTextStyle() StrutStyle.fromTextStyle( TextStyle textStyle, {String fontFamily, List fontFamilyFallback, double fontSize, double height, double leading, FontWeight fontWeight, FontStyle fontStyle, bool forceStrutHeight, String debugLabel, String package }) "},"painting/InlineSpan.html":{"url":"painting/InlineSpan.html","title":"InlineSpan","keywords":"","body":"1. 构造函数1.1. InlineSpan1.2. TextSpan1.3. PlaceholderSpan1.3.1. WidgetSpan TextSpan Class 1. 构造函数 1.1. InlineSpan const InlineSpan({ TextStyle style }) 1.2. TextSpan const TextSpan({ String text, List children, TextStyle style, GestureRecognizer recognizer, String semanticsLabel }) 1.3. PlaceholderSpan const PlaceholderSpan({ PlaceholderAlignment alignment: ui.PlaceholderAlignment.bottom, TextBaseline baseline, TextStyle style }) 1.3.1. WidgetSpan const WidgetSpan({ @required Widget child, PlaceholderAlignment alignment: ui.PlaceholderAlignment.bottom, TextBaseline baseline, TextStyle style }) "},"rendering/":{"url":"rendering/","title":"rendering(渲染)","keywords":"","body":"rendering Library "},"rendering/BoxConstraints.html":{"url":"rendering/BoxConstraints.html","title":"BoxConstraints","keywords":"","body":"1. 构造函数2. 示例2.1. BoxConstraints()2.2. BoxConstraints.tight()2.3. BoxConstraints.tightFor()2.4. BoxConstraints.tightForFinite()2.5. BoxConstraints.loose()2.6. BoxConstraints.expand() BoxConstraints Class 1. 构造函数 // 用指定的约束大小创建框架大小 const BoxConstraints({ double minWidth: 0.0, double maxWidth: double.infinity, double minHeight: 0.0, double maxHeight: double.infinity }) // 创建扩展为填充另一个框约束的框约束 const BoxConstraints.expand({ double width, double height }) // 创建禁止大小大于给定大小的框约束 BoxConstraints.loose( Size size ) // 仅用指定大小创建框大小 BoxConstraints.tight( Size size ) // 用指定的约束大小创建框大小 const BoxConstraints.tightFor({ double width, double height }) // 创建需要给定宽度或高度的框约束，除非它们是无限的 const BoxConstraints.tightForFinite({ double width: double.infinity, double height: double.infinity }) 2. 示例 2.1. BoxConstraints() ConstrainedBoxExample.dart @override Widget build(BuildContext context) { final String longString = \"Bacon ipsum dolor amet alcatra spare ribs cow, ribeye fatback tail biltong salami pastrami pork chop bacon sausage tongue turkey.Bacon ipsum dolor amet alcatra spare ribs cow, ribeye fatback tail biltong salami pastrami pork chop bacon sausage tongue turkey. \"; final String shortString = \"Short String!\"; return Scaffold( appBar: AppBar(title: Text(\"ConstrainedBoxExample\")), body: Column( children: [ ConstrainedBox( constraints: BoxConstraints(), child: createTextContainer(Colors.red, shortString), ), ConstrainedBox( constraints: BoxConstraints(), child: createTextContainer(Colors.green, longString), ), ConstrainedBox( constraints: BoxConstraints(minWidth: 200, minHeight: 150), child: createTextContainer(Colors.blue, shortString), ), ConstrainedBox( constraints: BoxConstraints(maxWidth: 200, maxHeight: 150), child: createTextContainer(Colors.pink, longString), ), ], ), ); } 2.2. BoxConstraints.tight() 传一个固定尺寸的 Size。 @override Widget build(BuildContext context) { final String longString = \"Bacon ipsum dolor amet alcatra spare ribs cow, ribeye fatback tail biltong salami pastrami pork chop bacon sausage tongue turkey.Bacon ipsum dolor amet alcatra spare ribs cow, ribeye fatback tail biltong salami pastrami pork chop bacon sausage tongue turkey. \"; final String shortString = \"Short String!\"; return Scaffold( appBar: AppBar(title: Text(\"ConstrainedBoxExample\")), body: Padding( padding: const EdgeInsets.all(8.0), child: Column( children: [ ConstrainedBox( constraints: BoxConstraints.tight(Size(100, 100)), child: createTextContainer(Colors.red, shortString), ), ConstrainedBox( constraints: BoxConstraints.tight(Size(100, 100)), child: createTextContainer(Colors.green, longString), ), ], ), ), ); } 2.3. BoxConstraints.tightFor() BoxConstraints.tightFor() : 不设置值，默认填充。如果设置宽高，width=maxWidth、height=maxzHeight。 @override Widget build(BuildContext context) { final String longString = \"Bacon ipsum dolor amet alcatra spare ribs cow, ribeye fatback tail biltong salami pastrami pork chop bacon sausage tongue turkey.Bacon ipsum dolor amet alcatra spare ribs cow, ribeye fatback tail biltong salami pastrami pork chop bacon sausage tongue turkey. \"; final String shortString = \"Short String!\"; return Scaffold( appBar: AppBar(title: Text(\"ConstrainedBoxExample\")), body: Column( children: [ ConstrainedBox( constraints: BoxConstraints.tightFor(), child: createTextContainer(Colors.red, shortString), ), ConstrainedBox( constraints: BoxConstraints.tightFor(), child: createTextContainer(Colors.green, longString), ), ConstrainedBox( constraints: BoxConstraints.tightFor(width: 100, height: 100), child: createTextContainer(Colors.red, shortString), ), ConstrainedBox( constraints: BoxConstraints.tightFor(width: 100, height: 100), child: createTextContainer(Colors.green, longString), ), ], ), ); } 2.4. BoxConstraints.tightForFinite() tightForFinite() 和 tightFor() 类似，在 tightForFinite() 中可以单独设置 width 或 height；宽度固定会自适应高度，高度固定会自适应宽度。 @override Widget build(BuildContext context) { final String longString = \"Bacon ipsum dolor amet alcatra spare ribs cow, ribeye fatback tail biltong salami pastrami pork chop bacon sausage tongue turkey.Bacon ipsum dolor amet alcatra spare ribs cow, ribeye fatback tail biltong salami pastrami pork chop bacon sausage tongue turkey. \"; final String shortString = \"Short String!\"; return Scaffold( appBar: AppBar(title: Text(\"ConstrainedBoxExample\")), body: Column( children: [ ConstrainedBox( constraints: BoxConstraints.tightForFinite(), child: createTextContainer(Colors.red, shortString), ), ConstrainedBox( constraints: BoxConstraints.tightForFinite(), child: createTextContainer(Colors.green, longString), ), ConstrainedBox( constraints: BoxConstraints.tightForFinite(width: 200), child: createTextContainer(Colors.red, shortString), ), ConstrainedBox( constraints: BoxConstraints.tightForFinite(width: 200), child: createTextContainer(Colors.green, longString), ), ConstrainedBox( constraints: BoxConstraints.tightForFinite(height: 100), child: createTextContainer(Colors.red, shortString), ), ConstrainedBox( constraints: BoxConstraints.tightForFinite(height: 100), child: createTextContainer(Colors.green, longString), ), ], ), ); } 2.5. BoxConstraints.loose() loose()：最小尺寸为0，最大尺寸为设置的 Size。 @override Widget build(BuildContext context) { final String longString = \"Bacon ipsum dolor amet alcatra spare ribs cow, ribeye fatback tail biltong salami pastrami pork chop bacon sausage tongue turkey.Bacon ipsum dolor amet alcatra spare ribs cow, ribeye fatback tail biltong salami pastrami pork chop bacon sausage tongue turkey. \"; final String shortString = \"Short String!\"; return Scaffold( appBar: AppBar(title: Text(\"ConstrainedBoxExample\")), body: Column( children: [ ConstrainedBox( constraints: BoxConstraints.loose(Size(200, 100)), child: createTextContainer(Colors.red, shortString), ), ConstrainedBox( constraints: BoxConstraints.loose(Size(200, 100)), child: createTextContainer(Colors.green, longString), ), ], ), ); } 2.6. BoxConstraints.expand() expand() 方式是填充方式，默认填满父 Widget 。 "},"services/":{"url":"services/","title":"services","keywords":"","body":""},"services/TextInputType.html":{"url":"services/TextInputType.html","title":"TextInputType(键盘输入类型)","keywords":"","body":"1. 构造函数TextInputType Class 1. 构造函数 const TextInputType.numberWithOptions({ bool signed: false, bool decimal: false }) "},"services/TextInputAction.html":{"url":"services/TextInputAction.html","title":"TextInputAction(键盘动作)","keywords":"","body":"TextInputAction Class enum TextInputAction { none, unspecified,//让操作系统决定哪个动作更合适 done,//完成动作，一般会显示“完成”二字 go,/// 跳转动作，一般用于输入了一个超链接后执行该动作。键盘上会显示“前往”二字 search,//搜索动作 send,//发送 next,//下个 previous,// 返回前一个 continueAction,//继续动作 join, route, emergencyCall,//拨打紧急电话 newline, // 换行 } "},"services/TextCapitalization.html":{"url":"services/TextCapitalization.html","title":"TextCapitalization(键盘动作)","keywords":"","body":"TextCapitalization Class enum TextCapitalization { words, // 每个单词的首个大写的键盘。iOS: UITextAutocapitalizationTypeWords ，Android: InputType.TYPE_TEXT_FLAG_CAP_WORDS sentences, // 每个句子的首个大写的键盘。iOS: UITextAutocapitalizationTypeSentences ，Android: InputType.TYPE_TEXT_FLAG_CAP_SENTENCES characters, // 每个字符大写的键盘。iOS: UITextAutocapitalizationTypeAllCharacters ，Android: InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS none,// 默认小写键盘 } "},"animation/":{"url":"animation/","title":"动画-TODO","keywords":"","body":"1. Introduction1. Introduction "},"dart/":{"url":"dart/","title":"Dart 学习","keywords":"","body":" dartcn.com dart.dev Dart 编程语言概览 "},"dart/sysType/":{"url":"dart/sysType/","title":"内建类型","keywords":"","body":""},"dart/sysType/String.html":{"url":"dart/sysType/String.html","title":"String","keywords":"","body":"1. 方法1. 方法 // 去掉字符串 最前段、最后段的空字符串。 String trim(); String toLowerCase(); // 'ALPHABET'.toLowerCase(); // 'alphabet' String toUpperCase(); // 'alphabet'.toUpperCase(); // 'ALPHABET' "},"dart/async/":{"url":"dart/async/","title":"异步","keywords":"","body":"https://juejin.im/post/5e158957f265da5d637fff8c "},"dart/async/Future.html":{"url":"dart/async/Future.html","title":"Future","keywords":"","body":"1. 构造函数2. 方法3. 使用3.1. Future.delayed 延迟3.2. Future.error3.3. Future.timeoutFuture Class Flutter通过Future实现了异步操作的功能。 1. 构造函数 factory Future(FutureOr computation()) factory Future.delayed(Duration duration, [FutureOr computation()]) factory Future.error(Object error, [StackTrace stackTrace]) factory Future.microtask(FutureOr computation()) factory Future.sync(FutureOr computation()) factory Future.value([FutureOr value]) 2. 方法 Stream asStream() Future catchError(Function onError, {bool test(dynamic error)}) dynamic noSuchMethod(Invocation invocation) Future then(FutureOr onValue(void value), {Function onError}) Future timeout(Duration timeLimit, {dynamic onTimeout()}) String toString() Future whenComplete(dynamic action()) void whenCompleteOrCancel(VoidCallback callback) 3. 使用 用Future实现一个基本的示例： class _FutureExampleState extends State { Future getFuture() { return Future.value('Future Value'); } @override Widget build(BuildContext context) { return Scaffold( floatingActionButton: FloatingActionButton( onPressed: () { getFuture().then((value) { print(value); // flutter: Future Value }); }, ), ); } } 3.1. Future.delayed 延迟 Future getFuture() { return Future.delayed(Duration(seconds: 2), () { return Future.value('Future Delay!'); }); } getFuture().then((value) { print(value); // flutter: Future Delay! }); 3.2. Future.error Future getFuture() { Exception exception = Exception(); return Future.error(exception); } 3.3. Future.timeout timeout 设置Future异步处理的超时时间。 Future getFuture() { return Future.delayed(Duration(seconds: 3), () { return Future.value('Future Delay!'); }); } getFuture().timeout(Duration(seconds: 2)).then((value) { print(value); }).catchError((error) { print(error); }); 这里调用getFuture()方法时，设置超时时间为2s，所以执行方法会超时。在catchError中打印超时日志信息: flutter: TimeoutException after 0:00:02.000000: Future not completed "},"dart/async/FutureBuilder.html":{"url":"dart/async/FutureBuilder.html","title":"FutureBuilder","keywords":"","body":"1. 构造函数1.1. AsyncSnapshot1.1.1. 构造函数1.1.2. 属性、方法2. 示例FutureBuilder Class FutureBuilder是一个将异步操作和异步UI更新结合在一起的类，通过它我们可以将网络请求，数据库读取等的结果更新的页面上。 1. 构造函数 const FutureBuilder({ Key key, Future future, T initialData, @required AsyncWidgetBuilder builder }) Widget AsyncWidgetBuilder ( BuildContext context, AsyncSnapshot snapshot ) 1.1. AsyncSnapshot AsyncSnapshot中包含了异步处理的信息。 1.1.1. 构造函数 const AsyncSnapshot.nothing() const AsyncSnapshot.withData(ConnectionState state, T data) const AsyncSnapshot.withError(ConnectionState state, Object error) 1.1.2. 属性、方法 ConnectionState connectionState; // 当前异步处理的连接状态 T data; // 最新接收到的数据 Object error; // 最新接收到的Error bool hasData; // 判断是否有数据 bool hasError; // 判断是否报错 int hashCode; // HashCode T requireData; // 最新接收的数据 enum ConnectionState { none, waiting, active, done, } AsyncSnapshot inState(ConnectionState state); 2. 示例 class FutureBuilderExample extends StatefulWidget { @override _FutureBuilderExampleState createState() => _FutureBuilderExampleState(); } class _FutureBuilderExampleState extends State { Future getFuture() { return Future.delayed(Duration(seconds: 2), () { return Future.value('Response'); }); } @override Widget build(BuildContext context) { return FutureBuilder( builder: (_, AsyncSnapshot snapshot) { Widget widget; if (snapshot.connectionState == ConnectionState.done) { widget = Center( child: Text(\"FutureBuilder Connect Done!+ ${snapshot.data}\"), ); } else { widget = Center(child: CircularProgressIndicator()); } return Scaffold( appBar: AppBar( title: Text(\"FutureBuilderExample\"), ), body: widget, ); }, future: getFuture(), ); } } "},"dart/function.html":{"url":"dart/function.html","title":"函数","keywords":"","body":"1. 函数2. 函数参数2.1. optional 可选参数2.2. required 必选参数2.3. 位置可选参数2.4. 默认参数值3. 匿名函数3.1. 匿名函数作为函数参数4. 单例模式1. 函数 在Dart中，函数也是一种对象，有拥有类型Function。 这也意味着函数可以被赋值给变量或者作为参数传递给其他函数。 => expr 语法是 { return expr; } 的简写。 => 符号 有时也被称为 箭头 语法。 [warning] 提示 在箭头 (=>) 和分号 (;) 之间只能使用一个 表达式 ，不能是 语句 。 2. 函数参数 2.1. optional 可选参数 Function funcA(num var1,num var2) => (){ return var1 + var2;}; // 参数不可缺少 Function funcB({num var1,num var2}) => (){ return var1 + var2;}; // 参数可选 void main() { funcA(1,2); funcB(var1:1); } 2.2. required 必选参数 Function funcC({num var1,@required num var2}) => (){ return var1 + var2;}; // var2参数必须传入。 void main() { funcB(var2:1); } 2.3. 位置可选参数 将参数放到 [] 中来标记参数是可选的 Function funcC(num var1,num var2,[num var3]) => (){ return var1 + var2 + var3;}; void main() { funcB(1,2); funcB(1,2,3); } 2.4. 默认参数值 使用 = 来定义可选参数的默认值。如果没有提供默认值，则默认值为 null。 void enableFlags({bool bold = false, bool hidden = false}){} 3. 匿名函数 匿名函数 : 没有名字的函数。有时候也被称为 lambda 或者 closure 。 list.forEach( (item) => print('${list.indexOf(item)}: $item') // 这就是个典型的匿名函数 ); 3.1. 匿名函数作为函数参数 // 无入参，无返回值 void blockA(void Function() block) { block(); } // 无入参，有返回值 void blockB(void Function(int arg1, int arg2) block) { block(1, 2); } // 有入参，有返回值 void blockC(int Function(int arg1, int arg2) block) { int ret = block(1, 2); print(\"blockC:$ret\"); } void main() { blockA(() { print(\"A\"); }); blockB((arg1, arg2) { print(\"B: $arg1,$arg2\"); }); blockC((arg1, arg2) { print(\"C: $arg1,$arg2\"); return arg1 + arg2; }); } // A // B: 1,2 // C: 1,2 // blockC:3 通过 typedef 封装参数： typedef void CallBackA(); typedef void CallBackB(int arg1, int arg2); typedef int CallBackC(int arg1, int arg2); void blockE(CallBackA callBackA) { callBackA(); } void blockF(CallBackB callBackB) { callBackB(1, 2); } void blockG(CallBackC callBackC) { int ret = callBackC(1, 2); } void main(List args) { blockE(() {}); blockF((arg1, arg2) {}); blockG((arg1, arg2) => arg1 + arg2); } 4. 单例模式 class SingletonDemo { String name; static final SingletonDemo _instance = SingletonDemo._internal(); SingletonDemo._internal(); /* 也可以在构造函数中进行初始化操作。 NavigatorService._internal() { print(\"init data\"); } */ factory SingletonDemo() { return _instance; } } 检验一下： var s1 = SingletonDemo(); s1.name = \"A\"; var s2 = SingletonDemo(); print(identical(s1, s2)); // true print(s1 == s2); // true print(s2.name); // A "},"dart_io/":{"url":"dart_io/","title":"Dart.io","keywords":"","body":""},"dart_io/Platform.html":{"url":"dart_io/Platform.html","title":"Platform","keywords":"","body":"1. 静态属性Platform Class 1. 静态属性 static final bool isAndroid; static final bool isFuchsia; static final bool isIOS; static final bool isLinux; static final bool isMacOS; static final bool isWindows; static final String localeName; // en_CN static final String localHostname; // liushan-ceshiji static final String operatingSystem; // ios "},"dart_io/DateTime.html":{"url":"dart_io/DateTime.html","title":"DateTime","keywords":"","body":"1. 使用场景1.1. 两个时间对比1. 使用场景 1.1. 两个时间对比 DateTime _lastPressedAt; if(DateTime.now().difference(_lastPressedAt) > Duration(seconds: 2)){} "}}