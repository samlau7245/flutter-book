{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. Introduction2. 资料1. Introduction [danger] 提示 如果需要评论需要梯子！ 2. 资料 谷歌开发者-Flutter 和桌面应用的最新进展 "},"CommandLine.html":{"url":"CommandLine.html","title":"命令行","keywords":"","body":"1. 全局命令2. 可使用的命令2.1. build 打印可用设备 1. 全局命令 -h, --help 帮助文档 -v, --verbose 详细日志 -d, --device-id 可用设备列表、ID --version 版本号 --suppress-analytics 禁止分析日志 --packages 2. 可使用的命令 analyze Analyze the project's Dart code. assemble Assemble and build flutter resources. attach Attach to a running application. bash-completion Output command line shell completion setup scripts. build Flutter build commands. channel List or switch flutter channels. clean Delete the build/ and .dart_tool/ directories. config Configure Flutter settings. create Create a new Flutter project. devices List all connected devices. doctor Show information about the installed tooling. downgrade Downgrade Flutter to the last active version for the current channel. drive Runs Flutter Driver tests for the current project. emulators List, launch and create emulators. format Format one or more dart files. install Install a Flutter app on an attached device. logs Show log output for running Flutter apps. precache Populates the Flutter tool's cache of binary artifacts. pub Commands for managing Flutter packages. run Run your Flutter app on an attached device. screenshot Take a screenshot from a connected device. symbolize Symbolize a stack trace from an AOT compiled flutter application. test Run Flutter unit tests for the current project. upgrade 更新 Flutter version 查看 Flutter 版本 2.1. build "},"widget/":{"url":"widget/","title":"Widget","keywords":"","body":"仓库地址 "},"widget/basic/":{"url":"widget/basic/","title":"基础","keywords":"","body":""},"widget/basic/MaterialApp.html":{"url":"widget/basic/MaterialApp.html","title":"MaterialApp","keywords":"","body":"1. MaterialApp(应用组件)1. MaterialApp(应用组件) 属性 类型 说明 title String 应用程序的标题：iOS->程序切换管理器中Android->任务管理器的程序快照上 theme ThemeData 应用使用的主题色，可以全局也可以局部设置 color Color 应用的主题色：primary color home Widget 用来定义当前应用打开时,所显示的界面 routes Map 应用中页面跳转规则 initialRoute String 初始化路由 onGenerateRoute RouteFactory 路由回调函数。当通过Navigator.of(context).pushNamed跳转路由时，在routes查找不到时，会调用该方法 onLocalChanged 当系统修改语言的时候,会触发这个回调 navigatorObservers List 导航观察器 debugShowMaterialGrid bool 是否显示纸墨设计基础布局网格,用来调试UI的工具 showPerformanceOverlay bool 显示性能标签 MaterialApp中Navigator寻找页面的顺序: For the / route, the home property, if non-null, is used. Otherwise, the routes table is used, if it has an entry for the route. Otherwise, onGenerateRoute is called, if provided. It should return a non-null value for any valid route not handled by home and routes. Finally if all else fails onUnknownRoute is called. class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"MaterialApp Demo\", theme: ThemeData(primaryColor: Colors.blue), color: Colors.orange, home: HomePage(), routes: { \"/first\": (_) => FirstPage(), \"/second\": (_) => SecondPage(), \"/thirs\": (_) => ThirdPage(), }, ); } } // 等效于： class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"MaterialApp Demo\", theme: ThemeData(primaryColor: Colors.blue), color: Colors.orange, routes: { \"/\": (_) => HomePage(), \"/first\": (_) => FirstPage(), \"/second\": (_) => SecondPage(), \"/thirs\": (_) => ThirdPage(), }, initialRoute: '/', ); } } 下面是示例，具体效果查看CodePen import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"MaterialApp Demo\", theme: ThemeData(primaryColor: Colors.blue), color: Colors.orange, home: HomePage(), routes: { \"/first\": (_) => FirstPage(), \"/second\": (_) => SecondPage(), \"/thirs\": (_) => ThirdPage(), }, onGenerateRoute: (RouteSettings settings) { // 路由回调函数。当通过`Navigator.of(context).pushNamed`跳转路由时，在`routes`查找不到时，会调用该方法 print(settings.name + settings.arguments); return null; }, ); } } //////////////////////////////////////////////////////////////////////// class HomePage extends StatefulWidget { @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Home Page\"), ), body: Center(child: Text('Home')), floatingActionButton: FloatingActionButton( onPressed: () { Navigator.pushNamed(context, '/first'); }, child: Text('Push'), ), ); } } //////////////////////////////////////////////////////////////////////// class FirstPage extends StatefulWidget { @override _FirstPage createState() => new _FirstPage(); } class _FirstPage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"First Page\"), ), body: Center(child: Text('First')), floatingActionButton: FloatingActionButton( onPressed: () { if (Navigator.canPop(context)) { Navigator.popAndPushNamed(context, '/second'); } }, child: Text('Pop'), ), ); } } //////////////////////////////////////////////////////////////////////// class SecondPage extends StatefulWidget { @override _SecondPage createState() => new _SecondPage(); } class _SecondPage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Second Page\"), ), body: Center(child: Text('Second')), floatingActionButton: FloatingActionButton( onPressed: () { Navigator.push(context, MaterialPageRoute(builder: (_) { return Scaffold( appBar: AppBar( title: Text('MaterialPageRoute Demo'), ), body: Center( child: Text(\"MaterialPageRoute Demo\"), ), ); })); }, child: Text('Push'), ), ); } } //////////////////////////////////////////////////////////////////////// class ThirdPage extends StatefulWidget { @override _ThirdPage createState() => new _ThirdPage(); } class _ThirdPage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Third Page\"), ), body: Center(child: Text('Third')), ); } } "},"widget/basic/Scaffold.html":{"url":"widget/basic/Scaffold.html","title":"Scaffold(脚手架)","keywords":"","body":"1. Scaffold(脚手架组件)1. Scaffold(脚手架组件) 属性 类型 说明 appBar AppBar 显示在界面顶部的一个AppBar body Widget 当前界面所显示的主要内容 floatingActionButton Widget Material Design中定义的一个功能按钮 persistentFooterButtons List 固定在下方显示的按钮 drawer Widget 侧边栏组件 botlomNavigationBar Widget 显示在底部的导航栏按钮栏 backgroundcolor Color 背景颜色 resizeToAvoidBottomPadding bool 控制界面内容body是否重新布局来避免底部被覆盖,比如当键盘显示时,重新布局避免被键盘盖住内容。默认值为true 示例代码：codePen import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"MaterialApp Demo\", theme: ThemeData(primaryColor: Color(0xFF37966F)), color: Colors.orange, home: HomePage(), ); } } //////////////////////////////////////////////////////////////////////// class HomePage extends StatefulWidget { @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { @override Widget build(BuildContext context) { return Scaffold( // 头部元素 appBar: AppBar(title: Text(\"Home Page\")), // 视图部份 body: Center(child: Text('Home')), // 抽屉 drawer: Drawer(), bottomNavigationBar: BottomAppBar( shape: const CircularNotchedRectangle(), color: Color(0xFF37966F), child: Container( height: 50.0, ), ), floatingActionButton: FloatingActionButton( onPressed: () {}, backgroundColor: Color(0xFF37966F), child: Icon(Icons.add), ), floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked, ); } } 关于Scaffold.of() called with a context that does not contain a Scaffold.的报错解决方案 "},"widget/basic/Navigator.html":{"url":"widget/basic/Navigator.html","title":"Navigator(顶部导航)","keywords":"","body":"1. 方法、属性2. 页面间跳转3. 页面间跳转带参数4. 页面返回带参数5. 资料1. 方法、属性 方法名 含义 canPop pop popAndPushNamed popUntil push pushAndRemoveUntil pushNamed pushNamedAndRemoveUntil pushReplacement pushReplacementNamed 替换掉前一个rout defaultGenerateInitialRoutes maybePop of removeRoute removeRouteBelow replace replaceRouteBelow 2. 页面间跳转 3. 页面间跳转带参数 4. 页面返回带参数 5. 资料 flutter.dev-Navigator Class Navigator operation requested with a context that does not include a Navigator "},"widget/basic/BottomNavigationBar.html":{"url":"widget/basic/BottomNavigationBar.html","title":"BottomNavigationBar(底部导航栏)","keywords":"","body":"1. 属性、方法2. 资料1. 属性、方法 属性 类型 说明 currentIndex int 当前索引 fixedColor iconColor items List 底部导航栏按钮集合 onTap ValueChanged 按下其中某个按钮的回调事件。需要根据返回的索引设置当前索引 type控制项目的显示方式，如果没有指定，那么它会自动设置为BottomNavigationBarType.fixed. BottomNavigationBarType.fixed : 当Items少于4个时，则会通过selectedItemColor显示选中Item的颜色，如果selectedItemColor为null，则使用ThemeData.primaryColor。如果backgroundColor为null，则使用ThemeData.canvasColor（本质上是不透明的白色）。 BottomNavigationBarType.shifting : 当Items大于等于4个时， 如果selectedItemColor为null，则所有项目均以白色呈现。背景颜色与所选项目的BottomNavigationBarItem.backgroundColor相同 。 代码示例1 代码示例2,切换body为Scaffold 2. 资料 flutter.dev-BottomNavigationBar Class "},"widget/basic/AppBar.html":{"url":"widget/basic/AppBar.html","title":"AppBar(导航栏)","keywords":"","body":"1. AppBar(应用按钮组件)1. AppBar(应用按钮组件) Appbar(应用按钮组件) SliverAppBar(应用按钮组件) 应用按钮组件有AppBar、SliverAppBar，都是继承子StatefulWidget类。区别在于AppBar固定在顶部，SliverAppBar可以跟着内容进行滚动。 class AppBar extends StatefulWidget implements PreferredSizeWidget{} class SliverAppBar extends StatefulWidget{} AppBar 属性 类型 默认值 说明 leading Widget null 在标题前显示的一个组件，在首页通常显示为应用的logo，在其他页面通常显示为返回按钮 title Widget null 标题 actions List null 一个Widget列表。代表Toolbar中所展示的菜单。对于常用的菜单，通常使用IconButton来表示，对于不常用的菜单使用PopupMenuButton来显示为三个点，点击后弹出二级菜单 bottom PreferredSizeWidget null 通常是TabBar。用来在ToolBar标题下展示菜单 elevation double 4 z坐标顺序，对于可滚动的SliverAppBar，当SliverAppBar和内容同级的时候，改值为0，当内容滚动SliverAppBar变为ToolBar的时候，修改elevation的值 flexibleSpace Widget null 一个显示在AppBar下方的组件，高度和AppBar高度一样，可以实现一些特殊效果，通常在SliverAppBar中使用 backgroundColor Color ThemeData.primaryColor 背景色 brightness Brightness ThemeData.primaryColorBrightness AppBar的亮度，有白色、黑色两种主题 iconTheme IconTheme ThemeData.primaryIconTheme AppBar上图标的颜色、透明度、尺寸信息 textTheme TextTheme ThemeData.primaryTextTheme AppBar上文字样式 centerTitle bool true 标题是否居中显示 automaticallyImplyLeading bool shape ShapeBorder actionsIconTheme IconThemeData primary bool excludeHeaderSemantics bool titleSpacing double toolbarOpacity double bottomOpacity double SliverAppBar属性 默认值 类型 leading Widget automaticallyImplyLeading true bool title Widget actions List flexibleSpace Widget bottom PreferredSizeWidget elevation double forceElevated false bool backgroundColor Color brightness Brightness iconTheme IconThemeData actionsIconTheme IconThemeData textTheme TextTheme primary true bool centerTitle bool excludeHeaderSemantics false bool titleSpacing NavigationToolbar.kMiddleSpacing double expandedHeight double floating false bool pinned false bool snap false bool stretch false bool stretchTriggerOffset 100.0 double onStretchTrigger AsyncCallback shape ShapeBorder AppBar、SliverAppBar 代码示例 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"MaterialApp Demo\", theme: ThemeData(primaryColor: Color(0xFF37966F)), color: Colors.orange, home: FirstPage(), routes: { \"/first\": (_) => FirstPage(), \"/second\": (_) => SecondPage(), }, ); } } //////////////////////////////////////////////////////////////////////// class FirstPage extends StatefulWidget { FirstPage({Key key}) : super(key: key); @override _FirstPage createState() => new _FirstPage(); } class _FirstPage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"First Page\"), leading: Icon(Icons.ac_unit), actions: [ IconButton(icon: Icon(Icons.add), onPressed: null), IconButton(icon: Icon(Icons.search), onPressed: null) ], centerTitle: true, ), floatingActionButton: FloatingActionButton( onPressed: () { Navigator.pushNamed(context, '/second'); }, child: Text('Push'), backgroundColor: Theme.of(context).primaryColor, ), ); } } //////////////////////////////////////////////////////////////////////// class SecondPage extends StatefulWidget { SecondPage({Key key}) : super(key: key); @override _SecondPage createState() => new _SecondPage(); } class _SecondPage extends State { @override Widget build(BuildContext context) { return Scaffold( body: CustomScrollView( slivers: [ const SliverAppBar( pinned: true, expandedHeight: 200.0, flexibleSpace: FlexibleSpaceBar( title: Text('SliverAppBar Demo'), ), ), SliverFixedExtentList( itemExtent: 50.0, delegate: SliverChildBuilderDelegate( (BuildContext context, int index) { return Container( alignment: Alignment.center, color: Colors.lightBlue[100 * (index % 9)], child: Text('List Item $index'), ); }, ), ), ], ), ); } } "},"widget/basic/TabBar.html":{"url":"widget/basic/TabBar.html","title":"TabBar(水平选项卡)","keywords":"","body":"1. TabBar(水平选项卡及视图组件)1. TabBar(水平选项卡及视图组件) TabBar通常需要配套Tab选项组件以及TabBarView页面视图组件一起使用。 TabBar属性 类型 说明 isScrollable bool 是否可以水平移动 tabs List Tab选项列表，建议不要放太多项，否则用户操作起来不方便 Tab属性 类型 说明 icon Widget Tab图标 text String Tab文本 TabBarView属性 类型 说明 controller TabController 指定视图的控制器 children List 视图组件的child为一个列表，一个选项卡对应一个视图 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { // 选项卡 数据源 final List tabs = [ Tab(text: '选项卡 1',), Tab(text: '选项卡 2',), Tab(text: '选项卡 3',), ]; // 应用程序的主组件 @override Widget build(BuildContext context) { return new MaterialApp( home: DefaultTabController( child: new Scaffold( appBar: new AppBar( // 添加导航栏 bottom: TabBar(tabs: tabs), ), body: TabBarView(children: tabs.map((Tab tab){ return Center( child: Text(tab.text), ); }).toList()), ), length: tabs.length,), ); } } 实现一个完整示例： import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( // DefaultTabController：关联 TabBar 和 TabBarView home: DefaultTabController( child: new Scaffold( appBar: new AppBar( bottom: TabBar( // 设置可滚动 isScrollable: true, tabs: items.map((ItemView item) { return Tab( text: item.title, icon: new Icon(item.icon), ); }).toList(), ), ), body: new TabBarView( children: items.map((ItemView item) { return new Padding( padding: const EdgeInsets.all(16.0), child: new SelectedView(item: item), ); }).toList()), ), length: items.length, ), ); } } // 选项卡数据结构 class ItemView { // 构造函数 const ItemView({this.title, this.icon}); final String title; final IconData icon; } // 选项卡数据源 const List items = [ const ItemView(title: '自驾', icon: Icons.directions_car), const ItemView(title: '自行车', icon: Icons.directions_bike), const ItemView(title: '轮船', icon: Icons.directions_boat), const ItemView(title: '公交车', icon: Icons.directions_bus), const ItemView(title: '火车', icon: Icons.directions_railway), const ItemView(title: '步行', icon: Icons.directions_walk), ]; // 被选中的视图->被装载在 TabBarView 里面 class SelectedView extends StatelessWidget { const SelectedView({Key key, this.item}) : super(key: key); final ItemView item; @override Widget build(BuildContext context) { final TextStyle textStyle = Theme.of(context).textTheme.display1; return new Card( color: Colors.white, child: new Center( child: new Column( mainAxisSize: MainAxisSize.min, // 垂直方向最小化处理 crossAxisAlignment: CrossAxisAlignment.center, //水平方向居中对齐 children: [ new Icon( item.icon, size: 128.0, color: textStyle.color, ), new Text( item.title, style: textStyle, ) ], ), ), ); } } "},"widget/basic/Drawer.html":{"url":"widget/basic/Drawer.html","title":"Drawer(抽屉)","keywords":"","body":"1. Drawer(抽屉组件)1. Drawer(抽屉组件) Drawer 属性 类型 默认值 说明 child Widget 可显示对象 elevation double 16 组件的z坐标顺序 DrawerHeader : 头部效果，展示基本信息。 UserAccountsDrawerHeader : 头部效果，展示用户头像、用户名、Email等信息。 DrawerHeader 属性 类型 说明 decoration Decoration curve Curve child Widget padding EdgeInsetsGeometry margin EdgeInsetsGeometry UserAccountsDrawerHeader 属性 类型 说明 margin EdgeInsetsGeometry decoration Decoration CurrentAccountPicture Widget OtherAccountsPictures List accountName Widget accountEmail Widget onDetailsPressed VoidCallback import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), drawer: new Drawer( child: ListView( children: [ UserAccountsDrawerHeader( accountName: new Text('accountName'), accountEmail: new Text('accountEmail'), currentAccountPicture: new CircleAvatar( backgroundImage: new AssetImage('icons/1.png'), ), otherAccountsPictures: [ new Container( child: Image.asset('icons/code.png'), ) ], onDetailsPressed: () {}, ), ListTile( leading: new CircleAvatar( child: Icon(Icons.color_lens), ), title: Text('个性装扮'), ), ListTile( leading: new CircleAvatar( child: Icon(Icons.photo), ), title: Text('我的相册'), ), ListTile( leading: new CircleAvatar( child: Icon(Icons.wifi), ), title: Text('免流量权限'), ), ], ), )), ); } } "},"widget/basic/ExpansionPanel.html":{"url":"widget/basic/ExpansionPanel.html","title":"ExpansionPanel","keywords":"","body":"1. ExpansionPanel1.1. ExpansionPanelList1.2. ExpansionPanelList.radio1. ExpansionPanel class ExpansionPanel{} class ExpansionPanelList extends StatefulWidget{ const ExpansionPanelList({ Key key, this.children = const [], this.expansionCallback, this.animationDuration = kThemeAnimationDuration, this.expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, }); } class ExpansionPanelRadio extends ExpansionPanel{} 1.1. ExpansionPanelList 示例 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp(title: \"Demo\", home: HomePage()); } } // 数据模型 class Item { Item({this.expandedValue, this.headerValue, this.isExpanded = false}); String expandedValue; String headerValue; bool isExpanded; } List generateItems(int length) { return List.generate( length, (index) => Item( headerValue: 'Panel $index', expandedValue: 'This is item number $index'), ); } class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { List list = generateItems(8); Widget _buildPanel() { return ExpansionPanelList( children: list.map((Item item) { return ExpansionPanel( headerBuilder: (BuildContext context, bool isExpanded) { return ListTile(title: Text(item.headerValue)); }, body: ListTile( title: Text(item.expandedValue), subtitle: Text('To delete this panel, tap the trash can icon'), trailing: Icon(Icons.delete), onTap: () {}, ), isExpanded: item.isExpanded, ); }).toList(), expansionCallback: (int index, bool isExpanded) { setState(() { list[index].isExpanded = !isExpanded; }); }, ); } @override Widget build(BuildContext context) { return Scaffold( body: SingleChildScrollView( child: Container( child: _buildPanel(), ), ), ); } } 1.2. ExpansionPanelList.radio CodePen-ExpansionPanelList.radio import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp(title: \"Demo\", home: HomePage()); } } // 数据模型 class Item { Item({this.expandedValue, this.headerValue, this.id}); String expandedValue; String headerValue; int id; } List generateItems(int length) { return List.generate( length, (index) => Item( id: index, headerValue: 'Panel $index', expandedValue: 'This is item number $index'), ); } class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { List list = generateItems(8); Widget _buildPanel() { return ExpansionPanelList.radio( initialOpenPanelValue: 2, children: list.map((Item item) { return ExpansionPanelRadio( headerBuilder: (BuildContext context, bool isExpanded) { return ListTile(title: Text(item.headerValue)); }, body: ListTile( title: Text(item.expandedValue), subtitle: Text('To delete this panel, tap the trash can icon'), trailing: Icon(Icons.delete), onTap: () {}, ), value: item.id, ); }).toList(), ); } @override Widget build(BuildContext context) { return Scaffold( body: SingleChildScrollView( child: Container( child: _buildPanel(), ), ), ); } } "},"widget/basic/Card.html":{"url":"widget/basic/Card.html","title":"Card(卡片组件)","keywords":"","body":"1. Card(卡片组件)1. Card(卡片组件) Card(卡片组件)内容可以由大多数类型的Widget构成，但通常与ListTitle搭配使用。Card有一个child属性，可以支持多个child的列、行、列表、网格或者其他小部件。默认情况下Card将其大小缩放为0像素。你可以使用SizeBox组件来限制Card的大小。 属性 类型 说明 child Widget margin shape ShapeBorder import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { var card = new SizedBox( height: 250.0, child: new Card( child: new Column( children: [ new ListTile( title: Text('data1'), subtitle: Text('2020动画《真人快打传奇：蝎子的复仇》1080p.HD中英双字[04-14]2019动画《红鞋子和七个小矮人》1080p.HD中英双字'), leading: Icon(Icons.home), ), new Divider(), new ListTile( title: Text('data2'), subtitle: Text('2020动画《真人快打传奇：蝎子的复仇》1080p.HD中英双字[04-14]2019动画《红鞋子和七个小矮人》1080p.HD中英双字'), leading: Icon(Icons.school), ), ], ), ), ); return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Title'), ), body: new Center( child: card, ), ), ); } } "},"widget/basic/ThemeData.html":{"url":"widget/basic/ThemeData.html","title":"ThemeData","keywords":"","body":"1. ThemeData1. ThemeData Theme( data: ThemeData(primaryColor: Colors.amber), child: Builder( builder: (BuildContext context) { return Container( width: 100, height: 100, color: Theme.of(context).primaryColor, // 获取到上下文中的主题数据 ); }, ), ) MaterialApp( // 这里设置了全局主题数据 theme: ThemeData( primaryColor: Colors.blue, // 全局主题色 accentColor: Colors.green, // 全局强调色 textTheme: TextTheme(bodyText2: TextStyle(color: Colors.purple)), // 全局字体色 ), home: Scaffold( appBar: AppBar( title: const Text('ThemeData Demo'), ), floatingActionButton: FloatingActionButton( child: const Icon(Icons.add), onPressed: () {}, ), body: Center( child: Text( 'Button pressed 0 times', ), ), ), ) 属性名 类型 描述 brightness Brightness visualDensity VisualDensity primarySwatch MaterialColor primaryColor Color 主题色 primaryColorBrightness Brightness primaryColorLight Color primaryColorDark Color accentColor Color 强调色 accentColorBrightness Brightness canvasColor Color scaffoldBackgroundColor Color bottomAppBarColor Color cardColor Color dividerColor Color focusColor Color hoverColor Color highlightColor Color splashColor Color splashFactory InteractiveInkFeatureFactory selectedRowColor Color unselectedWidgetColor Color disabledColor Color buttonColor Color buttonTheme ButtonThemeData toggleButtonsTheme ToggleButtonsThemeData secondaryHeaderColor Color textSelectionColor Color cursorColor Color textSelectionHandleColor Color backgroundColor Color dialogBackgroundColor Color indicatorColor Color hintColor Color errorColor Color toggleableActiveColor Color fontFamily String textTheme TextTheme primaryTextTheme TextTheme accentTextTheme TextTheme inputDecorationTheme InputDecorationTheme iconTheme IconThemeData primaryIconTheme IconThemeData accentIconTheme IconThemeData sliderTheme SliderThemeData tabBarTheme TabBarTheme tooltipTheme TooltipThemeData cardTheme CardTheme chipTheme ChipThemeData platform TargetPlatform materialTapTargetSize MaterialTapTargetSize applyElevationOverlayColor bool pageTransitionsTheme PageTransitionsTheme appBarTheme AppBarTheme bottomAppBarTheme BottomAppBarTheme colorScheme ColorScheme dialogTheme DialogTheme floatingActionButtonTheme FloatingActionButtonThemeData navigationRailTheme NavigationRailThemeData typography Typography cupertinoOverrideTheme CupertinoThemeData snackBarTheme SnackBarThemeData bottomSheetTheme BottomSheetThemeData popupMenuTheme PopupMenuThemeData bannerTheme MaterialBannerThemeData dividerTheme DividerThemeData buttonBarTheme ButtonBarThemeData "},"widget/button/":{"url":"widget/button/","title":"按钮","keywords":"","body":""},"widget/button/FloatingActionButton.html":{"url":"widget/button/FloatingActionButton.html","title":"FloatingActionButton(悬停按钮)","keywords":"","body":"1. FloatingActionButton(悬停按钮组件)1. FloatingActionButton(悬停按钮组件) 属性 类型 默认值 说明 child Widget tooltip foregroundColor backgroundColor elevation hignlightElevation onPressed shape 这个组件构造方法： FloatingActionButton(); FloatingActionButton.extended(); 示例代码 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"FloatingActionButton Demo\", home: HomePage(), ); } } //////////////////////////////首页////////////////////////////////// class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"FloatingActionButton Demo\"), ), /*floatingActionButton: FloatingActionButton( onPressed: () {}, child: Icon(Icons.navigation), backgroundColor: Colors.green, ),*/ floatingActionButton: FloatingActionButton.extended( onPressed: () {}, label: Text('Approve'), icon: Icon(Icons.thumb_up), backgroundColor: Colors.pink, ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), floatingActionButton: new Builder(builder: (BuildContext context){ return new FloatingActionButton( child: const Icon(Icons.add), tooltip: 'Click Tip', foregroundColor: Colors.red, backgroundColor: Colors.blue, elevation: 7.0,// 未点击阴影值 highlightElevation: 14.0,// 点击阴影值 mini: false, shape: new CircleBorder(), isExtended: false, onPressed: (){ Scaffold.of(context).showSnackBar( new SnackBar(content: new Text('data')) ); }, ); }), floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,// 居中 ), ); } } 把FloatingActionButton写在Builder组件里面为了使SnackBar有效果，因为这个类是StatelessWidget。也可以通过下面的代码实现，使用StatefulWidget： import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); // MyApp 不做状态处理，所以继承 StatelessWidget class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new LoginPage(title: 'This is title!',), ); } } // 主体需要做状态处理，继承 StatefulWidget class LoginPage extends StatefulWidget { LoginPage({Key key,this.title}) : super(key:key); final String title; @override _LoginPageState createState() => new _LoginPageState(); } class _LoginPageState extends State { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: Text(widget.title), ), body: new Center( child: FlatButton(onPressed: (){ _neverSatisfied(context); }, child: new Text('FlatButton')) ), ); } } Future _neverSatisfied(BuildContext context) async { return showDialog( context: context, barrierDismissible: false, builder: (BuildContext context) { return AlertDialog( title: Text('Rewind and remember'), content: SingleChildScrollView( child: ListBody( children: [ Text('You will never be satisfied.'), Text('You\\’re like me. I’m never satisfied.'), ], ), ), actions: [ FlatButton( child: Text('Regret'), onPressed: () { Navigator.of(context).pop(); }, ), ], ); }); } "},"widget/button/FlatButton.html":{"url":"widget/button/FlatButton.html","title":"FlatButton(扁平按钮组件)","keywords":"","body":"1. FlatButton(扁平按钮组件)1. FlatButton(扁平按钮组件) FlatButton组件是Materail Design风格按钮，点击时会有一个阴影效果。 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), body: new Center( child: FlatButton( onPressed: () {}, child: Text( 'FlatButton', style: TextStyle(fontSize: 24.0), )), ), ), ); } } "},"widget/button/PopupMenuButton.html":{"url":"widget/button/PopupMenuButton.html","title":"PopupMenuButton(弹出菜单组件)","keywords":"","body":"1. PopupMenuButton(弹出菜单组件)1. PopupMenuButton(弹出菜单组件) 属性 类型 说明 child Widget icon Icon itemBuilder PopupMenuItembuilder 菜单构造器，菜单项为任意类型，文本、图标都行 onSelected PopupMenuItembuilder 菜单被选中的回调方法 示例代码 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"FloatingActionButton Demo\", home: HomePage(), ); } } //////////////////////////////首页////////////////////////////////// class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } enum ConferenceItem { AddMember, LockConference, ModifyLayout, TurnoffAll } class _HomePage extends State { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"FloatingActionButton Demo\"), actions: [ PopupMenuButton(itemBuilder: (_) { return >[ const PopupMenuItem( child: Text('添加成员'), value: ConferenceItem.AddMember, ), const PopupMenuItem( child: Text('锁定会议'), value: ConferenceItem.LockConference, ), const PopupMenuItem( child: Text('修改布局'), value: ConferenceItem.ModifyLayout, ), const PopupMenuItem( child: Text('挂断所有'), value: ConferenceItem.TurnoffAll, ), ]; }) ], ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), body: new Center( child: FlatButton( onPressed: () {}, child: PopupMenuButton( itemBuilder: (BuildContext context) { return >[ const PopupMenuItem( child: Text('添加成员'), value: ConferenceItem.AddMember, ), const PopupMenuItem( child: Text('锁定会议'), value: ConferenceItem.LockConference, ), const PopupMenuItem( child: Text('修改布局'), value: ConferenceItem.ModifyLayout, ), const PopupMenuItem( child: Text('挂断所有'), value: ConferenceItem.TurnoffAll, ), ]; }, onSelected: (ConferenceItem item) { }, ), ), ), ), ); } } enum ConferenceItem { AddMember, LockConference, ModifyLayout, TurnoffAll } "},"widget/dialog/Chip.html":{"url":"widget/dialog/Chip.html","title":"Chip","keywords":"","body":"1. Chip1. Chip InputChip ChoiceChip FilterChip ActionChip 查看官方测试文件 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp(title: \"Demo\", home: HomePage()); } } class ActorFilterEntry { const ActorFilterEntry(this.name, this.initials); final String name; final String initials; } class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { /////////////////////////////////////////////// Chip _chip() { return Chip( avatar: CircleAvatar( backgroundColor: Colors.grey.shade800, child: Text('AB'), ), deleteButtonTooltipMessage: 'Delete chip A', label: Text('Aaron Burr'), onDeleted: () { print('Chip.'); }, ); } /////////////////////////////////////////////// bool _inputChipSlected = false; InputChip _inputChip() { return InputChip( avatar: CircleAvatar( backgroundColor: Colors.grey.shade800, child: Text('AB'), ), label: Text('Aaron Burr'), selected: _inputChipSlected, onSelected: (bool value) { setState(() { _inputChipSlected = value; }); }, ); } /////////////////////////////////////////////// int _value = 1; Wrap _choiceChip() { return Wrap( children: List.generate( 3, (int index) { return ChoiceChip( label: Text('Item $index'), selected: _value == index, onSelected: (bool selected) { setState(() { _value = selected ? index : null; }); }, ); }, ).toList(), ); } /////////////////////////////////////////////// final List _cast = [ const ActorFilterEntry('Aaron Burr', 'AB'), const ActorFilterEntry('Alexander Hamilton', 'AH'), const ActorFilterEntry('Eliza Hamilton', 'EH'), const ActorFilterEntry('James Madison', 'JM'), ]; List _filters = []; Iterable get actorWidgets sync* { for (final ActorFilterEntry actor in _cast) { yield Padding( padding: const EdgeInsets.all(4.0), child: FilterChip( avatar: CircleAvatar(child: Text(actor.initials)), label: Text(actor.name), selected: _filters.contains(actor.name), onSelected: (bool value) { setState(() { if (value) { _filters.add(actor.name); } else { _filters.removeWhere((String name) { return name == actor.name; }); } }); }, ), ); } } /////////////////////////////////////////////// ActionChip _actionChip() { return ActionChip( avatar: CircleAvatar( backgroundColor: Colors.grey.shade800, child: Text('AB'), ), label: Text('Aaron Burr'), onPressed: () { print(\"If you stand for nothing, Burr, what’ll you fall for?\"); }); } /////////////////////////////////////////////// Container demo1() { return Container( width: 75.0, height: 25.0, child: Chip( label: Container( width: 100.0, height: 50.0, ), onDeleted: () {}, ), ); } InputChip demo2() { return InputChip( label: const Text('InputChip'), selected: true, showCheckmark: true, checkmarkColor: Colors.red, ); } Widget _selectedFilterChip({Color checkmarkColor}) { return FilterChip( label: const Text('InputChip'), selected: true, showCheckmark: true, checkmarkColor: checkmarkColor, onSelected: (bool _) {}, ); } @override Widget build(BuildContext context) { return Scaffold( body: Column( children: [ _chip(), _inputChip(), _choiceChip(), Wrap(children: actorWidgets.toList()), _actionChip(), demo1(), demo2(), _selectedFilterChip(checkmarkColor: Colors.red), ], ), ); } } "},"widget/button/CheckboxListTile.html":{"url":"widget/button/CheckboxListTile.html","title":"CheckboxListTile(复选框)","keywords":"","body":"1. CheckboxListTile(复选框)1. CheckboxListTile(复选框) const CheckboxListTile({ Key key, @required this.value, @required this.onChanged, this.activeColor, this.checkColor, this.title, this.subtitle, this.isThreeLine = false, this.dense, this.secondary,// 图标 this.selected = false, this.controlAffinity = ListTileControlAffinity.platform, this.autofocus = false, }); import 'package:flutter/cupertino.dart'; import 'package:flutter/material.dart'; class CheckboxListTileDemo extends StatefulWidget { @override _CheckboxListTileDemoState createState() => _CheckboxListTileDemoState(); } class _CheckboxListTileDemoState extends State { bool _checkboxSelected = false; @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"CheckboxListTile Demo\"), ), body: Center( child: CheckboxListTile( title: Text('Animate Slowly'), value: _checkboxSelected, secondary: Icon(Icons.add), controlAffinity: ListTileControlAffinity.leading, onChanged: (value) { setState(() { _checkboxSelected = value; }); }, ), ), ); } } 如果这些样式都满足不了需要，可以使用Checkbox和其他的Widgest结合使用。 "},"widget/dialog/":{"url":"widget/dialog/","title":"弹窗","keywords":"","body":""},"widget/dialog/SimpleDialog.html":{"url":"widget/dialog/SimpleDialog.html","title":"SimpleDialog(简单对话框组件)","keywords":"","body":"1. SimpleDialog(简单对话框组件)1. SimpleDialog(简单对话框组件) 属性 类型 说明 children List title contentPadding titlePadding 示例代码 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"FloatingActionButton Demo\", home: HomePage(), ); } } //////////////////////////////首页////////////////////////////////// class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { @override Widget build(BuildContext context) { Future _showDialog() async { await showDialog( context: context, builder: (_) { return SimpleDialog( title: Text('This is a SimpleDialog!'), children: [ SimpleDialogOption(child: Text(\"data\")), SimpleDialogOption(child: Text(\"data\")), ], ); }); } return Scaffold( appBar: AppBar( title: Text(\"FloatingActionButton Demo\"), ), floatingActionButton: FloatingActionButton( onPressed: () { _showDialog(); }, ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), body: new Center( child: showDialog(), ), ), ); } } StatelessWidget showDialog() { return SimpleDialog( title: const Text('SimpleDialog Title'), children: [ SimpleDialogOption( child: new Text('Line 3'), onPressed: () {}, ), SimpleDialogOption( child: new Text('Line 3'), onPressed: () {}, ), SimpleDialogOption( child: new Text('Line 3'), onPressed: () {}, ), ], ); } 一般对话框要封装在方法里，通过点击事件弹出。如果这一过程是异步要加上async/await处理。 "},"widget/dialog/AlertDialog.html":{"url":"widget/dialog/AlertDialog.html","title":"AlertDialog(提示对话框组件)","keywords":"","body":"1. AlertDialog(提示对话框组件)1. AlertDialog(提示对话框组件) 示例 属性 类型 说明 actions List title contentPadding content Widget 内容，如果内容比较多可以用SingleChildScrollView组件进行包裹 titlePadding import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), body: new Center( child: new Builder(builder: (BuildContext context){ return new FlatButton(onPressed: (){ _neverSatisfied(context); }, child: new Text('data')); }), ), ), ); } } Future _neverSatisfied(BuildContext context) async { return showDialog( context: context, barrierDismissible: false, builder: (BuildContext context) { return AlertDialog( title: Text('Rewind and remember'), content: SingleChildScrollView( child: ListBody( children: [ Text('You will never be satisfied.'), Text('You\\’re like me. I’m never satisfied.'), ], ), ), actions: [ FlatButton( child: Text('Regret'), onPressed: () { Navigator.of(context).pop(); }, ), ], ); }); } "},"widget/dialog/BottomSheet.html":{"url":"widget/dialog/BottomSheet.html","title":"BottomSheet","keywords":"","body":"1. BottomSheet1. BottomSheet BottomSheet有两种设计方式： Persistent : 这是用过ScaffoldState.showBottomSheet来展示。 Modal 通过showModalBottomSheet来展示。 示例代码 import 'package:flutter/cupertino.dart'; import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp(title: \"Demo\", home: HomePage()); } } class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { final GlobalKey scaffoldKey = GlobalKey(); @override Widget build(BuildContext context) { return Scaffold( key: scaffoldKey, body: Builder( builder: (BuildContext context) => Center( child: FlatButton( child: Text(\"Alert\"), onPressed: () { _showBottomSheetDemo(context); }, ), ), ), // floatingActionButton: FloatingActionButton( // child: Text(\"Alert\"), // onPressed: () { // scaffoldKey.currentState.showBottomSheet( // (_) { // return Container( // margin: const EdgeInsets.all(40.0), // child: const Text('BottomSheet'), // ); // }, // ); // }, // ), ); } void _showBottomSheetDemo(BuildContext context) { Scaffold.of(context).showBottomSheet((_) { return Container( height: 200.0, color: Color(0xFF37966F), child: Column( mainAxisAlignment: MainAxisAlignment.center, mainAxisSize: MainAxisSize.min, children: [ const Text('BottomSheet'), RaisedButton( child: const Text('Close BottomSheet'), onPressed: () => Navigator.pop(context), ) ], ), ); }); } } 示例代码 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp(title: \"Demo\", home: HomePage()); } } class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { @override Widget build(BuildContext context) { return Scaffold( body: Builder( builder: (BuildContext context) => Center( child: FlatButton( child: Text(\"Alert\"), onPressed: () { showModalBottomSheet( context: context, backgroundColor: Colors.pink, barrierColor: Colors.red, elevation: 9.0, shape: BeveledRectangleBorder( borderRadius: BorderRadius.circular(12)), clipBehavior: Clip.antiAlias, builder: (_) { return Container( child: const Text('BottomSheet'), height: 400.0, ); }).then( (value) {}, ); }, ), ), ), ); } } "},"widget/dialog/SnackBar.html":{"url":"widget/dialog/SnackBar.html","title":"SnackBar","keywords":"","body":"1. SnackBar(轻量提示组件)1. SnackBar(轻量提示组件) 属性 类型 说明 action animation content duration backgroundColor import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Demo'), ), body: new Center( child: new Builder(builder:(BuildContext context) { return new FlatButton(onPressed: (){ Scaffold.of(context).showSnackBar( new SnackBar(content: new Text('data')) ); }, child: new Text('data')); }) ), ), ); } } "},"widget/input/":{"url":"widget/input/","title":"输入","keywords":"","body":""},"widget/input/TextField.html":{"url":"widget/input/TextField.html","title":"TextField(输入框)","keywords":"","body":"1. TextField(输入框)1. TextField(输入框) TextFormField Form 可以从flutter 官方测试文件中找到Demo 使用TextEditingController CodePen示例 const TextField({ Key key, this.controller, // 控制器 this.focusNode, // 轻按按钮时使文本字段聚焦,@see: https://flutter.dev/docs/cookbook/forms/focus this.decoration = const InputDecoration(),//样式 TextInputType keyboardType, this.textInputAction, this.textCapitalization = TextCapitalization.none, this.style, //类型 this.strutStyle, this.textAlign = TextAlign.start, this.textAlignVertical, this.textDirection, this.readOnly = false, ToolbarOptions toolbarOptions, this.showCursor, // 光标设置 this.autofocus = false, // 立即聚焦文本字段,@see: https://flutter.dev/docs/cookbook/forms/focus this.obscureText = false, this.autocorrect = true, SmartDashesType smartDashesType, SmartQuotesType smartQuotesType, this.enableSuggestions = true, this.maxLines = 1,// 行数限制 this.minLines,// 行数限制 this.expands = false, this.maxLength, this.maxLengthEnforced = true, this.onChanged, // 输入监听回调 this.onEditingComplete, // 输入监听回调 this.onSubmitted, // 输入监听回调 this.inputFormatters, this.enabled, this.cursorWidth = 2.0, // 光标设置 this.cursorRadius, // 光标设置 this.cursorColor, // 光标设置 this.selectionHeightStyle = ui.BoxHeightStyle.tight, this.selectionWidthStyle = ui.BoxWidthStyle.tight, this.keyboardAppearance, this.scrollPadding = const EdgeInsets.all(20.0), this.dragStartBehavior = DragStartBehavior.start, this.enableInteractiveSelection = true, this.onTap, this.buildCounter, this.scrollController, this.scrollPhysics, }); // 其中 `this.decoration = const InputDecoration()` 控制组件的样式，构造函数为： const InputDecoration({ this.icon, this.labelText, this.labelStyle, this.helperText, this.helperStyle, this.helperMaxLines, this.hintText, this.hintStyle, this.hintMaxLines, this.errorText, this.errorStyle, this.errorMaxLines, @Deprecated( 'Use floatingLabelBehaviour instead. ' 'This feature was deprecated after v1.13.2.' ) this.hasFloatingPlaceholder = true, // ignore: deprecated_member_use_from_same_package this.floatingLabelBehavior = FloatingLabelBehavior.auto, this.isDense, this.contentPadding, this.prefixIcon, this.prefixIconConstraints, this.prefix, this.prefixText, this.prefixStyle, this.suffixIcon, this.suffix, this.suffixText, this.suffixStyle, this.suffixIconConstraints, this.counter, this.counterText, this.counterStyle, this.filled, this.fillColor, this.focusColor, this.hoverColor, this.errorBorder, this.focusedBorder, this.focusedErrorBorder, this.disabledBorder, this.enabledBorder, this.border, this.enabled = true, this.semanticCounterText, this.alignLabelWithHint, }) "},"widget/input/Form.html":{"url":"widget/input/Form.html","title":"Form(表格)","keywords":"","body":"1. Form(表格)1. Form(表格) 表格类，可以通过Cookbook-Forms来初步实现Form的创建；其中涉及到的Widget有：FormField、TextFormField、DropdownButtonFormField、EditableText、InputDatePickerFormField。 class TextFormField extends FormField{} class DropdownButtonFormField extends FormField{} class EditableText extends StatefulWidget{} Form示例 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: \"FloatingActionButton Demo\", home: HomePage(), ); } } //////////////////////////////首页////////////////////////////////// class HomePage extends StatefulWidget { HomePage({Key key}) : super(key: key); @override _HomePage createState() => new _HomePage(); } class _HomePage extends State { // Create a global key that uniquely identifies the Form widget // and allows validation of the form. // // Note: This is a `GlobalKey`, // not a GlobalKey. final _formKey = GlobalKey(); FocusNode _focusNode; List _dropList; String _dropListSelected; final TextEditingController _controller = TextEditingController(); @override void initState() { super.initState(); _focusNode = FocusNode(); _dropList = [\"One\", \"Two\"]; _dropListSelected = _dropList.length Form( key: _formKey, child: Column( mainAxisAlignment: MainAxisAlignment.start, // Add TextFormFields and RaisedButton here. children: [ Padding( padding: const EdgeInsets.all(16.0), child: TextFormField( //autofocus: true, //focusNode: _focusNode, decoration: const InputDecoration( hintText: 'Enter your email', ), // 校验字段 validator: (value) { if (value.isEmpty) { return 'Please enter some text'; } return null; }, onChanged: (value) { print(value); }, ), ), Padding( padding: EdgeInsets.only(left: 16.0, bottom: 16.0, right: 16.0), child: DropdownButtonFormField( hint: const Text('Select Value'), value: _dropListSelected, items: _dropList .map>((String dropdownMenuItem) { return DropdownMenuItem( child: Text(dropdownMenuItem), value: dropdownMenuItem, ); }).toList(), onChanged: (value) {}, validator: (String value) => value == null ? 'Must select value' : null, onSaved: (String value) { setState(() { _dropListSelected = value; }); }, ), ), Padding( padding: EdgeInsets.only(left: 16.0, bottom: 16.0, right: 16.0), child: EditableText( backgroundCursorColor: Colors.grey, controller: _controller, focusNode: _focusNode, style: TextStyle(color: Colors.black), cursorColor: Color.fromARGB(0xFF, 0xFF, 0x00, 0x00), ), ), InputDatePickerFormField( firstDate: DateTime(2018), lastDate: DateTime(2030), ), RaisedButton( onPressed: () { if (_focusNode.canRequestFocus) { _focusNode.requestFocus(); } if (_formKey.currentState.validate()) { Scaffold.of(context).showSnackBar( SnackBar(content: Text('Processing Data'))); } }, child: Text('Submit'), ), ], ), ), ), ); } } "},"widget/table/":{"url":"widget/table/","title":"表格","keywords":"","body":""},"widget/table/DataTable.html":{"url":"widget/table/DataTable.html","title":"DataTable","keywords":"","body":"1. DataTable1.1. PaginatedDataTable2. Table2.1. DataTable2.2. SingleChildScrollView2.3. PaginatedDataTable1. DataTable DataColumn DataRow DataTable({ Key key, @required this.columns, this.sortColumnIndex, this.sortAscending = true, this.onSelectAll, this.dataRowHeight = kMinInteractiveDimension, this.headingRowHeight = 56.0, this.horizontalMargin = 24.0, this.columnSpacing = 56.0, this.showCheckboxColumn = true, this.dividerThickness = 1.0, @required this.rows, }); const DataColumn({ @required this.label, this.tooltip, this.numeric = false, this.onSort, }); const DataRow({ this.key, this.selected = false, this.onSelectChanged, @required this.cells, }); const DataCell( this.child, { this.placeholder = false,//显示缺省 this.showEditIcon = false,// 显示编辑按钮 this.onTap, }); 示例 import 'package:flutter/material.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', home: MainPage(), ); } } class MainPage extends StatefulWidget { @override _MainPage createState() => new _MainPage(); } class _MainPage extends State { List columnsTitles = List.generate(3, (index) { return DataColumn( numeric: true, label: Text(\"COL$index\", style: TextStyle(fontStyle: FontStyle.italic)), ); }); List rows = List.generate(20, (index) { return DataRow( selected: index == 2 ? true : false, onSelectChanged: (bool value){ print('object-$index'); }, cells: [ DataCell(Text('co1-$index'),showEditIcon: true), DataCell(Text('co2-$index'),showEditIcon: true), DataCell(Text('co3-$index'),showEditIcon: true), ], ); }); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\"Demo\"), ), body: DataTable( columns: [ DataColumn( // numeric: true, label: Text( \"COL1\", style: TextStyle(fontStyle: FontStyle.italic), ), tooltip: \"Column Tips\" ), DataColumn( // numeric: true, label: Text( \"COL22\", style: TextStyle(fontStyle: FontStyle.italic), ), ), DataColumn( numeric: true, label: Text( \"COL3\", style: TextStyle(fontStyle: FontStyle.italic), ), ), ], rows: rows, ), ); } } 1.1. PaginatedDataTable PaginatedDataTable({ Key key, @required this.header,//表头 this.actions, @required this.columns, this.sortColumnIndex, this.sortAscending = true, this.onSelectAll, this.dataRowHeight = kMinInteractiveDimension, this.headingRowHeight = 56.0, this.horizontalMargin = 24.0, this.columnSpacing = 56.0, this.showCheckboxColumn = true, this.initialFirstRowIndex = 0, this.onPageChanged, this.rowsPerPage = defaultRowsPerPage, this.availableRowsPerPage = const [defaultRowsPerPage, defaultRowsPerPage * 2, defaultRowsPerPage * 5, defaultRowsPerPage * 10], this.onRowsPerPageChanged, this.dragStartBehavior = DragStartBehavior.start, @required this.source, }); 2. Table Table (Flutter Widget of the Week) Table Class 2.1. DataTable DataTable (Flutter Widget of the Week) CodePen-DataTable,搭配视频讲解看 2.2. SingleChildScrollView SingleChildScrollView-DataTable 2.3. PaginatedDataTable "},"widget/layout/":{"url":"widget/layout/","title":"布局","keywords":"","body":"Flutter几乎所有的东西都是Widgtes，包括布局都是Widgtes。 布局组件的child有两种形式: Single-child layout widgets -> Widget child Multi-child layout widgets -> List children = const [] Flutter 仓库地址 Flutter关于布局的示例 Flutter Gallery 应用 布局构造 "},"widget/layout/Align.html":{"url":"widget/layout/Align.html","title":"Align(对齐布局)","keywords":"","body":"1. Align(对齐布局)1. Align(对齐布局) Align(对齐布局)： 将子组件按照指定的方式对齐，并且根据子组件的大小调整自己的大小。 Align (Flutter Widget of the Week) 属性 值 描述 bottomCenter (0.5,1.0) 底部中心 bottomLeft (0.0,1.0) 左下角 bottomRight (1.0,1.0) 右下角 center (0.5,0.5) 水平垂直居中 centerLeft (0.0,0.5) 坐边缘中心 centerRight (1.0,0.5) 右边缘中心 topCenter (0.5,0.0) 顶部中心 topLeft (0.0,0.0) 左上角 topRight (1.0,0.0) 右上角 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: PaddingDemo(), ); } } class PaddingDemo extends StatelessWidget { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: Text('Align Demo'), ), body: new Stack( children: [ // 左上角 new Align( alignment: new FractionalOffset(0.0, 0.0), child: new Image.asset('icons/code.png',width: 128.0,height: 128.0,), ), // 右上角 new Align( alignment: FractionalOffset(1.0, 0.0), child: new Image.asset('icons/code.png',width: 128.0,height: 128.0,), ), // 水平垂直居中 new Align( alignment: FractionalOffset.center, child: new Image.asset('icons/code.png',width: 128.0,height: 128.0,), ), // 左下角 new Align( alignment: FractionalOffset.bottomLeft, child: new Image.asset('icons/code.png',width: 128.0,height: 128.0,), ), // 右下角 new Align( alignment: FractionalOffset.bottomRight, child: new Image.asset('icons/code.png',width: 128.0,height: 128.0,), ), ], ), ); } } "},"widget/layout/AspectRatio.html":{"url":"widget/layout/AspectRatio.html","title":"AspectRatio(调整宽高比)","keywords":"","body":"1. AspectRatio(调整宽高比)1. AspectRatio(调整宽高比) AspectRatio 作用是根据设置调整子元素child的宽高比，适合用于需要固定宽高比的场景。 AspectRatio Class 使用AspectRatio进行布局的情况： AspectRatio 会在布局条件允许的范围内尽可能的扩展。Widget的高度是由宽度和比率决定的，类似于BoxFit.contain，按照固定比率去尽可能的沾满区域。 如果在满足所欲呕限制条件后依然无法找到可行的尺寸，AspectRatio会优先适应布局限制条件，而忽略所设置的比率。 属性 类型 描述 aspectRatio double 设置child组件的宽高比，aspectRatio:3/2:宽高比例为3:2 child Widget import 'package:flutter/material.dart'; void main() => runApp(MyApp()); // 宽度300的Container上添加一个约束最大最小宽高的ConstrainedBox。 class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Container( height: 200.0, child: new AspectRatio( aspectRatio: 1.5,// 比率是1.5 => W = H * 1.5,所以AspectRatio组件的尺寸为(300,200) child: new Container( color: Colors.green, ), ), ), ), ); } } "},"widget/layout/Baseline.html":{"url":"widget/layout/Baseline.html","title":"Baseline(基准线)","keywords":"","body":"1. Baseline(基准线布局)1. Baseline(基准线布局) Baseline 将左右元素底部放到同一条水平线上。 Baseline Class 属性 类型 描述 baseline double baselineType TextBaseLine baseline类型： alphabetic：对齐字符底部的水平线。 ideographic：对齐表意字符串的水平线。 "},"widget/layout/Center.html":{"url":"widget/layout/Center.html","title":"Center(居中)","keywords":"","body":"1. Center(居中布局)1. Center(居中布局) Center(居中布局)： 子元素处于水平和垂直方向的中间位置。 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Title'), ), body: new Center( child: new Text('Center Layout'), ), ), ); } } "},"widget/layout/Column.html":{"url":"widget/layout/Column.html","title":"Column(垂直)","keywords":"","body":"1. Column(垂直布局)1. Column(垂直布局) Column(垂直布局) 用来完成对子组件纵向的排列。主轴是垂直方向，次轴是水平方向。 属性 值 描述 mainAxisAlignment MainAxisAlignment 主轴的排列方式 crossAxisAlignment CrossAxisAlignment 次轴的排列方式 mainAxisSize MainAxisSize 主轴应该占据多少空间。取值max为最大，min为最小。 children List Column({ Key key, MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, MainAxisSize mainAxisSize = MainAxisSize.max, TextDirection textDirection, VerticalDirection verticalDirection = VerticalDirection.down, TextBaseline textBaseline, List children = const [], }) import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: PaddingDemo(), ); } } class PaddingDemo extends StatelessWidget { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: Text('Align Demo'), ), body: new Column( children: [ new Expanded( child: new Text('data', textAlign: TextAlign.center,), ), new Expanded( child: new Text('data', textAlign: TextAlign.center,), ), new Expanded( child: new FittedBox( fit: BoxFit.contain, child: const FlutterLogo(), ) ), ], ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: PaddingDemo(), ); } } class PaddingDemo extends StatelessWidget { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: Text('Align Demo'), ), body: new Column( crossAxisAlignment: CrossAxisAlignment.start,// 水平方向靠左对齐 mainAxisSize: MainAxisSize.min, //主轴方向最小化处理 children: [ new Text('度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询'), new Text('度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询'), new Text('度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询'), new Text('data1'), new Text('度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询'), new Text('度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询度权重查询 SEO概况查询 友情链接查询 Google PR查询 Whois信息查询 域名备案查询'), ], ), ); } } "},"widget/layout/Row.html":{"url":"widget/layout/Row.html","title":"Row(水平)","keywords":"","body":"1. Row(水平布局)1. Row(水平布局) Row(水平布局) 用来完成子组件在水平方向的排列。 属性 值 描述 mainAxisAlignment MainAxisAlignment 主轴的排列方式 crossAxisAlignment CrossAxisAlignment 次轴的排列方式 mainAxisSize MainAxisSize 主轴应该占据多少空间。取值max为最大，min为最小。 children List import 'package:flutter/material.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { var stars = Row( mainAxisSize: MainAxisSize.min, children: [ Icon(Icons.star, color: Colors.green[500]), Icon(Icons.star, color: Colors.green[500]), Icon(Icons.star, color: Colors.green[500]), Icon(Icons.star, color: Colors.black), Icon(Icons.star, color: Colors.black), ], ); final ratings = Container( color: Colors.blue, padding: EdgeInsets.all(20), child: Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, //空间均分 children: [ stars, Text( '170 Reviews', style: TextStyle( color: Colors.black, fontWeight: FontWeight.w800, fontFamily: 'Roboto', letterSpacing: 0.5, fontSize: 20, ), ), ], ), ); return MaterialApp( title: 'Flutter Demo', home: new Scaffold( appBar: AppBar( title: Text('FittedBox Demo'), ), body: Center( child: ratings, ), ), ); } } "},"widget/layout/ConstrainedBox.html":{"url":"widget/layout/ConstrainedBox.html","title":"ConstrainedBox(限定最大最小宽度)","keywords":"","body":"1. ConstrainedBox(限定最大最小宽度布局)1. ConstrainedBox(限定最大最小宽度布局) ConstrainedBox的作用就是限定子元素child的最大宽度、最大高度、最小宽度和最小高度。例如：通过ConstrainedBox来限制文本 Widget 的最大宽度，使其跨越多行。 ConstrainedBox (Flutter Widget of the Week) CodePen-ConstrainedBox,搭配视频讲解看 ConstrainedBox class | --- | --- | --- | |constraints|BoxConstraints|添加到child上的额外限制条件，BoxConstraints的作用就是限制各种最大最小宽高| |child||| import 'package:flutter/material.dart'; void main() => runApp(MyApp()); // 宽度300的Container上添加一个约束最大最小宽高的ConstrainedBox。 class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new ConstrainedBox( constraints: const BoxConstraints( minWidth: 150.0, minHeight: 150.0, maxWidth: 220.0, maxHeight: 220.0, ), child: new Container( width: 300.0, height: 300.0, color: Colors.red, ), ), ), ); } } "},"widget/layout/Container.html":{"url":"widget/layout/Container.html","title":"Container(容器)","keywords":"","body":"1. Container(基础布局)1. Container(基础布局) Container(基础布局)是一个组合的 Widget 。类似于HTML中的标签，用于组合其他的 Widget 。 Container (Flutter Widget of the Week) CodePen-ContainerExample,搭配视频讲解看 Container class 属性 类型 说明 key Key Container 唯一标识符，用于查找更新 alignment AlignmentGeometry 控制 child 的对齐方式，如果 Container或者 Container父节点尺寸大于 child 的尺寸，这个属性设置会起作用，有很多种对齐方式 padding EdgelnsetsGeometry 填充， Decoration 内部的空白区域，如果有 child的话，child位于padding 内部 margin EdgelnsetsGeometry 边距属性，围绕在 Decoration 和 child 之外的空白区域，不属于内容区域 color Color 用来设置 Container背景色，如果 foregroundDecoration设置的话，可能会遮盖 color效果 decoration Decoration 给Container添加一些装饰，比如形状、颜色...，设置了 Decoration 的话，就不能设置 color属性，否则会报错，此时应该在 Decoration 中进行颜色的设置 foregroundDecoration Decoration 绘制在 child前面的装饰 width double Container 的宽度，设置为 double.infinity可以强制在宽度上撑满，不设置，撑满则根据 child 和父节点两者一起布局 height double Container的高度，设置为 double.infinity即可以 强制在高度上撑满 constraints BoxConstraints 添加到 child上额外的约束条件 transform Matrix4 设置 Container 的变换矩阵，类型为 Matrix4 child Widget Container 中的内容 Widget import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: new Scaffold( appBar: new AppBar( title: new Text(\"AppBar Title\"), ), body: new Center( child: new Container( width: 200, height: 200, decoration: BoxDecoration( color: Colors.red ), child: new Center( child: new Text('Container Text'), ), ), ), ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { Widget container = new Container( // 添加装饰效果 decoration: new BoxDecoration( color: Colors.grey, ), // 子元素指定为一个垂直水平嵌套布局的组件 child: new Column( children: [ // 第一行 new Row( children: [ new Expanded( child: new Container( width: 150.0, height: 150.0, // 添加边框样式 decoration: new BoxDecoration( border: new Border.all( width: 10.0, color: Colors.blueGrey, ), borderRadius: const BorderRadius.all( const Radius.circular(8.0), )), margin: const EdgeInsets.all(4.0), child: new Image.asset('icons/code.png'), )), new Expanded( child: new Container( width: 150.0, height: 150.0, decoration: new BoxDecoration( border: new Border.all( width: 10.0, color: Colors.blueGrey, ), borderRadius: const BorderRadius.all( const Radius.circular(8.0), )), margin: const EdgeInsets.all(4.0), child: new Image.asset('icons/code.png'), )), ], ), // 第二行 new Row( children: [ new Expanded( child: new Container( width: 150.0, height: 150.0, decoration: new BoxDecoration( border: new Border.all( width: 10.0, color: Colors.blueGrey, ), borderRadius: const BorderRadius.all( const Radius.circular(8.0), )), margin: const EdgeInsets.all(4.0), child: new Image.asset('icons/code.png'), )), new Expanded( child: new Container( width: 150.0, height: 150.0, decoration: new BoxDecoration( border: new Border.all( width: 10.0, color: Colors.blueGrey, ), borderRadius: const BorderRadius.all( const Radius.circular(8.0), )), margin: const EdgeInsets.all(4.0), child: new Image.asset('icons/code.png'), )), ], ) ], ), ); return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('Title'), ), body: container, ), ); } } "},"widget/layout/Expanded.html":{"url":"widget/layout/Expanded.html","title":"Expanded(填充)","keywords":"","body":"1. Expanded(填充布局)1. Expanded(填充布局) Expanded (Flutter Widget of the Week) Expanded Class import 'package:flutter/material.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', home: new Scaffold( appBar: AppBar( title: Text('Flutter Demo'), ), body: Center( child: Column( children: [ Row( children: [ Container( color: Colors.blue, width: 100.0, height: 100.0, margin: EdgeInsets.all(2.0), child: Center( child: Text('Container'), ), ), Container( color: Colors.blue, width: 100.0, height: 100.0, margin: EdgeInsets.all(2.0), child: Center( child: Text('Container'), ), ), ], ), Row( children: [ Container( color: Colors.blue, width: 100.0, height: 100.0, margin: EdgeInsets.all(2.0), child: Center( child: Text('Container'), ), ), Expanded( child: Container( color: Colors.amber, height: 100.0, child: Center( child: Text('Expanded'), ), ), ), Container( color: Colors.blue, width: 100.0, height: 100.0, margin: EdgeInsets.all(2.0), child: Center( child: Text('Container'), ), ), ], ), Row( children: [ Expanded( flex: 2, child: Container( color: Colors.amber, height: 100.0, child: Center( child: Text( 'Expanded \\nflex: 2', textAlign: TextAlign.center, ), ), ), ), Container( color: Colors.blue, width: 100.0, height: 100.0, margin: EdgeInsets.all(2.0), child: Center( child: Text('Container'), ), ), Expanded( flex: 1, child: Container( color: Colors.amber, height: 100.0, child: Center( child: Text( 'Expanded \\nflex: 1', textAlign: TextAlign.center, ), ), ), ), ], ), ], ), ), ), ); } } "},"widget/layout/FittedBox.html":{"url":"widget/layout/FittedBox.html","title":"FittedBox(缩放)","keywords":"","body":"1. FittedBox(缩放布局)1. FittedBox(缩放布局) FittedBox (Flutter Widget of the Week) FittedBox-官方文档 FittedBox(缩放布局) 组件主要做两件事，缩放(Scale)和位置调整(Position)。 FittedBox会在自己的尺寸范围内缩放并且调整child的位置。使child适合其尺寸。有点像ImageView组件，ImageView会将图片在其范围内按照规则进行缩放位置调整。 布局行为分为两种情况: 如果外部有约束的话，按照外部约束调整自身尺寸，然后缩放调整child，按照指定的条件进行布局。 如果没有外部约束条件，则跟着child尺寸一致，指定的缩放以及位置属性将不起作用。 属性： 属性alignment：设置对齐方式，默认是Alignment.center，居中展示child。 属性fit：缩放方式。 fit缩放属性 图解 描述 contain child在FittedBox范围内尽可能大，但是不能超出其尺寸。【contain是在保持着child宽高比不变的大前提下尽可能的填满，一般是宽度或者高度达到最大值时就会停止缩放。】 cover 按照原始尺寸填充整个容器，内容可能会超过容器范围 fill 不按照宽高比填充，直接填满但是不会超过容器范围 fitHeight 按照高度填充整个容器 fitWidth 按照宽度填充整个容器 none 没有任何填充 scaleDown 根据情况缩小范围，内容不会超过容器范围，有时和contain一样有时和none一样 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar(title: Text('data'),), body: new Container( color: Colors.red, width: 200.0, height: 200.0, child: new FittedBox( fit: BoxFit.scaleDown, alignment: Alignment.topLeft, child: new Container( color: Colors.green, child: new Text('Test'), ), ), ), ), ); } } "},"widget/layout/FractionallySizedBox.html":{"url":"widget/layout/FractionallySizedBox.html","title":"FractionallySizedBox(百分比)","keywords":"","body":"1. FractionallySizedBox(百分比布局)1. FractionallySizedBox(百分比布局) FractionallySizedBox 组件会根据现有空间来调整child的尺寸，所以就算为child设置了尺寸数值，也不起作用。 设置了具体的宽高因子，具体的宽高=现有的空间宽高X因子。 没有设置宽高因子，则填满可用区域。 属性 类型 描述 alignment AlignmentGeometry 对齐方式，不能为null widthFactor double 宽度因子 heightFactor double 高度因子 FractionallySizedBox (Flutter Widget of the Week) FractionallySizedBox Class import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Container( color: Colors.red, height: 200.0, width: 200.0, child: new FractionallySizedBox( alignment: Alignment.topCenter, widthFactor: 0.5, //宽度因子 heightFactor: 1.5, //高度因子 child: new Container( color: Colors.blue, ), ), ), ), ); } } "},"widget/layout/LimitedBox.html":{"url":"widget/layout/LimitedBox.html","title":"LimitedBox(限定最大宽高)","keywords":"","body":"1. LimitedBox(限定最大宽高布局)1. LimitedBox(限定最大宽高布局) LimitedBox和ConstrainedBox组件类似。只不过LimitedBox没有最小宽高限制。 属性 类型 描述 maxWidth double 最大宽度 maxHeight double 最大高度 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); // 宽度300的Container上添加一个约束最大最小宽高的ConstrainedBox。 class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: Row( children: [ Container( color: Colors.red, width: 100.0, ), LimitedBox( maxWidth: 100.0, child: Container( color: Colors.blue, width: 250.0,// 虽然设置了25.0 但是父容器限制了最大宽度 ), ), ], ), ), ); } } "},"widget/layout/Offstage.html":{"url":"widget/layout/Offstage.html","title":"Offstage(控制是否显示)","keywords":"","body":"1. Offstage(控制是否显示组件)1. Offstage(控制是否显示组件) Offstage 通过参数来控制child是否显示。 属性 类型 默认值 描述 offstage bool true true：不显示 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { final appTitle = \"Offstage 控制是否展示组件示例\"; return new MaterialApp( title: 'Demo', home: new MyHomePage(title: appTitle,), ); } } class MyHomePage extends StatefulWidget { final String title; MyHomePage({Key key, this.title}) : super(key: key); @override _MyHomePage createState() => _MyHomePage(); } class _MyHomePage extends State { bool offstage = true; @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: new Text(widget.title), ), body: new Center( child: new Offstage( offstage: offstage, child: new Text( 'Show Stage', style: TextStyle(fontSize: 36.0), ), ), ), floatingActionButton: new FloatingActionButton( onPressed: () { setState(() { offstage = !offstage; }); }, child: new Icon(Icons.flip), ), ); } } "},"widget/layout/OverflowBox.html":{"url":"widget/layout/OverflowBox.html","title":"OverflowBox(溢出父容器显示)","keywords":"","body":"1. OverflowBox 溢出父容器显示1. OverflowBox 溢出父容器显示 OverflowBox 组件运行子元素child超出父容器的显示范围。 当OverflowBox的最大尺寸大于child的时候，child可以完整显示。 当OverflowBox的最大尺寸小于child的时候，则以最大尺寸为基准，当然这个尺寸是可以突破父节点的。 属性 类型 描述 alignment AlignmentGeometry minWidth double 允许 child 的最小宽度。如果 child 宽度小于这个值，则按照最小宽度进行显示 maxWidth double 允许 child 的最大宽度。如果 child 宽度大于这个值，则按照最大宽度进行显示 minHeight double 允许 child 的最小高度。如果 child 宽度小于这个值，则按照最小高度进行显示 maxHeight double 允许 child 的最小高度。如果 child 宽度小于这个值，则按照最小高度进行显示 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Container( color: Colors.red, width: 200.0, height: 200.0, padding: const EdgeInsets.all(10.0), child: OverflowBox( alignment: Alignment.topLeft, maxWidth: 300.0, maxHeight: 500.0, child: Container( color: Colors.green, width: 400.0, height: 400.0, ), ), ), ), ); } } "},"widget/layout/Padding.html":{"url":"widget/layout/Padding.html","title":"Padding(填充)","keywords":"","body":"1. Padding(填充布局)1. Padding(填充布局) Padding(填充布局)： 用于处理容器与其子元素之间的间距，与padding对应的属性是 margin 属性，margin是处理容器与其他组件之间的间距。 Padding (Flutter Widget of the Week) Padding Class Padding Demo 属性 类型 说明 padding EdgeInsetsGeometry 填充的值可以用EdgeInsets方法，例如：EdgeInsets.all(6.0)将容器的上下左右填充设置为6.0 // 所有方向 const EdgeInsets.all(double value) // 分别定义各个方向的边框 const EdgeInsets.only({double left: 0.0,double top: 0.0,double right: 0.0,double bottom: 0.0}) // 自定义垂直、水平方向 const EdgeInsets.symmetric({double vertical: 0.0,double horizontal: 0.0}) // 根据机型屏幕尺寸定义 EdgeInsets.fromWindowPadding(ui.WindowPadding padding, double devicePixelRatio) import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: PaddingDemo(), ); } } class PaddingDemo extends StatelessWidget { @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: Text('Padding Demo'), ), body: new Center( child: new Container( width: 300.0, height: 300.0, // 容器的上下左右填充设置为60.0 padding: new EdgeInsets.all(30.0), decoration: new BoxDecoration( color: Colors.red, border: new Border.all( color: Colors.green, width: 8.0, ), ), child: new Container( color: Colors.white, ), ), ), ); } } "},"widget/layout/SizedBox.html":{"url":"widget/layout/SizedBox.html","title":"SizedBox(设置具体尺寸)","keywords":"","body":"1. SizedBox(设置具体尺寸)1. SizedBox(设置具体尺寸) SizedBox组件是一个特定大小的盒子，这个组件强制他的child有特定的宽度和高度。 属性 类型 描述 width double 如果具体设置了宽度，则强制child宽度为此值； 如果没有设置，则根据child宽度调整自身宽度 height double 如果具体设置了高度，则强制child高度为此值； 如果没有设置，则根据child高度调整自身宽度 import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: SizedBox( width: 200.0, height: 300.0, child: const Card( child: Text( 'data', style: TextStyle(fontSize: 36.0), ), ), ), ), ); } } "},"widget/layout/Transform.html":{"url":"widget/layout/Transform.html","title":"Transform(矩阵转换)","keywords":"","body":"1. Transform(矩阵转换)1. Transform(矩阵转换) Transform (Flutter Widget of the Week) Transform 主要作用就是做矩阵转换。对组件进行平移、旋转和缩放的等操作。 const Transform({ Key key, @required this.transform, this.origin, this.alignment, this.transformHitTests = true, Widget child, }); 属性 类型 描述 transform Matrix4 一个4x4的矩阵。 origin Offset 旋转点，相对于左上角顶点的偏移。默认旋转点是在左上角顶点 alignment AlignmentGeometry 对齐方式 transformHitTests bool 点击区域石佛业做相应的改变 Transform.translate({Key key,@required Offset offset,this.transformHitTests = true,Widget child,}); "},"widget/layout/GridView.html":{"url":"widget/layout/GridView.html","title":"GridView(网格列表)","keywords":"","body":"1. GridView(网格列表布局)1. GridView(网格列表布局) 网格列表组件(GridView)：克实现多行多列的应用场景。 GridView.count： 允许你制定列的数量。 GridView.extent： 允许你制定单元格的最大宽度。 属性 类型 默认值 说明 scrollDirection reverse controller primary bool 是否是与父节点的PrimaryScrollController所关联的主滚动视图 physics shrinkWrap padding gridDelegate SliverGridDelegate 控制GridView中节点布局的delegate cacheExtent import 'package:flutter/material.dart'; void main() => runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { List widgets = new List.generate(20, (i) => new Text('data')); return MaterialApp( home: new Scaffold( appBar: new AppBar( title: new Text('Bar title'), ), body: new GridView.count( crossAxisCount: 3,// 一行上放三列数据 primary: false, padding: const EdgeInsets.all(20.0), crossAxisSpacing: 30.0, children: widgets, ), ), ); } } import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { List _buildGridTitleList(int count) { return new List.generate(count, (int index) { return new Container( child: new Image.asset('icons/code.png',), ); }); } Widget buildGrid() { return new GridView.extent( maxCrossAxisExtent: 150.0, // 次轴最大宽度 padding: const EdgeInsets.all(4.0), mainAxisSpacing: 4.0, // 主轴间隙 crossAxisSpacing: 4.0, // 次轴间隙 children: _buildGridTitleList(9), ); } return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Center( child: buildGrid(), ), ), ); } } "},"widget/layout/IndexedStack.html":{"url":"widget/layout/IndexedStack.html","title":"IndexedStack","keywords":"","body":"1. IndexedStack1. IndexedStack IndexedStack继承了Stack，它的作用就是显示第index个child，其他的child不可见。所以IndexStack的尺寸永远是和最大的子节点尺寸一致的。 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { var stack = new IndexedStack( index: 1, alignment: Alignment.topLeft, children: [ new CircleAvatar( backgroundImage: new AssetImage('icons/code.png'), radius: 100.0, ), new Positioned( bottom: 50.0, right: 50.0, child: new Text('data', style: new TextStyle( fontSize: 36.0, fontWeight: FontWeight.bold, color: Colors.red))), ], ); return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Center( child: stack, ), ), ); } } "},"widget/layout/LayoutBuilder.html":{"url":"widget/layout/LayoutBuilder.html","title":"LayoutBuilder(布局构造器)","keywords":"","body":"1. LayoutBuilder(布局构造器)1. LayoutBuilder(布局构造器) LayoutBuilder可以通过判断设备尺寸来布局界面。与其类似的用法还有MediaQuery.of(context).orientation == Orientation.portrait LayoutBuilder Class import 'package:flutter/material.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: 'Flutter Demo', home: new Scaffold( appBar: AppBar( title: Text('FittedBox Demo'), ), body: LayoutBuilder( builder: (BuildContext context, BoxConstraints constraints) { // 通过 constraints 来判断屏幕的尺寸，从而进行界面适配。 if (constraints.maxWidth "},"widget/layout/ListView.html":{"url":"widget/layout/ListView.html","title":"ListView","keywords":"","body":"1. ListView1. ListView import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { final List list = [ new ListTile( title: Text('titletitletitletitletitletitletitletitletitletitletitletitletitletitle',style: new TextStyle(fontWeight: FontWeight.w400,fontSize: 18.0),), subtitle: Text('Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test Test '), leading: Icon(Icons.fastfood,color: Colors.blue,), ), new ListTile( title: Text('data',style: new TextStyle(fontWeight: FontWeight.w400,fontSize: 18.0),), subtitle: Text('data'), leading: Icon(Icons.fastfood,color: Colors.blue,), ), ]; @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Center( child: new ListView( children: list, ) ), ), ); } } "},"widget/layout/Stack.html":{"url":"widget/layout/Stack.html","title":"Stack(栈)","keywords":"","body":"1. Stack(栈布局-将Widget覆盖在另一个的上面)1.1. Alignment1.2. Overflow1.3. Positioned1. Stack(栈布局-将Widget覆盖在另一个的上面) 1.1. Alignment Stack组件的每个子组件要么定位，要么不定位。定位的子组件用Positioned组件包裹。Stack组件本身包含所有不定位的子组件，子组件根据alignment属性进行定位(默认为左上角)。然后根据定位的子组件的top、right、bottom和left属性将它们位置在Stack组件上。 属性 类型 默认值 描述 alignment AlignmentGeometry Alignment.topLeft 定位位置有以下几种：bottomCenter : 底部中心 bottomLeft : 左下角 bottomRight : 右下角 center : 水平垂直居中 centerLeft : 坐边缘中心 centerRight : 右边缘中心 topCenter : 顶部中心 topLeft : 左上角 topRight : 右上角 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { var stack = new Stack( alignment: Alignment.topLeft, children: [ new CircleAvatar( backgroundImage: new AssetImage('icons/code.png'), radius: 100.0, ), new Container( decoration: new BoxDecoration( color: Colors.blue, ), child: new Text( 'TestTes', style: new TextStyle( fontSize: 30.0, fontWeight: FontWeight.bold, color: Colors.white, ), ), ) ], ); return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar(title: Text('data'),), body: new Center( child: stack, ), ), ); } } 1.2. Overflow enum Overflow { visible,/// Overflowing children will be visible. clip,/// Overflowing children will be clipped to the bounds of their parent. } 1.3. Positioned Positioned组件是用来定位的。Stack组件里需要包裹一个定位组件。 属性 类型 描述 top double 子元素相对顶部边界距离 bottom double 子元素相对底部边界距离 left double 子元素相对坐侧边界距离 right double 子元素相对右侧边界距离 import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { var stack = new Stack( alignment: Alignment.topLeft, children: [ new CircleAvatar( backgroundImage: new AssetImage('icons/code.png'), radius: 100.0, ), new Positioned( bottom: 50.0, right: 50.0, child: new Text('data', style: new TextStyle( fontSize: 36.0, fontWeight: FontWeight.bold, color: Colors.red))), ], ); return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: Text('data'), ), body: new Center( child: stack, ), ), ); } } "},"widget/layout/Wrap.html":{"url":"widget/layout/Wrap.html","title":"Wrap(宽高自动换行)","keywords":"","body":"1. Wrap(按宽高自动换行布局)1. Wrap(按宽高自动换行布局) Wrap 使用了Flex中的一些概念，某种意义上和Row、Column更加相似。单行的Wrap和Row表现几乎一致，单列的Wrap和Column表现几乎一致。Wrap是在主轴上空间不足时，则向次轴上去扩展显示。 Wrap Class 属性 类型 默认值 描述 direction Axis Axis.horizontal 主轴(mainAxis)的方向,默认为水平 alignment WrapAlignment 主轴方向上的对齐方式,默认为start spacing double 0.0 主轴方向上的间距 runAlignment WrapAlignment wrapAlignment.start run的对齐方式。run可以理解为新的行或者列,如果是水平方向布局的话,run可以理解为新的一行 runSpacing double 0.0 run的间距 crossAxisAlignment WrapCrossAlignment wrapCrossAlignment.start 主轴(crossAxis)方向上的对齐方式 textDirecfion TextDirection 文本方向 verticalDirection VerticalDirection 定义了children摆放顺序,默认是down import 'package:flutter/material.dart'; void main() => runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: 'Demo', home: new Scaffold( appBar: new AppBar( title: new Text('Demo'), ), body: Wrap( spacing: 8.0, //主轴间距 runSpacing: 4.0, // 行间距【默认水平排序】 children: [ Chip( label: new Text('data'), avatar: CircleAvatar( backgroundColor: Colors.lightGreen.shade800, child: new Text( 'data', style: new TextStyle(fontSize: 10.0), ), ), ), Chip( label: new Text('datadata'), avatar: CircleAvatar( backgroundColor: Colors.lightGreen.shade800, child: new Text( 'datadata', style: new TextStyle(fontSize: 10.0), ), ), ), Chip( label: new Text('datadatadatadata'), avatar: CircleAvatar( backgroundColor: Colors.lightGreen.shade800, child: new Text( 'datadatadatadata', style: new TextStyle(fontSize: 10.0), ), ), ), Chip( label: new Text('datadatadatadataadatadata'), avatar: CircleAvatar( backgroundColor: Colors.lightGreen.shade800, child: new Text( 'datadatadatadataadatadata', style: new TextStyle(fontSize: 10.0), ), ), ), ], ), ), ); } } "},"widget/layout/Flexible.html":{"url":"widget/layout/Flexible.html","title":"Flexible(自适应)","keywords":"","body":"1. Flexible(自适应组件)1. Flexible(自适应组件) Flexible (Flutter Widget of the Week) CodePen-Flexible,搭配视频讲解看 Flexible Class "}}